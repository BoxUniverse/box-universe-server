var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AccessTokenResponse.html",[0,0.298,1,3.382]],["body/classes/AccessTokenResponse.html",[0,0.435,1,5.921,2,0.77,3,0.113,4,0.113,5,0.088,6,5.809,7,0.428,8,1.655,9,6.814,10,0.412,11,0.008,12,0.876,13,1.115,14,1.81,15,0.474,16,6.561,17,0.113,18,2.433,19,1.044,20,0.113,21,0.007,22,0.007]],["title/classes/AppGateway.html",[0,0.298,23,3.636]],["body/classes/AppGateway.html",[0,0.239,2,0.423,3,0.062,4,0.062,5,0.048,7,0.235,8,1.11,10,0.458,11,0.008,12,0.695,13,0.896,15,0.527,17,0.125,20,0.062,21,0.005,22,0.005,23,4.269,24,3.192,25,2.671,26,6.232,27,6.232,28,4.135,29,1.064,30,1.966,31,5.272,32,5.272,33,5.272,34,0.958,35,2.202,36,3.959,37,3.606,38,1.355,39,0.765,40,0.974,41,3.087,42,3.805,43,3.606,44,3.606,45,5.026,46,3.606,47,4.454,48,1.231,49,3.606,50,3.606,51,5.272,52,5.272,53,3.606,54,2.303,55,2.303,56,2.202,57,2.112,58,2.112,59,1.572,60,0.6,61,1.957,62,2.303,63,3.192,64,2.031,65,2.112,66,2.202,67,2.112,68,0.6,69,2.92,70,2.92,71,2.92,72,1.167,73,3.606,74,1.304,75,3.509,76,6.232,77,3.606,78,3.606,79,6.232,80,6.232,81,2.808,82,5.272,83,2.507,84,4.414,85,4.599,86,3.606,87,5.272,88,4.269,89,3.606,90,3.606,91,5.046,92,2.92,93,5.272,94,3.606,95,3.606,96,3.606,97,3.606,98,3.606,99,4.269,100,3.606,101,2.908,102,5.272,103,5.272,104,3.606,105,3.606,106,6.232,107,3.606,108,1.53]],["title/modules/AppModule.html",[109,1.453,110,3.382]],["body/modules/AppModule.html",[0,0.218,3,0.056,4,0.056,5,0.044,11,0.008,17,0.154,19,0.523,20,0.056,21,0.004,22,0.004,36,1.783,60,0.546,61,1.783,67,1.923,68,1.089,74,0.5,109,1.593,110,6.925,111,1.473,112,2.271,113,2.908,114,2.908,115,5.217,116,5.217,117,4.704,118,4.94,119,5.217,120,4.94,121,5.217,122,4.94,123,3.859,124,5.217,125,5.217,126,4.497,127,4.704,128,2.414,129,1.612,130,1.612,131,2.66,132,2.578,133,4.92,134,3.284,135,2.908,136,2.326,137,1.721,138,3.284,139,3.284,140,1.923,141,1.063,142,3.284,143,2.326,144,1.664,145,2.098,146,2.326,147,2.203,148,2.908,149,1.321,150,0.854,151,2.474,152,2.474,153,2.098,154,1.432,155,4.92,156,4.184,157,4.356,158,3.455,159,2.938,160,3.602,161,3.284,162,3.768,163,3.284,164,2.908,165,2.908,166,1.195,167,3.284,168,3.284,169,4.92,170,3.284,171,3.284,172,3.284,173,3.984,174,3.984,175,4.356,176,3.284,177,3.284,178,3.284,179,3.284,180,3.284,181,3.284,182,3.284,183,3.284,184,3.284,185,1.088,186,3.284,187,4.356,188,3.284,189,3.284,190,5.223,191,0.609,192,5.223,193,3.284,194,2.474,195,3.284,196,3.284,197,2.66,198,4.356,199,4.356]],["title/injectables/AppService.html",[200,0.763,201,3.636]],["body/injectables/AppService.html",[0,0.4,3,0.104,4,0.104,5,0.081,7,0.393,10,0.379,11,0.008,15,0.54,17,0.128,20,0.104,21,0.007,22,0.007,25,3.057,29,1.507,34,1.603,35,3.684,36,4.728,38,1.192,39,0.673,40,0.857,41,4.374,48,1.192,58,3.533,59,2.631,60,1.003,61,3.275,71,4.886,72,1.953,200,1.27,201,6.048,202,1.953,203,5.342,204,8.876,205,6.034,206,6.034,207,4.546,208,6.034,209,6.034]],["title/injectables/AuthGateway.html",[200,0.763,210,3.18]],["body/injectables/AuthGateway.html",[0,0.435,3,0.113,4,0.113,5,0.088,7,0.428,8,1.655,11,0.008,13,1.115,15,0.474,17,0.135,20,0.113,21,0.007,22,0.007,28,4.567,42,5.138,56,4.006,57,3.842,60,1.091,66,4.006,67,3.842,68,1.091,200,1.336,202,2.124,210,5.567,211,5.809,212,6.561]],["title/guards/AuthGuard.html",[213,3.636,214,2.353]],["body/guards/AuthGuard.html",[0,0.35,3,0.091,4,0.091,5,0.071,7,0.344,10,0.332,11,0.008,15,0.381,17,0.131,19,0.84,20,0.091,21,0.006,22,0.006,25,2.675,29,1.385,30,1.822,38,1.043,39,0.589,40,0.75,48,1.043,60,0.878,68,0.878,74,1.305,81,1.749,108,2.91,166,1.921,190,4.673,191,0.978,197,4.275,200,1.166,214,3.595,215,5.279,216,4.673,217,8.071,218,6.862,219,7.146,220,5.279,221,2.077,222,6.075,223,5.279,224,6.862,225,3.977,226,5.279,227,5.279,228,5.279,229,6.862,230,5.279,231,4.673,232,5.279,233,5.279,234,4.86,235,5.279,236,5.279,237,5.279,238,4.673,239,3.739,240,3.977,241,3.372]],["title/modules/AuthModule.html",[109,1.453,115,3.18]],["body/modules/AuthModule.html",[0,0.37,3,0.096,4,0.096,5,0.075,11,0.008,17,0.146,20,0.096,21,0.006,22,0.006,60,0.929,109,2.303,111,2.504,112,3.285,115,6.495,127,5.559,128,3.491,129,2.74,130,2.74,132,3.728,154,2.435,210,6.166,242,4.944,243,4.944,244,4.944,245,5.584,246,6.185,247,5.584,248,3.384,249,4.344,250,5.584,251,5.36,252,5.584,253,4.944]],["title/classes/AuthResolver.html",[0,0.298,251,3.382]],["body/classes/AuthResolver.html",[0,0.239,1,2.717,2,0.423,3,0.062,4,0.062,5,0.048,7,0.235,10,0.431,11,0.008,13,1.059,15,0.495,17,0.135,19,0.574,20,0.062,21,0.005,22,0.005,29,1.064,30,1.82,34,0.958,38,1.355,39,0.945,40,0.974,48,1.231,60,0.6,68,1.036,72,1.167,74,1.159,75,2.031,81,1.194,92,2.92,154,1.572,166,1.919,185,2.064,191,1.271,241,3.367,246,5.111,251,3.972,253,3.192,254,3.192,255,7.404,256,7.294,257,5.165,258,6.07,259,3.606,260,4.805,261,3.606,262,3.606,263,5.928,264,3.649,265,2.047,266,3.606,267,2.015,268,2.92,269,4.379,270,3.606,271,5.046,272,3.606,273,4.652,274,3.606,275,3.606,276,2.554,277,3.192,278,2.554,279,3.192,280,2.112,281,4.015,282,2.861,283,2.379,284,5.272,285,3.606,286,1.957,287,2.643,288,3.606,289,3.606,290,3.606,291,2.202,292,3.219,293,5.495,294,4.667,295,3.606,296,6.856,297,5.272,298,3.606,299,3.606,300,3.606,301,0.743,302,3.606,303,3.606,304,3.606,305,3.606,306,3.192,307,3.606,308,3.192,309,3.606,310,3.606,311,3.219,312,3.606]],["title/injectables/AuthService.html",[200,0.763,246,3.012]],["body/injectables/AuthService.html",[0,0.254,3,0.066,4,0.066,5,0.052,7,0.25,9,3.108,10,0.406,11,0.008,12,0.868,15,0.467,17,0.111,20,0.066,21,0.005,22,0.005,29,1.113,30,1.687,34,1.02,38,1.276,39,0.72,40,0.918,48,1.09,60,0.638,74,1.249,81,1.827,83,2.219,108,1.628,154,1.673,191,1.443,200,0.938,202,1.243,221,2.137,246,3.7,255,6.62,257,4.156,260,4.753,268,4.467,269,4.508,271,3.108,283,2.783,286,2.083,291,4.31,292,4.31,311,3.368,313,3.398,314,5.516,315,3.398,316,3.838,317,3.838,318,5.516,319,3.838,320,2.575,321,3.838,322,3.108,323,5.516,324,5.516,325,3.838,326,3.838,327,3.838,328,2.248,329,2.892,330,3.078,331,2.045,332,6.249,333,5.516,334,2.624,335,4.884,336,4.467,337,5.016,338,3.838,339,3.838,340,3.838,341,3.838,342,3.838,343,3.838,344,3.838,345,3.838]],["title/classes/ChangeNameConversation.html",[0,0.298,346,2.741]],["body/classes/ChangeNameConversation.html",[0,0.55,2,0.666,3,0.098,4,0.098,5,0.076,11,0.008,12,0.88,14,1.784,17,0.142,18,2.225,19,0.904,20,0.147,21,0.006,22,0.006,39,0.802,74,0.864,108,2.409,144,2.877,150,1.477,331,1.645,346,4.39,347,4.278,348,2.738,349,2.747,350,3.902,351,3.225,352,2.052,353,3.225,354,2.018,355,2.226,356,4.823,357,3.467,358,3.467,359,3.809,360,4.022,361,2.067,362,2.622]],["title/classes/Comment.html",[0,0.298,363,2.867]],["body/classes/Comment.html",[0,0.269,2,0.475,3,0.07,4,0.07,5,0.055,7,0.264,8,1.207,10,0.563,11,0.008,12,0.998,13,1.385,14,1.79,15,0.589,17,0.136,18,1.775,19,0.645,20,0.114,21,0.005,22,0.005,40,0.815,68,1.318,74,0.617,141,1.312,149,1.63,150,1.054,301,1.182,331,1.928,352,1.986,361,1.475,363,4.25,364,3.054,365,3.525,366,4.063,367,3.039,368,4.714,369,3.525,370,2.901,371,2.609,372,4.053,373,6.139,374,4.053,375,3.282,376,3.589,377,4.053,378,5.389,379,5.014,380,5.892,381,4.053,382,4.644,383,4.053,384,4.053,385,4.053,386,4.001,387,2.728,388,2.124,389,1.871,390,2.139,391,3.282,392,2.2,393,2.2,394,3.748,395,3.054,396,3.589]],["title/modules/CommentsModule.html",[109,1.453,116,3.18]],["body/modules/CommentsModule.html",[0,0.377,3,0.098,4,0.098,5,0.077,11,0.008,17,0.143,20,0.098,21,0.006,22,0.006,39,0.635,60,0.947,109,2.332,111,2.554,112,3.325,116,6.367,123,4.584,128,3.534,129,2.794,130,2.794,132,3.774,140,3.335,141,1.844,143,4.033,150,1.481,248,3.427,363,3.637,395,5.427,397,5.041,398,5.041,399,5.694,400,5.869,401,5.694,402,5.102,403,5.427,404,3.477,405,5.694,406,3.335]],["title/classes/CommentsRepository.html",[0,0.298,402,3.18]],["body/classes/CommentsRepository.html",[0,0.271,2,0.479,3,0.07,4,0.07,5,0.055,7,0.266,10,0.456,11,0.008,12,1,15,0.525,17,0.136,20,0.07,21,0.005,22,0.005,29,1.164,30,2.027,34,1.086,38,1.435,39,0.81,40,1.032,48,1.321,72,1.323,74,0.878,81,1.353,101,2.446,108,2.446,141,1.323,143,2.894,149,1.644,150,1.063,162,2.61,166,1.487,185,1.353,191,1.239,221,1.746,267,2.205,301,0.842,331,2.103,352,2.124,363,2.61,365,2.663,366,4.081,367,2.964,368,5.629,369,2.663,387,1.944,389,1.886,390,1.524,391,3.309,402,4.085,407,3.618,408,4.67,409,4.67,410,4.67,411,4.086,412,4.434,413,4.086,414,5.767,415,5.106,416,5.47,417,4.086,418,5.106,419,4.086,420,4.67,421,4.086,422,2.495,423,3.078,424,4.086,425,1.293,426,4.086,427,3.618,428,5.767,429,4.086,430,3.618,431,4.086,432,2.741,433,2.741,434,2.741,435,2.741,436,2.741,437,2.741,438,2.894]],["title/classes/CommentsResolver.html",[0,0.298,403,3.382]],["body/classes/CommentsResolver.html",[0,0.205,2,0.363,3,0.053,4,0.053,5,0.042,7,0.202,10,0.506,11,0.008,12,0.981,13,1.08,15,0.494,17,0.138,19,0.492,20,0.053,21,0.004,22,0.004,29,0.949,30,1.983,34,1.25,38,1.351,39,0.975,40,0.971,48,1.256,59,1.349,60,0.515,68,1.057,72,1.842,74,0.866,75,2.648,81,1.558,108,2.413,143,2.191,149,1.244,150,0.805,151,2.331,154,1.349,158,4.382,159,1.387,160,1.889,185,2.105,191,1.178,214,1.621,221,1.423,264,2.754,265,2.005,267,2.175,280,3.722,281,3.332,282,2.552,283,2.205,301,1.542,352,1.778,363,4.925,367,3.132,368,4.842,400,4.829,403,3.543,408,5.536,409,5.536,410,5.147,420,2.505,425,1.801,439,2.739,440,6.836,441,3.094,442,3.792,443,3.094,444,3.094,445,2.191,446,3.094,447,3.094,448,3.921,449,3.094,450,3.094,451,3.094,452,1.889,453,3.094,454,3.204,455,1.889,456,1.812,457,1.812,458,3.331,459,2.075,460,1.812,461,2.505,462,2.739,463,3.094,464,2.075,465,2.075,466,2.739,467,3.094,468,3.094,469,3.094,470,3.094,471,3.094,472,3.094]],["title/injectables/CommentsService.html",[200,0.763,400,3.012]],["body/injectables/CommentsService.html",[0,0.327,3,0.085,4,0.085,5,0.066,7,0.321,10,0.494,11,0.008,12,1.025,15,0.568,17,0.113,20,0.085,21,0.006,22,0.006,29,1.324,30,2.11,34,1.31,38,1.553,39,0.876,40,1.117,48,1.457,60,0.82,101,2.092,143,3.493,191,1.367,200,1.115,202,1.597,221,1.986,267,2.508,286,2.677,331,1.429,363,3.15,367,1.839,368,5.567,400,4.401,402,5.961,408,5.313,409,5.313,410,5.313,415,5.809,416,5.921,418,5.809,420,5.313,425,1.561,473,4.366,474,4.932,475,4.932,476,4.932,477,4.932,478,4.932,479,4.932,480,4.932,481,4.932]],["title/classes/Conversation.html",[0,0.298,351,2.013]],["body/classes/Conversation.html",[0,0.313,2,0.554,3,0.081,4,0.081,5,0.064,7,0.308,8,1.342,10,0.534,11,0.008,12,0.963,13,1.227,14,1.661,15,0.521,17,0.133,18,1.973,19,0.752,20,0.124,21,0.006,22,0.006,39,0.805,40,0.906,68,1.2,74,0.719,141,1.53,150,1.229,185,2.559,265,2.009,301,1.314,331,2.09,351,3.236,352,2.162,358,4.406,365,2.943,369,2.943,370,3.146,371,2.5,379,3.559,386,3.781,387,3.033,388,2.476,390,2.378,392,2.564,393,2.564,394,4.064,482,3.559,483,4.725,484,6.376,485,4.725,486,4.725,487,3.826,488,4.725,489,3.826,490,2.476,491,3.559,492,4.183]],["title/injectables/ConversationsGateway.html",[200,0.763,493,3.18]],["body/injectables/ConversationsGateway.html",[0,0.204,3,0.053,4,0.053,5,0.041,7,0.2,8,0.986,10,0.398,11,0.008,12,0.343,13,0.963,15,0.458,17,0.128,20,0.053,21,0.004,22,0.004,28,3.898,29,0.945,30,1.716,34,1.244,35,1.878,36,3.7,38,1.12,39,0.632,40,0.805,41,2.741,42,3.461,45,4.769,47,4.385,48,0.925,54,3.62,55,1.964,56,1.878,57,1.801,58,1.801,59,1.341,60,0.511,61,1.669,62,1.964,64,1.732,65,1.801,66,1.878,67,1.801,68,0.511,72,1.835,74,1.33,81,2.549,83,1.883,85,4.25,88,3.791,91,3.791,108,2.404,144,1.558,150,0.8,191,0.57,200,0.796,202,0.996,301,0.634,330,3.255,351,3.536,352,1.942,358,4.163,442,3.9,462,2.722,464,2.063,466,2.722,493,3.316,494,2.722,495,3.527,496,4.681,497,4.559,498,3.075,499,3.075,500,4.681,501,3.075,502,3.075,503,4.681,504,3.075,505,3.075,506,2.063,507,2.063,508,3.075,509,2.063,510,2.722,511,3.075,512,4.27,513,2.741,514,5.668,515,3.075,516,2.317,517,3.075,518,4.144,519,4.144,520,3.075,521,4.144,522,4.681,523,3.075,524,5.609,525,3.075,526,4.144,527,4.144,528,3.075,529,5.018,530,3.075,531,2.49,532,2.722,533,2.722,534,1.964,535,2.722,536,3.075,537,2.722,538,2.722,539,2.722,540,2.722,541,2.722,542,3.075]],["title/modules/ConversationsModule.html",[109,1.453,117,2.867]],["body/modules/ConversationsModule.html",[0,0.329,3,0.085,4,0.085,5,0.067,11,0.008,17,0.145,20,0.085,21,0.006,22,0.006,39,0.735,60,0.826,109,2.135,111,2.228,112,3.044,117,5.79,120,4.423,123,3.455,128,3.235,129,2.438,130,2.438,132,2.603,136,3.519,137,2.603,140,2.909,141,1.608,144,2.517,147,3.333,150,1.292,191,0.921,248,3.137,249,4.026,351,2.957,404,3.033,406,2.909,491,4.967,493,5.973,497,5.535,506,4.964,543,4.398,544,4.398,545,4.398,546,5.535,547,4.968,548,4.967,549,3.743,550,2.798,551,4.968]],["title/classes/ConversationsProcessor.html",[0,0.298,552,3.636]],["body/classes/ConversationsProcessor.html",[0,0.381,2,0.674,3,0.099,4,0.099,5,0.077,7,0.374,10,0.455,11,0.008,13,0.976,15,0.523,17,0.136,20,0.099,21,0.006,22,0.006,29,1.462,30,1.895,34,1.526,38,1.431,39,0.808,40,1.029,48,1.135,137,3.009,144,2.91,191,1.064,267,2.195,286,3.117,425,1.818,546,5.353,550,3.234,552,5.864,553,5.084,554,6.411,555,4.65,556,5.743,557,6.411,558,6.953,559,7.242,560,5.743,561,4.65,562,4.65,563,3.668,564,5.743,565,5.743]],["title/injectables/ConversationsRepository.html",[200,0.763,546,2.741]],["body/injectables/ConversationsRepository.html",[0,0.135,3,0.035,4,0.035,5,0.027,7,0.133,10,0.446,11,0.008,12,0.988,15,0.513,17,0.103,20,0.035,21,0.003,22,0.003,29,0.681,30,2.052,34,0.896,38,1.402,39,0.871,40,1.008,48,1.36,60,0.339,62,1.301,64,1.147,68,0.834,72,0.659,74,1.01,81,1.842,83,2.018,108,2.691,141,0.659,144,1.032,162,3.205,166,2.024,191,1.428,200,0.573,202,0.659,221,2.251,267,1.65,301,1.368,328,2.527,330,1.47,331,2.195,346,2.635,351,1.935,356,1.366,357,2.059,358,5.192,365,2.316,369,2.316,370,0.888,389,0.94,390,0.759,412,3.064,422,1.243,425,0.644,432,4.452,433,3.73,434,3.73,435,3.73,436,3.73,437,3.366,438,3.554,489,1.649,490,1.067,495,2.54,512,6.201,513,4.031,516,3.78,531,1.649,546,2.059,566,1.803,567,2.731,568,2.731,569,2.985,570,2.731,571,2.985,572,3.495,573,2.036,574,2.036,575,3.372,576,2.731,577,2.036,578,1.649,579,3.495,580,2.036,581,2.731,582,2.036,583,1.649,584,2.731,585,2.567,586,2.036,587,2.731,588,2.036,589,2.985,590,2.036,591,3.372,592,2.036,593,2.985,594,2.036,595,1.649,596,2.036,597,2.036,598,2.036,599,2.036,600,5.56,601,1.803,602,1.803,603,1.803,604,3.372,605,4.063,606,3.372,607,3.372,608,2.54,609,3.251,610,4.514,611,2.731,612,2.527,613,4.315,614,2.036,615,1.649,616,3.372,617,3.372,618,2.036,619,3.372,620,2.985,621,2.985,622,2.036,623,2.985,624,1.803,625,2.036,626,2.036,627,3.372,628,2.036,629,3.372,630,2.036,631,1.803,632,2.036,633,2.036,634,2.036]],["title/classes/ConversationsResolver.html",[0,0.298,548,3.382]],["body/classes/ConversationsResolver.html",[0,0.165,2,0.292,3,0.043,4,0.043,5,0.034,7,0.162,10,0.525,11,0.008,12,0.989,13,1.219,15,0.534,17,0.119,19,0.397,20,0.043,21,0.003,22,0.003,29,0.802,30,2.087,34,1.056,38,1.417,39,1.004,40,1.019,48,1.417,59,1.087,60,0.414,68,1.377,72,1.287,74,0.379,75,3.479,81,0.826,108,2.399,144,1.263,154,1.087,156,1.592,158,2.902,159,1.118,160,1.522,191,1.329,214,1.306,221,1.203,264,2.902,265,2.154,267,2.64,280,4.438,281,3.311,282,2.157,283,2.284,330,2.161,346,3.772,351,3.097,356,1.672,357,3.772,425,1.258,445,1.765,448,3.619,452,3.453,454,2.791,455,1.522,456,1.46,457,1.46,458,2.815,460,1.46,465,2.666,495,3.734,497,4.019,512,5.709,513,4.438,548,2.994,567,5.002,568,5.002,570,5.002,572,5.002,576,2.018,578,2.018,579,4.579,581,2.018,583,4.013,584,2.018,585,2.852,587,2.018,595,2.018,635,2.206,636,6.907,637,2.492,638,4.26,639,2.492,640,3.974,641,2.492,642,2.492,643,5.655,644,2.492,645,2.492,646,2.492,647,2.206,648,2.492,649,2.492,650,2.492,651,2.492,652,1.46,653,2.492,654,2.492,655,2.492,656,2.492,657,2.492,658,2.492,659,2.492,660,2.492,661,2.492,662,2.492,663,2.492]],["title/injectables/ConversationsService.html",[200,0.763,497,2.741]],["body/injectables/ConversationsService.html",[0,0.207,3,0.054,4,0.054,5,0.042,7,0.203,10,0.507,11,0.008,12,1.02,15,0.593,17,0.118,20,0.054,21,0.004,22,0.004,29,0.956,30,2.186,34,1.258,38,1.621,39,0.915,40,1.166,48,1.595,60,0.519,68,0.519,72,1.533,137,1.636,144,1.582,185,1.034,191,1.521,200,0.805,202,1.011,221,2.341,267,2.762,328,4.231,330,1.361,346,2.892,351,1.4,356,2.095,357,3.493,389,1.442,423,2.352,425,1.499,495,4.31,497,2.892,512,6.599,513,4.231,546,4.411,550,3.865,555,2.528,563,1.994,567,3.835,568,3.835,569,4.193,570,3.835,571,4.193,572,3.835,576,2.528,578,3.835,579,4.633,581,3.835,583,4.633,584,3.835,585,2.948,587,3.835,589,4.193,593,4.193,595,3.835,612,1.829,647,4.193,664,2.764,665,4.736,666,5.721,667,3.122,668,3.122,669,3.122,670,3.122,671,3.122,672,3.122,673,3.122,674,3.122,675,3.122,676,3.122,677,4.736,678,3.122,679,2.528,680,3.122,681,3.122,682,3.122,683,3.122,684,2.528,685,2.528,686,3.122,687,3.122,688,3.122,689,3.122,690,3.122,691,3.122,692,3.122,693,3.122]],["title/classes/Create.html",[0,0.298,694,2.867]],["body/classes/Create.html",[0,0.542,2,0.577,3,0.084,4,0.084,5,0.088,7,0.321,8,1.379,10,0.494,11,0.008,12,1.02,13,1.335,14,1.977,15,0.567,17,0.112,19,0.783,20,0.144,21,0.006,22,0.006,39,0.821,101,2.087,159,2.206,287,3.124,301,1.686,334,3.503,348,2.918,349,2.785,355,1.929,490,2.578,585,2.271,694,4.184,695,3.3,696,4.92,697,4.92,698,4.92,699,4.92,700,4,701,4.184,702,2.67,703,3.004,704,3.142,705,3.3,706,3.142,707,3.142]],["title/classes/CreateConversation.html",[0,0.298,357,2.741]],["body/classes/CreateConversation.html",[0,0.536,2,0.622,3,0.091,4,0.091,5,0.071,7,0.346,8,1.45,10,0.433,11,0.008,12,0.902,13,1.17,14,1.739,15,0.497,17,0.139,18,2.131,19,0.844,20,0.144,21,0.006,22,0.006,39,0.902,40,0.978,74,0.807,108,2.251,144,2.689,150,1.38,331,1.537,346,3.24,347,3.998,348,2.652,349,2.679,350,3.737,351,3.088,352,1.988,353,3.088,354,1.885,355,2.08,356,4.618,357,4.204,358,4.666,359,4.618,360,3.759,361,1.931,362,2.45,371,2.08,708,5.307,709,5.307,710,5.307]],["title/classes/CreateInput.html",[0,0.298,273,2.741]],["body/classes/CreateInput.html",[0,0.442,2,0.593,3,0.087,4,0.087,5,0.068,7,0.329,8,1.404,10,0.499,11,0.008,12,0.99,13,1.349,14,1.774,15,0.573,17,0.128,19,0.804,20,0.087,21,0.006,22,0.006,68,1.409,265,2.204,273,4.072,287,3.166,291,4.558,292,4.558,334,3.551,348,2.314,349,2.209,354,1.796,371,1.982,711,4.475,712,5.055,713,5.055,714,4.475,715,5.055,716,5.622,717,5.055,718,4.475,719,4.475,720,5.055,721,5.401,722,4.648,723,4.308,724,4.093,725,5.055,726,5.401,727,4.093]],["title/classes/CreatePost.html",[0,0.298,728,2.353]],["body/classes/CreatePost.html",[0,0.571,2,0.548,3,0.08,4,0.08,5,0.063,11,0.008,12,0.924,14,1.728,17,0.138,18,1.958,19,0.743,20,0.148,21,0.006,22,0.006,68,1.052,74,1.17,83,1.879,149,2.545,185,2.095,265,2,331,2.227,348,2.939,349,2.974,350,2.535,352,1.866,353,2.837,354,1.659,355,1.831,361,2.924,367,2.996,728,3.315,729,2.852,730,3.205,731,2.535,732,2.535,733,2.983,734,2.63,735,2.735,736,4.04,737,3.562,738,3.009,739,2.983,740,2.735,741,2.983,742,2.735,743,2.983,744,2.447,745,4.582,746,2.535,747,2.735,748,2.447,749,2.852]],["title/classes/CreateRequest.html",[0,0.298,750,3.012]],["body/classes/CreateRequest.html",[0,0.536,2,0.557,3,0.082,4,0.082,5,0.064,7,0.309,8,1.347,10,0.402,11,0.008,12,0.928,13,1.087,14,1.86,15,0.462,17,0.11,19,0.755,20,0.139,21,0.006,22,0.006,40,1.028,59,2.07,68,1.203,234,3.362,265,2.013,283,1.647,301,1.666,348,2.804,349,2.676,353,3.471,354,1.687,355,1.861,361,1.728,362,2.192,371,1.861,652,4.874,722,3.745,723,4.385,750,4.29,751,3.362,752,4.359,753,4.359,754,4.747,755,4.747,756,4.203,757,4.747,758,3.184,759,5.831,760,4.53,761,3.362,762,3.184,763,4.29,764,3.184,765,3.184,766,3.184,767,3.184,768,3.576]],["title/classes/Current.html",[0,0.298,448,2.353]],["body/classes/Current.html",[0,0.499,2,0.716,3,0.105,4,0.105,5,0.082,10,0.384,11,0.008,12,0.975,14,1.83,17,0.129,18,2.524,19,0.972,20,0.129,21,0.007,22,0.007,39,0.839,283,2.611,287,2.59,301,1.681,320,4.096,336,4.945,361,2.222,448,3.943,736,3.439,758,4.096,769,4.6,770,5.406,771,5.668,772,5.406,773,5.406]],["title/classes/DeletePost.html",[0,0.298,744,2.353]],["body/classes/DeletePost.html",[0,0.571,2,0.548,3,0.08,4,0.08,5,0.063,11,0.008,12,0.924,14,1.728,17,0.138,18,1.958,19,0.743,20,0.148,21,0.006,22,0.006,68,1.052,74,1.17,83,1.879,149,2.545,185,2.095,265,2,331,2.227,348,2.939,349,2.974,350,2.535,352,1.866,353,2.837,354,1.659,355,1.831,361,2.924,367,2.996,728,2.447,729,2.852,730,3.205,731,2.535,732,2.535,733,2.983,734,2.63,735,2.735,736,4.04,737,3.562,738,3.009,739,2.983,740,2.735,741,2.983,742,2.735,743,2.983,744,3.315,745,4.582,746,2.535,747,2.735,748,2.447,749,2.852]],["title/classes/DeleteResult.html",[0,0.298,774,2.867]],["body/classes/DeleteResult.html",[0,0.417,2,0.739,3,0.108,4,0.108,5,0.085,7,0.41,8,1.614,10,0.482,11,0.008,13,1.303,14,1.896,15,0.554,17,0.108,18,2.373,19,1.002,20,0.108,21,0.007,22,0.007,652,4.49,738,3.647,774,4.897,775,5.574,776,8.266,777,8.266,778,6.296,779,6.296]],["title/classes/File.html",[0,0.298,5,0.06]],["body/classes/File.html",[0,0.369,2,0.653,3,0.096,4,0.096,5,0.105,7,0.363,8,1.495,10,0.518,11,0.008,12,0.998,13,1.4,14,1.829,15,0.595,17,0.096,18,2.198,19,0.886,20,0.096,21,0.006,22,0.006,68,1.488,265,2.142,780,4.93,781,5.891,782,6.332,783,5.891,784,4.244,785,6.204,786,5.569,787,5.569,788,5.569,789,5.569]],["title/classes/FileInfo.html",[0,0.298,790,3.012]],["body/classes/FileInfo.html",[0,0.486,2,0.489,3,0.072,4,0.072,5,0.056,7,0.272,8,1.232,10,0.549,11,0.008,12,1.017,13,0.995,14,1.894,15,0.423,17,0.126,18,2.388,19,0.664,20,0.137,21,0.005,22,0.005,68,1.33,74,0.89,141,1.35,150,1.085,185,2.65,265,2.081,301,1.51,331,1.695,351,2.624,352,1.522,361,1.518,365,3.12,369,1.925,370,2.551,371,2.294,386,4.192,387,2.783,388,2.185,390,2.182,392,2.263,393,2.263,394,4.345,534,2.663,732,2.263,784,3.668,790,4.915,791,2.663,792,4.17,793,4.17,794,2.442,795,2.797,796,3.031,797,3.142,798,2.442,799,3.925,800,3.142,801,2.546,802,2.954,803,2.954,804,2.663,805,2.954]],["title/classes/Friend.html",[0,0.298,490,2.353]],["body/classes/Friend.html",[0,0.551,2,0.607,3,0.089,4,0.089,5,0.091,7,0.337,8,1.425,10,0.425,11,0.008,12,1.017,13,1.151,14,1.972,15,0.489,17,0.116,19,0.823,20,0.146,21,0.006,22,0.006,39,0.577,101,3.201,159,2.319,287,2.193,301,1.556,334,2.46,348,2.959,349,2.825,355,2.027,490,3.547,585,3.485,694,3.303,695,3.469,700,4.134,701,4.324,702,2.806,703,3.157,704,3.303,705,3.469,706,3.303,707,3.303,806,5.171,807,5.171]],["title/classes/FriendProfile.html",[0,0.298,808,2.867]],["body/classes/FriendProfile.html",[0,0.394,2,0.697,3,0.102,4,0.102,5,0.08,7,0.387,8,1.558,10,0.465,11,0.008,12,0.899,13,1.011,14,1.591,15,0.43,17,0.138,18,2.29,19,0.946,20,0.138,21,0.006,22,0.006,68,1.231,74,0.905,141,1.925,265,1.925,386,3.878,387,3.52,388,3.115,390,2.76,392,3.227,585,3.72,808,5.147,809,4.479,810,5.263,811,5.945,812,5.263,813,4.814,814,5.263]],["title/modules/FriendsModule.html",[109,1.453,118,3.012]],["body/modules/FriendsModule.html",[0,0.399,3,0.103,4,0.103,5,0.081,11,0.008,17,0.139,20,0.103,21,0.006,22,0.006,60,1,109,2.414,111,2.698,112,3.442,118,6.094,123,4.648,128,3.658,129,2.952,130,2.952,132,3.906,145,3.842,150,1.565,248,3.546,808,4.761,815,5.326,816,6.016,817,5.326,818,5.95,819,6.016,820,5.616]],["title/classes/FriendsProfile.html",[0,0.298,821,3.012]],["body/classes/FriendsProfile.html",[0,0.445,2,0.788,3,0.115,4,0.115,5,0.09,11,0.008,17,0.137,18,2.63,19,1.068,20,0.115,21,0.007,22,0.007,74,1.022,150,1.746,350,3.644,352,1.746,361,2.443,821,5.345,822,5.944,823,6.714,824,4.755]],["title/classes/FriendsResolver.html",[0,0.298,820,3.382]],["body/classes/FriendsResolver.html",[0,0.349,2,0.618,3,0.09,4,0.09,5,0.071,7,0.343,10,0.431,11,0.008,13,0.895,15,0.495,17,0.147,19,0.838,20,0.09,21,0.006,22,0.006,29,1.382,30,1.819,34,1.399,38,1.353,39,0.764,40,0.973,48,1.04,60,0.876,68,1.139,74,0.801,75,3.857,145,3.363,154,2.296,191,0.976,214,2.759,221,2.073,265,1.782,282,3.718,283,2.377,286,2.857,301,1.085,425,1.666,448,4.225,452,3.215,454,3.857,455,3.215,456,3.083,457,3.083,460,3.083,818,5.749,820,5.16,821,4.595,825,4.661,826,6.166,827,5.265,828,5.265,829,5.265,830,5.265,831,5.265,832,5.265]],["title/injectables/FriendsService.html",[200,0.763,818,3.012]],["body/injectables/FriendsService.html",[0,0.386,3,0.1,4,0.1,5,0.078,7,0.38,10,0.459,11,0.008,12,0.89,15,0.528,17,0.137,20,0.1,21,0.006,22,0.006,29,1.475,30,1.908,34,1.548,38,1.444,39,0.815,40,1.038,48,1.151,60,0.969,145,3.721,150,1.515,191,1.08,200,1.242,202,1.886,221,2.212,286,3.162,301,1.201,425,1.844,818,4.902,821,3.908,826,5.917,833,5.157,834,5.157,835,5.153,836,5.825,837,6.469,838,5.825,839,5.825]],["title/classes/GetPost.html",[0,0.298,746,2.437]],["body/classes/GetPost.html",[0,0.571,2,0.548,3,0.08,4,0.08,5,0.063,11,0.008,12,0.924,14,1.728,17,0.138,18,1.958,19,0.743,20,0.148,21,0.006,22,0.006,68,1.052,74,1.17,83,1.879,149,2.545,185,2.095,265,2,331,2.227,348,2.939,349,2.974,350,2.535,352,1.866,353,2.837,354,1.659,355,1.831,361,2.924,367,2.996,728,2.447,729,2.852,730,3.205,731,2.535,732,2.535,733,2.983,734,2.63,735,2.735,736,4.04,737,3.562,738,3.009,739,2.983,740,2.735,741,2.983,742,2.735,743,2.983,744,2.447,745,4.582,746,3.433,747,2.735,748,2.447,749,2.852]],["title/classes/GetPosts.html",[0,0.298,748,2.353]],["body/classes/GetPosts.html",[0,0.566,2,0.527,3,0.077,4,0.077,5,0.06,7,0.293,8,1.297,10,0.282,11,0.008,12,0.935,13,0.764,14,1.705,15,0.325,17,0.136,18,1.907,19,0.715,20,0.147,21,0.005,22,0.005,68,1.169,74,1.151,83,1.808,84,3.183,149,2.479,185,2.041,265,2.062,331,2.372,348,2.91,349,2.955,350,2.439,352,1.829,353,2.764,354,1.597,355,1.762,361,2.885,367,2.956,728,2.355,729,2.744,730,3.123,731,2.439,732,2.439,733,2.87,734,2.531,735,2.632,736,3.96,737,3.47,738,2.931,739,2.87,740,2.632,741,2.87,742,2.632,743,2.87,744,2.355,745,4.491,746,2.439,747,2.632,748,3.229,749,3.763,840,4.494,841,4.494]],["title/classes/GraphQLException.html",[0,0.298,842,3.18]],["body/classes/GraphQLException.html",[0,0.416,2,0.736,3,0.108,4,0.108,5,0.084,10,0.394,11,0.008,12,0.921,15,0.454,17,0.108,20,0.108,21,0.007,22,0.007,34,1.668,38,1.24,39,0.7,40,0.892,60,1.044,361,2.785,796,2.815,842,5.42,843,5.557,844,8.255,845,7.652,846,8.594,847,7.608,848,6.277,849,6.277]],["title/classes/GraphQLExceptionFilter.html",[0,0.298,850,3.636]],["body/classes/GraphQLExceptionFilter.html",[0,0.405,2,0.716,3,0.105,4,0.105,5,0.082,7,0.398,10,0.384,11,0.008,15,0.441,17,0.129,20,0.105,21,0.007,22,0.007,25,3.813,29,1.519,38,1.207,39,0.681,40,0.868,48,1.207,60,1.016,166,2.222,191,1.132,239,5.777,361,2.738,842,6.306,850,6.093,851,5.406,852,6.144,853,6.093,854,6.106,855,4.945,856,6.106,857,6.106,858,6.106,859,6.106]],["title/injectables/HomeMiddleware.html",[200,0.763,860,3.636]],["body/injectables/HomeMiddleware.html",[0,0.398,3,0.103,4,0.103,5,0.081,7,0.391,10,0.377,11,0.008,15,0.433,17,0.128,20,0.103,21,0.006,22,0.006,25,3.039,29,1.502,38,1.185,39,0.669,40,0.852,48,1.185,60,0.997,192,5.31,198,7.162,200,1.265,202,1.942,207,4.519,225,6.373,860,6.026,861,5.31,862,7.441,863,7.441,864,4.764,865,8.459,866,8.459,867,5.998,868,7.441,869,5.31]],["title/classes/InfoRequest.html",[0,0.298,762,3.012]],["body/classes/InfoRequest.html",[0,0.534,2,0.552,3,0.081,4,0.081,5,0.063,7,0.306,8,1.338,10,0.399,11,0.008,12,0.926,13,1.08,14,1.856,15,0.459,17,0.109,19,0.748,20,0.138,21,0.006,22,0.006,40,1.144,59,2.05,68,1.197,234,3.331,265,2.095,283,1.632,301,1.66,348,2.795,349,2.668,353,3.458,354,1.671,355,1.844,361,1.712,362,2.171,371,2.492,652,4.861,722,3.722,723,4.371,750,3.155,751,3.331,752,4.342,753,4.342,756,5.627,758,3.155,759,5.809,760,4.502,761,3.331,762,4.263,763,4.263,764,3.155,765,3.155,766,3.155,767,3.155,768,3.543,870,4.703,871,4.703]],["title/classes/InteractPost.html",[0,0.298,747,2.629]],["body/classes/InteractPost.html",[0,0.571,2,0.548,3,0.08,4,0.08,5,0.063,11,0.008,12,0.924,14,1.728,17,0.138,18,1.958,19,0.743,20,0.148,21,0.006,22,0.006,68,1.052,74,1.17,83,1.879,149,2.545,185,2.095,265,2,331,2.227,348,2.939,349,2.974,350,2.535,352,1.866,353,2.837,354,1.659,355,1.831,361,2.924,367,2.996,728,2.447,729,2.852,730,3.205,731,2.535,732,2.535,733,2.983,734,2.63,735,2.735,736,4.04,737,3.562,738,3.009,739,2.983,740,2.735,741,2.983,742,2.735,743,2.983,744,2.447,745,4.582,746,2.535,747,3.704,748,2.447,749,2.852]],["title/classes/IsNonceConstraint.html",[0,0.298,872,3.636]],["body/classes/IsNonceConstraint.html",[0,0.491,2,0.697,3,0.102,4,0.102,5,0.08,7,0.387,10,0.374,11,0.008,12,0.967,15,0.535,17,0.102,20,0.102,21,0.006,22,0.006,25,3.75,29,1.494,30,1.421,38,1.175,39,0.663,40,0.845,48,1.462,68,1.231,191,1.372,293,4.479,301,1.226,354,2.112,652,3.482,872,5.993,873,5.263,874,7.134,875,7.466,876,6.552,877,5.945,878,7.401,879,5.945,880,6.552,881,5.263]],["title/classes/IsObjectIdConstraint.html",[0,0.298,882,3.636]],["body/classes/IsObjectIdConstraint.html",[0,0.487,2,0.689,3,0.101,4,0.101,5,0.079,7,0.383,10,0.369,11,0.008,12,0.964,15,0.531,17,0.126,20,0.101,21,0.006,22,0.006,25,3.723,29,1.483,30,1.404,38,1.161,39,0.655,40,0.835,48,1.452,68,0.977,191,1.362,301,1.211,354,2.088,370,2.562,390,2.191,874,7.096,875,7.435,876,6.504,880,6.504,881,5.202,882,5.949,883,5.202,884,5.876,885,7.347,886,5.876,887,5.876,888,5.876]],["title/classes/Like.html",[0,0.373]],["body/classes/Like.html",[0,0.28,2,0.495,3,0.073,4,0.073,5,0.057,7,0.275,8,1.243,10,0.559,11,0.008,12,0.938,13,1.365,14,1.773,15,0.58,17,0.138,18,1.827,19,0.672,20,0.127,21,0.005,22,0.005,40,0.839,68,1.289,74,0.642,141,1.367,149,1.698,150,1.098,301,1.217,331,1.971,352,2.089,365,3.708,366,4.154,367,2.995,369,3.401,370,2.966,371,2.667,373,6.211,375,3.419,376,3.738,378,4.779,379,4.446,380,5.225,382,4.779,386,3.86,387,2.808,388,2.213,389,1.949,390,1.575,393,2.292,394,3.324,612,3.456,794,2.473,889,3.181,890,4.222,891,4.222,892,4.222,893,4.222,894,4.222,895,4.222,896,3.419,897,5.225,898,3.419,899,3.738,900,3.181,901,3.738,902,4.222,903,2.991]],["title/modules/LikesModule.html",[109,1.453,119,3.18]],["body/modules/LikesModule.html",[0,0.362,3,0.094,4,0.094,5,0.073,11,0.008,17,0.145,20,0.094,21,0.006,22,0.006,39,0.609,60,0.909,109,2.271,111,2.45,112,3.239,119,6.431,122,5.806,123,4.535,128,3.443,129,2.681,130,2.681,132,3.676,140,3.2,141,1.769,146,3.87,149,2.198,150,1.421,191,1.013,248,3.338,404,3.336,406,3.2,900,5.286,904,4.837,905,5.464,906,4.837,907,5.806,908,5.464,909,4.97,910,5.286,911,5.464]],["title/classes/LikesRepository.html",[0,0.298,909,3.18]],["body/classes/LikesRepository.html",[0,0.315,2,0.558,3,0.082,4,0.082,5,0.064,7,0.31,10,0.455,11,0.008,12,0.929,15,0.523,17,0.143,20,0.082,21,0.006,22,0.006,29,1.293,30,1.99,34,1.264,38,1.431,39,0.808,40,1.029,48,1.266,72,1.54,74,0.724,81,1.576,101,2.717,141,1.54,146,3.37,149,1.914,150,1.237,166,1.732,191,1.187,221,2.345,283,2.223,352,2.214,367,3.333,389,2.197,390,1.774,412,4.73,416,5.837,422,2.905,425,1.506,427,4.212,774,3.039,897,5.671,898,3.853,909,4.537,912,4.212,913,5.187,914,5.187,915,4.758,916,4.758,917,6.406,918,5.671,919,4.758,920,5.671,921,4.758,922,4.758,923,4.758,924,4.758,925,4.758,926,4.758]],["title/classes/LikesResolver.html",[0,0.298,910,3.382]],["body/classes/LikesResolver.html",[0,0.223,2,0.395,3,0.058,4,0.058,5,0.045,7,0.219,10,0.484,11,0.008,12,0.943,13,1.018,15,0.479,17,0.141,19,0.536,20,0.058,21,0.004,22,0.004,29,1.011,30,1.931,34,1.331,38,1.31,39,0.953,40,0.942,48,1.183,59,1.468,60,0.56,68,0.833,72,1.938,74,1.009,81,2.197,146,2.384,149,1.354,150,0.876,151,2.536,154,1.468,156,2.15,158,3.506,159,1.51,160,2.055,185,2.197,191,1.109,207,2.536,214,1.764,221,1.517,264,2.935,265,1.933,267,1.916,280,3.883,281,3.506,282,2.72,283,2.579,331,1.452,352,0.876,367,3.304,425,1.895,445,2.384,448,4.311,454,3.734,455,2.055,456,1.971,457,1.971,458,3.549,459,2.258,460,1.971,461,2.726,638,4.996,738,1.601,907,4.986,910,3.775,913,5.741,914,5.741,918,2.98,927,2.98,928,7.698,929,3.366,930,4.508,931,3.366,932,3.366,933,3.366,934,3.366,935,3.366,936,3.366,937,5.011,938,3.366,939,6.631,940,4.436,941,5.011,942,3.366,943,3.366,944,3.366,945,3.366,946,3.366]],["title/injectables/LikesService.html",[200,0.763,907,3.012]],["body/injectables/LikesService.html",[0,0.311,3,0.081,4,0.081,5,0.063,7,0.306,10,0.452,11,0.008,12,1.002,15,0.52,17,0.132,20,0.081,21,0.006,22,0.006,29,1.281,30,1.982,34,1.686,38,1.421,39,0.802,40,1.022,48,1.254,60,0.78,72,2.328,74,0.714,81,1.554,83,1.887,101,3.05,146,3.323,149,1.887,150,1.22,191,1.333,200,1.079,202,1.519,267,2.426,283,2.202,301,0.967,331,1.359,367,2.681,416,6.498,425,2.276,442,4.297,464,3.147,907,4.257,909,5.875,913,5.139,914,5.139,920,5.618,930,4.966,940,4.154,947,4.154,948,4.692,949,4.692,950,6.346,951,4.692,952,4.692,953,4.692,954,4.692,955,4.692]],["title/classes/ListFriendNotInConversation.html",[0,0.298,360,3.18]],["body/classes/ListFriendNotInConversation.html",[0,0.543,2,0.643,3,0.094,4,0.094,5,0.074,7,0.357,8,1.48,10,0.344,11,0.008,12,0.865,13,0.931,14,1.76,15,0.396,17,0.141,18,2.175,19,0.872,20,0.145,21,0.006,22,0.006,39,0.784,74,0.834,108,3.291,144,2.776,150,1.425,331,1.587,346,3.345,347,4.127,348,2.693,349,2.711,350,3.814,351,3.152,352,2.129,353,3.152,354,1.947,355,2.148,356,4.715,357,3.345,358,3.345,359,3.675,360,4.978,361,1.994,362,2.529,371,2.148,956,5.479]],["title/classes/LoginInput.html",[0,0.298,263,3.382]],["body/classes/LoginInput.html",[0,0.474,2,0.661,3,0.097,4,0.097,5,0.076,7,0.367,8,1.506,10,0.494,11,0.008,12,1.01,13,1.336,14,1.778,15,0.568,17,0.123,19,0.896,20,0.097,21,0.006,22,0.006,263,5.388,291,4.799,292,4.799,293,5.921,348,2.482,349,2.369,354,2.001,714,4.985,718,4.985,719,4.985,722,4.843,723,4.266,724,4.56,726,5.792,727,4.56,957,4.985,958,5.631,959,5.631,960,5.631,961,5.631]],["title/classes/LoginResponse.html",[0,0.298,329,3.382]],["body/classes/LoginResponse.html",[0,0.408,2,0.723,3,0.106,4,0.106,5,0.083,7,0.402,8,1.593,10,0.476,11,0.008,12,0.844,13,1.286,14,1.836,15,0.547,17,0.13,18,2.342,19,0.981,20,0.106,21,0.007,22,0.007,154,2.687,283,3.041,328,4.431,329,5.7,337,5.493,371,2.416,962,5.455,963,6.162,964,6.162]],["title/classes/Message.html",[0,0.298,796,2.013]],["body/classes/Message.html",[0,0.454,2,0.422,3,0.062,4,0.062,5,0.048,7,0.235,8,1.109,10,0.556,11,0.008,12,1.02,13,1.337,14,1.843,15,0.568,17,0.118,18,2.256,19,0.573,20,0.131,21,0.005,22,0.005,40,0.748,68,1.39,74,0.801,141,1.165,150,0.936,185,2.671,265,2.229,301,1.412,331,1.984,351,3.072,352,1.369,361,1.31,365,3.365,369,1.662,370,2.714,371,3.083,386,3.99,387,2.505,388,1.886,390,1.964,392,1.954,393,1.954,394,4.632,487,2.915,534,3.976,732,1.954,784,1.954,790,4.595,791,2.299,794,2.108,795,2.415,796,3.415,797,3.967,798,3.646,799,3.532,800,2.712,801,2.198,802,2.55,803,2.55,804,2.299,805,2.55,965,3.6,966,5.511,967,3.6,968,3.6,969,3.187,970,3.6,971,3.6,972,3.6,973,3.6]],["title/classes/MessageOmit.html",[0,0.298,799,3.012]],["body/classes/MessageOmit.html",[0,0.496,2,0.514,3,0.075,4,0.075,5,0.059,10,0.523,11,0.008,12,1.014,14,1.91,17,0.129,18,2.431,19,0.697,20,0.139,21,0.005,22,0.005,68,1.351,74,0.921,141,1.417,150,1.139,185,2.691,265,2.113,301,1.542,331,1.753,351,2.714,352,1.574,361,1.593,365,3.202,369,2.021,370,2.638,386,4.256,387,2.879,388,2.294,390,2.257,392,2.376,393,2.376,394,4.423,534,2.796,732,2.376,784,2.376,790,4.653,791,2.796,794,2.564,795,2.936,796,3.111,797,3.298,798,2.564,799,4.653,800,3.298,801,2.673,802,3.101,803,3.101,804,2.796,805,3.101]],["title/classes/MessagesConversation.html",[0,0.298,801,2.741]],["body/classes/MessagesConversation.html",[0,0.486,2,0.489,3,0.072,4,0.072,5,0.056,7,0.272,8,1.232,10,0.536,11,0.008,12,1.012,13,0.995,14,1.894,15,0.423,17,0.126,18,2.388,19,0.664,20,0.137,21,0.005,22,0.005,68,1.33,74,0.89,141,1.35,150,1.085,185,2.65,265,2.081,301,1.51,331,2.122,351,2.624,352,1.522,361,1.518,365,3.12,369,1.925,370,2.551,371,2.294,386,4.192,387,2.783,388,2.185,390,2.182,392,2.263,393,2.263,394,4.345,534,2.663,732,2.263,784,2.263,790,4.534,791,2.663,794,2.442,795,2.797,796,3.031,797,3.142,798,2.442,799,3.925,800,3.142,801,3.572,802,4.787,803,4.144,804,2.663,805,2.954,974,4.17,975,4.17]],["title/injectables/MessagesGateway.html",[200,0.763,976,3.18]],["body/injectables/MessagesGateway.html",[0,0.148,3,0.038,4,0.038,5,0.049,7,0.145,8,0.764,10,0.393,11,0.008,12,0.248,13,1.169,15,0.514,17,0.113,20,0.038,21,0.003,22,0.003,28,3.394,29,0.732,30,2.015,34,0.964,35,1.359,36,3.165,38,1.359,39,0.767,40,0.977,41,2.125,42,2.804,45,4.212,47,5.149,48,1.303,54,4.392,55,1.422,56,1.359,57,1.304,58,1.304,59,0.971,60,0.37,61,1.208,62,1.422,64,1.254,65,1.304,66,1.359,67,1.304,68,0.37,69,1.803,70,1.803,72,1.175,74,1.355,81,2.573,85,4.771,88,2.938,91,2.938,108,1.948,144,1.128,150,0.579,191,0.851,200,0.617,202,0.721,221,1.603,330,3.722,351,3.084,352,1.194,358,4.198,425,0.705,497,4.027,507,3.081,509,1.494,518,4.689,519,4.689,521,4.689,524,4.689,526,3.213,527,3.213,529,4.066,531,2.938,532,4.066,533,3.213,534,3.383,535,1.971,537,6.474,538,3.213,539,3.213,540,3.213,541,1.971,796,1.627,798,2.69,976,2.57,977,1.971,978,3.629,979,3.629,980,3.629,981,4.593,982,4.066,983,3.629,984,3.629,985,2.227,986,2.227,987,3.629,988,2.227,989,2.227,990,3.629,991,2.227,992,2.227,993,3.629,994,2.227,995,2.227,996,3.629,997,2.227,998,1.971,999,3.629,1000,2.227,1001,2.227,1002,3.629,1003,2.227,1004,2.227,1005,3.629,1006,2.227,1007,2.227,1008,2.227,1009,2.227,1010,2.227,1011,3.629,1012,2.227,1013,1.803,1014,2.227,1015,3.629,1016,2.227,1017,2.227,1018,3.629,1019,2.227,1020,2.227,1021,5.296,1022,2.227,1023,1.971,1024,2.227,1025,2.227,1026,5.296,1027,2.227,1028,2.227,1029,2.227,1030,5.537,1031,2.227,1032,2.227,1033,2.227,1034,2.227,1035,2.227,1036,2.227,1037,3.629,1038,2.227,1039,2.227,1040,2.227,1041,2.227]],["title/modules/MessagesModule.html",[109,1.453,120,3.012]],["body/modules/MessagesModule.html",[0,0.341,3,0.088,4,0.088,5,0.069,11,0.008,17,0.146,20,0.088,21,0.006,22,0.006,39,0.752,60,0.856,109,2.184,111,2.307,112,3.115,117,4.309,120,6.113,126,5.199,128,3.311,129,2.524,130,2.524,132,3.536,136,3.644,137,2.696,140,3.013,141,1.666,144,2.607,147,3.451,153,3.286,191,0.954,248,3.21,404,3.141,406,3.013,506,4.526,549,3.876,550,2.897,796,3.026,804,4.309,976,6.032,1042,4.555,1043,5.145,1044,4.555,1045,5.712,1046,5.712,1047,5.145,1048,5.083,1049,5.145]],["title/injectables/MessagesRepository.html",[200,0.763,1045,3.012]],["body/injectables/MessagesRepository.html",[0,0.232,3,0.06,4,0.06,5,0.047,7,0.228,10,0.503,11,0.008,12,1.007,15,0.489,17,0.13,20,0.06,21,0.005,22,0.005,29,1.042,30,1.952,34,0.932,38,1.337,39,0.754,40,0.961,48,1.211,60,0.583,62,2.239,64,1.974,68,0.583,72,1.135,74,0.933,81,1.161,83,2.901,108,1.487,141,1.135,147,2.352,162,2.239,166,2.231,191,1.254,200,0.878,202,1.135,267,2.344,301,0.723,331,2.185,351,3.033,362,1.619,365,3.123,368,2.483,370,1.529,389,1.619,390,1.308,412,4.13,422,2.141,425,1.11,432,2.352,433,2.352,434,2.352,435,2.352,436,2.352,437,2.352,438,2.483,513,4.865,516,2.641,534,4.981,605,2.839,608,2.641,609,2.641,611,4.182,612,3.59,615,2.839,795,2.352,796,3.234,798,3.961,801,2.141,802,2.483,1045,3.464,1050,3.104,1051,4.182,1052,3.153,1053,4.182,1054,3.506,1055,3.506,1056,5.164,1057,4.572,1058,4.343,1059,3.506,1060,2.641,1061,4.572,1062,7.086,1063,5.669,1064,3.506,1065,5.164,1066,3.506,1067,3.506,1068,5.164,1069,5.164,1070,5.164,1071,3.506,1072,3.104,1073,3.506,1074,3.104,1075,3.104,1076,3.506,1077,3.104]],["title/classes/MessagesResolver.html",[0,0.298,1048,3.382]],["body/classes/MessagesResolver.html",[0,0.234,2,0.415,3,0.061,4,0.061,5,0.07,7,0.23,10,0.504,11,0.008,13,1.047,15,0.491,17,0.138,19,0.563,20,0.061,21,0.005,22,0.005,29,1.049,30,1.957,34,1.381,38,1.342,39,0.97,40,0.965,48,1.218,60,0.588,68,1.258,72,1.683,74,0.938,75,2.927,81,1.722,147,2.372,153,2.259,154,1.542,159,1.586,191,1.142,214,1.853,221,2.19,264,3.044,265,1.968,267,1.987,280,4.238,281,3.609,282,2.821,283,2.626,330,3.63,425,1.645,448,4.098,452,2.159,454,3.47,455,2.159,456,2.071,457,2.071,460,2.071,465,3.487,700,2.159,701,3.32,702,1.919,796,2.764,798,3.609,801,3.174,1046,5.076,1048,3.916,1051,5.86,1052,3.174,1053,5.86,1078,3.131,1079,6.162,1080,3.537,1081,4.775,1082,3.537,1083,3.537,1084,6.793,1085,3.537,1086,3.131,1087,6.014,1088,3.537,1089,3.537,1090,6.793,1091,3.537,1092,2.505,1093,3.537,1094,3.537,1095,4.602,1096,3.537,1097,5.198,1098,3.537,1099,3.537,1100,3.537,1101,3.537,1102,3.537,1103,3.131]],["title/injectables/MessagesService.html",[200,0.763,1046,3.012]],["body/injectables/MessagesService.html",[0,0.313,3,0.081,4,0.081,5,0.064,7,0.308,10,0.486,11,0.008,12,1.031,15,0.558,17,0.109,20,0.081,21,0.006,22,0.006,29,1.287,30,2.092,34,1.255,38,1.526,39,0.861,40,1.098,48,1.426,60,0.786,147,3.169,191,1.337,200,1.084,202,1.53,267,2.759,286,2.564,330,2.06,425,1.495,513,4.724,798,2.767,1045,5.576,1046,4.277,1051,5.163,1052,3.893,1053,5.163,1057,5.644,1058,5.472,1061,5.644,1062,7.649,1063,5.472,1086,5.644,1087,6.388,1092,3.347,1095,4.183,1103,4.183,1104,4.183,1105,4.725,1106,4.725,1107,4.725,1108,4.725,1109,4.725,1110,4.725,1111,4.725,1112,4.725,1113,4.725]],["title/classes/MongoExceptionFilter.html",[0,0.298,1114,3.636]],["body/classes/MongoExceptionFilter.html",[0,0.42,2,0.743,3,0.109,4,0.109,5,0.085,7,0.413,11,0.008,15,0.458,17,0.132,20,0.109,21,0.007,22,0.007,25,3.9,29,1.553,48,1.252,60,1.054,166,2.306,191,1.174,239,6.257,389,2.925,852,6.245,1114,6.232,1115,5.609,1116,6.336,1117,6.336,1118,7.696,1119,6.336,1120,6.336]],["title/classes/MongooseExceptionFilter.html",[0,0.298,276,3.18]],["body/classes/MongooseExceptionFilter.html",[0,0.394,2,0.697,3,0.102,4,0.102,5,0.08,7,0.387,10,0.374,11,0.008,15,0.43,17,0.127,20,0.102,21,0.006,22,0.006,25,3.75,29,1.494,38,1.175,39,0.663,40,0.845,48,1.175,60,0.989,64,3.348,74,0.905,166,2.693,191,1.372,239,5.973,276,5.242,362,2.745,852,6.071,853,5.993,855,4.814,1121,5.263,1122,5.945,1123,5.945,1124,5.945,1125,5.945,1126,5.945,1127,5.945,1128,5.945,1129,4.479,1130,5.945,1131,5.945,1132,4.814,1133,5.945,1134,5.945]],["title/injectables/NotificationsGateway.html",[200,0.763,1135,3.18]],["body/injectables/NotificationsGateway.html",[0,0.309,3,0.08,4,0.08,5,0.063,7,0.304,8,1.33,10,0.483,11,0.008,13,1.074,15,0.518,17,0.132,20,0.08,21,0.006,22,0.006,28,4.492,29,1.275,30,1.712,34,1.238,35,2.845,36,4.357,38,1.248,39,0.704,40,0.898,41,3.699,42,4.375,45,4.906,47,4.375,48,0.921,54,4.034,55,2.976,56,2.845,57,2.729,58,2.729,59,2.031,60,0.775,61,2.529,65,2.729,66,2.845,67,2.729,68,0.775,71,3.773,72,1.509,74,1.169,81,1.543,85,4.237,200,1.074,202,1.509,221,1.912,240,3.51,330,2.754,490,2.442,507,4.237,752,4.035,753,4.035,796,2.09,864,3.557,1023,4.125,1132,3.773,1135,4.474,1136,4.125,1137,7.165,1138,4.66,1139,4.66,1140,6.316,1141,4.66,1142,4.66,1143,4.66,1144,3.773,1145,3.773,1146,4.66,1147,4.66,1148,4.125,1149,6.316,1150,4.125,1151,4.66]],["title/modules/NotificationsModule.html",[109,1.453,121,3.18]],["body/modules/NotificationsModule.html",[0,0.41,3,0.106,4,0.106,5,0.083,11,0.008,17,0.13,20,0.106,21,0.007,22,0.007,60,1.028,109,2.454,111,2.772,112,3.5,121,6.468,128,3.72,129,3.033,130,3.033,148,5.472,248,3.606,1135,6.324,1152,5.472,1153,5.472,1154,6.324,1155,6.181,1156,5.711]],["title/classes/NotificationsResolver.html",[0,0.298,1156,3.382]],["body/classes/NotificationsResolver.html",[0,0.462,2,0.817,3,0.12,4,0.12,5,0.094,11,0.008,17,0.12,19,1.109,20,0.12,21,0.007,22,0.007,282,4.42,1156,6.136,1157,6.169]],["title/injectables/NotificationsService.html",[200,0.763,1154,3.18]],["body/injectables/NotificationsService.html",[0,0.462,3,0.12,4,0.12,5,0.094,11,0.008,17,0.12,20,0.12,21,0.007,22,0.007,60,1.159,200,1.384,202,2.256,1154,5.769,1158,6.169]],["title/classes/OAuthInfo.html",[0,0.298,771,3.382]],["body/classes/OAuthInfo.html",[0,0.468,2,0.646,3,0.095,4,0.095,5,0.074,7,0.359,8,1.485,10,0.516,11,0.008,12,0.996,13,1.322,14,1.865,15,0.562,17,0.121,18,2.408,19,0.877,20,0.121,21,0.006,22,0.006,39,0.915,283,2.447,287,2.337,301,1.748,320,3.695,336,6.3,361,2.005,448,2.886,736,3.972,758,3.695,769,4.15,770,4.877,771,5.861,772,6.887,773,4.877,1159,5.509,1160,5.509,1161,5.509,1162,5.509]],["title/classes/OAuthInput.html",[0,0.298,269,2.867]],["body/classes/OAuthInput.html",[0,0.427,2,0.563,3,0.082,4,0.082,5,0.065,7,0.313,8,1.357,10,0.51,11,0.008,12,1.022,13,1.379,14,1.796,15,0.586,17,0.111,19,0.764,20,0.082,21,0.006,22,0.006,39,0.811,68,1.476,265,2.309,269,4.117,287,3.086,293,5.482,301,1.5,334,3.461,348,2.237,349,2.135,354,1.707,721,5.22,722,4.891,723,4.533,1163,4.252,1164,4.803,1165,4.803,1166,7.276,1167,4.803,1168,4.803,1169,4.803,1170,4.803,1171,4.803]],["title/injectables/ObjectIdPipe.html",[200,0.763,1172,3.636]],["body/injectables/ObjectIdPipe.html",[0,0.399,3,0.103,4,0.103,5,0.081,7,0.392,10,0.378,11,0.008,12,0.903,15,0.435,17,0.128,20,0.103,21,0.006,22,0.006,25,3.048,29,1.505,38,1.189,39,0.671,40,0.855,48,1.189,60,1,74,0.915,166,2.713,191,1.115,200,1.267,202,1.948,241,3.842,278,4.261,370,3.692,389,2.777,1060,4.532,1172,6.037,1173,5.326,1174,6.037,1175,7.455,1176,6.016,1177,6.037,1178,7.455,1179,6.016,1180,6.016,1181,6.016]],["title/classes/Obtain.html",[0,0.298,706,2.867]],["body/classes/Obtain.html",[0,0.556,2,0.622,3,0.091,4,0.091,5,0.093,7,0.346,8,1.45,10,0.334,11,0.008,12,1.015,13,0.902,14,1.968,15,0.383,17,0.118,19,0.844,20,0.147,21,0.006,22,0.006,39,0.592,101,2.251,159,2.38,287,2.251,301,1.728,334,2.524,348,2.98,349,2.845,355,2.08,490,2.781,585,2.45,694,3.389,695,3.56,700,4.204,701,4.397,702,2.88,703,3.24,704,3.389,705,3.56,706,4.397,707,3.389,1182,5.307]],["title/classes/PaginationMessages.html",[0,0.298,1183,3.18]],["body/classes/PaginationMessages.html",[0,0.529,2,0.6,3,0.088,4,0.088,5,0.069,7,0.334,8,1.416,10,0.423,11,0.008,12,0.967,13,1.143,14,1.891,15,0.486,17,0.129,19,0.814,20,0.142,21,0.006,22,0.006,68,1.118,265,1.749,301,1.644,348,2.768,349,2.642,354,1.819,355,2.007,362,2.363,371,2.007,513,4.851,723,4.076,730,4.042,731,2.778,738,3.794,796,2.296,1052,3.125,1058,5.32,1063,4.763,1092,4.763,1183,4.763,1184,3.856,1185,5.119,1186,5.119,1187,5.119,1188,3.626]],["title/classes/Post.html",[0,0.298,367,1.674]],["body/classes/Post.html",[0,0.246,2,0.435,3,0.064,4,0.064,5,0.05,7,0.241,8,1.132,10,0.555,11,0.008,12,1.006,13,1.43,14,1.833,15,0.608,17,0.119,18,1.664,19,0.59,20,0.119,21,0.005,22,0.005,40,0.764,68,1.32,74,0.564,83,1.49,84,2.624,141,1.199,150,0.964,185,1.227,265,2,301,1.108,331,1.833,352,2.114,362,2.482,365,3.404,366,3.864,367,2.75,369,3.404,370,2.759,371,3.248,373,4.051,382,4.354,386,3.639,387,2.558,388,1.941,390,2.005,392,2.011,393,2.011,394,3.91,487,3,652,3.706,737,3.564,738,3.659,740,3.706,794,2.17,896,3,966,3.28,1189,2.791,1190,5.603,1191,5.603,1192,5.603,1193,3.705,1194,3.705,1195,3.705,1196,3.705,1197,3.705,1198,3.705,1199,3.705,1200,3.705,1201,3.705,1202,3.705,1203,3.705,1204,3,1205,2.791,1206,3.28]],["title/classes/PostDto.html",[0,0.298,735,2.629]],["body/classes/PostDto.html",[0,0.556,2,0.491,3,0.072,4,0.072,5,0.056,7,0.273,8,1.235,10,0.426,11,0.008,12,0.936,13,1.151,14,1.662,15,0.489,17,0.133,18,1.816,19,0.666,20,0.144,21,0.005,22,0.005,40,0.834,68,1.126,74,1.117,83,1.684,149,2.36,185,2.244,265,2.139,331,2.126,348,2.854,349,2.92,350,2.273,352,2.083,353,2.631,354,1.488,355,1.642,361,2.813,367,3.13,371,2.656,728,2.194,729,2.557,730,2.973,731,2.273,732,2.273,733,2.674,734,2.358,735,3.436,736,4.511,737,4.352,738,3.222,739,3.748,740,3.967,741,2.674,742,2.452,743,2.674,744,2.194,745,4.326,746,2.273,747,2.452,748,2.194,749,2.557,1207,4.188,1208,4.188,1209,4.188,1210,4.188]],["title/injectables/PostsGateway.html",[200,0.763,1211,3.18]],["body/injectables/PostsGateway.html",[0,0.295,3,0.076,4,0.076,5,0.06,7,0.29,8,1.29,10,0.497,11,0.008,13,1.041,15,0.506,17,0.14,20,0.076,21,0.005,22,0.005,28,4.432,29,1.236,30,1.673,34,1.627,35,2.72,36,4.289,38,1.21,39,0.683,40,0.87,41,3.587,42,4.274,45,4.815,47,4.274,48,0.88,54,3.912,55,2.845,56,2.72,57,2.609,58,2.609,59,1.942,60,0.741,61,2.418,63,3.944,64,2.509,65,2.609,66,2.72,67,2.609,68,0.741,69,3.607,70,3.607,72,1.983,74,1.203,83,1.792,149,1.792,200,1.041,202,1.442,221,1.854,330,2.67,352,1.159,367,2.284,378,3.607,425,1.41,507,4.109,509,2.988,824,4.338,930,4.899,982,6.197,998,3.944,1211,4.338,1212,3.944,1213,4.455,1214,5.423,1215,6.125,1216,4.455,1217,4.455,1218,3.944,1219,4.455,1220,4.455,1221,4.455,1222,3.944,1223,4.455,1224,6.125,1225,4.455,1226,4.455,1227,4.455,1228,4.455]],["title/modules/PostsModule.html",[109,1.453,122,3.012]],["body/modules/PostsModule.html",[0,0.355,3,0.092,4,0.092,5,0.072,11,0.008,17,0.139,20,0.092,21,0.006,22,0.006,39,0.596,60,0.889,109,2.24,111,2.399,112,3.195,122,6.111,123,4.51,128,3.396,129,2.624,130,2.624,132,3.626,140,3.132,141,1.732,149,2.151,191,0.991,248,3.292,249,4.225,367,1.995,404,3.266,406,3.132,930,5.367,1205,5.213,1211,6.096,1229,4.735,1230,5.349,1231,4.735,1232,4.735,1233,5.349,1234,5.349,1235,4.902,1236,5.213,1237,5.349]],["title/classes/PostsRepository.html",[0,0.298,1235,3.18]],["body/classes/PostsRepository.html",[0,0.15,2,0.265,3,0.039,4,0.039,5,0.03,7,0.147,10,0.369,11,0.008,12,0.595,15,0.424,17,0.108,20,0.039,21,0.003,22,0.003,29,0.74,30,1.831,34,0.599,38,1.16,39,0.655,40,0.835,48,1.055,62,1.441,64,1.271,68,0.977,72,0.73,74,0.812,81,1.215,83,2.362,101,1.556,108,1.556,141,0.73,149,0.908,150,0.587,162,3.409,166,1.687,185,1.215,191,1.088,221,2.092,301,1.473,330,2.021,331,2.127,352,1.858,365,1.693,366,3.842,367,2.473,369,1.693,370,0.984,389,1.042,390,0.841,412,3.259,422,1.378,423,1.7,425,0.714,432,4.636,433,4.221,434,3.109,435,3.109,436,3.109,437,3.581,438,3.781,516,1.7,601,4.103,602,6.119,603,4.726,605,1.827,608,1.7,609,1.7,610,5.207,611,2.97,612,2.714,620,1.998,621,1.998,623,3.247,631,1.998,728,1.922,734,1.271,737,2.066,740,3.126,744,1.922,746,1.991,748,1.922,1072,1.998,1074,1.998,1075,1.998,1190,4.103,1191,4.103,1192,6.502,1204,1.827,1235,2.598,1238,1.998,1239,2.256,1240,2.256,1241,3.668,1242,3.247,1243,3.753,1244,2.256,1245,2.97,1246,3.753,1247,2.256,1248,3.247,1249,4.103,1250,2.256,1251,3.247,1252,3.753,1253,2.256,1254,6.632,1255,2.256,1256,2.256,1257,5.872,1258,2.256,1259,2.256,1260,2.256,1261,2.256,1262,2.256,1263,4.635,1264,6.911,1265,4.635,1266,6.293,1267,4.635,1268,4.635,1269,3.668,1270,3.668,1271,4.635,1272,2.256,1273,2.256,1274,2.256,1275,4.635,1276,2.256,1277,2.256,1278,3.668,1279,2.256]],["title/classes/PostsResolver.html",[0,0.298,1236,3.382]],["body/classes/PostsResolver.html",[0,0.195,2,0.346,3,0.051,4,0.051,5,0.04,7,0.192,10,0.489,11,0.008,13,1.053,15,0.483,17,0.137,19,0.469,20,0.051,21,0.004,22,0.004,29,0.914,30,1.961,34,1.203,38,1.321,39,0.961,40,0.95,48,1.224,59,1.284,60,0.49,68,1.174,72,1.787,74,1.155,75,2.551,81,1.5,83,1.185,108,2.341,149,1.185,150,0.766,151,2.219,154,1.284,156,1.881,158,3.232,159,1.321,160,1.798,185,1.5,191,1.023,207,2.219,214,1.543,264,2.652,265,1.974,267,2.11,280,3.916,281,3.232,282,2.458,283,2.552,301,0.607,330,2.701,331,1.312,332,2.608,352,1.739,365,2.091,366,2.766,367,3.134,369,2.091,425,1.747,442,3.727,445,2.086,448,4.166,452,1.798,454,3.489,455,1.798,456,1.725,457,1.725,458,3.208,459,1.976,460,1.725,461,2.385,464,1.976,465,3.038,638,4.667,728,3.504,734,1.659,737,2.551,744,3.504,748,3.504,749,1.798,930,4.135,1218,6.251,1236,3.412,1243,5.017,1245,2.385,1246,5.017,1252,5.017,1257,2.608,1280,2.608,1281,2.945,1282,2.945,1283,2.945,1284,2.945,1285,2.945,1286,2.945,1287,2.945,1288,2.945,1289,6.195,1290,5.038,1291,2.945,1292,2.945,1293,2.945,1294,2.945,1295,4.529,1296,2.945,1297,5.519,1298,5.519,1299,2.945,1300,2.945,1301,2.945,1302,4.529,1303,2.945,1304,2.945]],["title/injectables/PostsService.html",[200,0.763,930,2.629]],["body/injectables/PostsService.html",[0,0.309,3,0.08,4,0.08,5,0.063,7,0.304,10,0.505,11,0.008,12,0.799,15,0.58,17,0.123,20,0.08,21,0.006,22,0.006,29,1.275,30,2.144,34,1.238,38,1.586,39,0.895,40,1.141,48,1.518,60,0.775,101,1.976,149,1.874,150,1.212,191,1.424,200,1.074,202,1.509,221,1.912,267,2.739,286,2.529,330,3.349,352,1.212,367,2.865,425,1.475,728,3.31,734,2.624,744,3.31,746,3.428,748,3.31,930,3.699,1235,5.863,1242,5.592,1243,5.802,1245,5.115,1246,5.802,1248,5.592,1249,6.343,1251,5.592,1252,5.802,1305,4.125,1306,4.66,1307,4.66,1308,4.66,1309,4.66,1310,4.66,1311,4.66,1312,4.66,1313,4.66,1314,4.66,1315,4.66]],["title/classes/Profile.html",[0,0.298,352,1.168]],["body/classes/Profile.html",[0,0.271,2,0.479,3,0.07,4,0.07,5,0.055,7,0.266,8,1.214,10,0.54,11,0.008,12,1.005,13,1.351,14,1.756,15,0.574,17,0.132,18,1.785,19,0.65,20,0.132,21,0.005,22,0.005,39,0.81,68,1.274,74,1.017,84,2.894,141,1.323,145,2.61,191,1.069,265,1.889,287,3.08,301,1.378,331,1.184,334,3.18,352,2.124,359,2.741,365,2.663,369,2.663,386,4.013,387,2.744,388,2.141,390,2.151,392,2.218,393,2.218,585,1.886,612,3.377,794,2.393,808,4.638,810,6.429,824,4.734,903,2.894,1060,5.036,1316,3.078,1317,5.918,1318,7.261,1319,5.767,1320,4.086,1321,4.086,1322,5.767,1323,4.086,1324,4.086,1325,4.086,1326,4.086,1327,5.106,1328,4.086,1329,3.309,1330,4.086,1331,5.036,1332,2.894,1333,3.618,1334,3.078,1335,3.618,1336,4.086]],["title/injectables/ProfilesGateway.html",[200,0.763,1337,3.18]],["body/injectables/ProfilesGateway.html",[0,0.264,3,0.069,4,0.069,5,0.054,7,0.26,8,1.194,10,0.452,11,0.008,13,1.121,15,0.519,17,0.13,20,0.069,21,0.005,22,0.005,28,4.28,29,1.144,30,1.884,34,1.507,35,2.436,36,4.119,38,1.304,39,0.801,40,0.937,41,3.321,42,4.028,45,5.181,47,4.815,48,1.12,54,4.213,55,2.548,56,2.436,57,2.336,58,2.336,59,1.739,60,0.663,61,2.165,65,2.336,66,2.436,67,2.336,68,0.663,72,1.836,74,1.2,81,2.185,85,4.819,101,3.047,150,1.038,200,0.964,202,1.292,221,2.175,301,1.169,330,3.309,352,1.038,425,1.263,442,4.111,464,2.676,507,4.425,509,2.676,585,3.317,752,3.715,753,4.046,1337,4.017,1338,3.532,1339,5.342,1340,6.597,1341,3.99,1342,3.532,1343,5.671,1344,3.99,1345,3.99,1346,5.671,1347,3.99,1348,3.99,1349,3.532,1350,3.532,1351,3.532,1352,3.99,1353,3.99,1354,3.532,1355,3.532,1356,3.99,1357,3.99]],["title/modules/ProfilesModule.html",[109,1.453,123,2.353]],["body/modules/ProfilesModule.html",[0,0.288,3,0.075,4,0.075,5,0.058,11,0.008,17,0.148,20,0.075,21,0.005,22,0.005,39,0.671,60,0.722,74,1.051,109,1.948,111,1.946,112,2.777,117,3.842,118,2.911,123,4.738,126,4.946,127,3.842,128,2.952,129,2.13,130,2.13,132,3.152,136,3.074,137,2.274,140,2.542,141,1.405,145,2.772,150,1.129,153,2.772,154,1.892,191,0.804,194,3.27,248,2.862,249,3.673,291,2.65,352,1.565,387,2.862,404,2.65,406,2.542,442,4.495,506,4.632,549,3.27,550,2.444,835,5.194,1334,4.532,1337,5.738,1354,3.842,1358,3.842,1359,4.34,1360,3.842,1361,3.842,1362,5.998,1363,4.34,1364,4.34,1365,4.871,1366,4.532,1367,3.842,1368,3.27,1369,4.34,1370,4.34,1371,3.842,1372,3.842,1373,4.34,1374,4.34]],["title/classes/ProfilesProcessor.html",[0,0.298,1366,3.382]],["body/classes/ProfilesProcessor.html",[0,0.338,2,0.597,3,0.087,4,0.087,5,0.068,7,0.332,10,0.471,11,0.008,13,1.139,15,0.541,17,0.129,20,0.087,21,0.006,22,0.006,29,1.353,30,2.029,34,1.353,38,1.48,39,0.835,40,1.065,48,1.324,74,1.02,101,2.16,137,2.669,150,1.325,191,1.242,267,2.562,286,2.764,301,1.382,425,1.612,550,2.868,554,5.934,557,5.934,558,7.197,561,4.124,562,4.124,563,3.253,585,3.094,784,2.764,834,4.509,835,4.973,1339,5.428,1366,5.049,1375,4.509,1376,5.093,1377,6.703,1378,6.703,1379,5.093,1380,6.703,1381,5.093,1382,5.093,1383,5.934,1384,4.509,1385,4.509]],["title/injectables/ProfilesRepository.html",[200,0.763,835,2.629]],["body/injectables/ProfilesRepository.html",[0,0.171,3,0.044,4,0.044,5,0.035,7,0.168,10,0.457,11,0.008,12,0.965,15,0.525,17,0.115,20,0.044,21,0.004,22,0.004,29,0.826,30,2.055,34,0.687,38,1.435,39,0.872,40,1.032,48,1.384,60,0.43,62,1.651,64,1.455,68,0.68,72,0.837,74,1.189,81,1.681,83,1.04,99,2.093,101,2.837,141,0.837,145,1.651,150,0.672,162,2.612,166,0.941,191,1.473,200,0.695,202,0.837,221,2.199,267,1.94,273,1.578,287,1.735,301,1.703,328,2.973,331,1.47,334,1.946,352,1.32,369,1.888,390,0.964,412,4.084,422,1.578,425,0.818,432,1.734,433,1.734,434,1.734,435,1.734,436,1.734,437,2.744,438,2.897,585,3.67,608,1.947,609,3.824,610,5.038,612,2.395,615,2.093,703,3.099,784,2.22,821,1.734,824,5.426,826,3.312,835,2.395,837,3.621,1030,3.621,1317,4.494,1329,2.093,1386,2.288,1387,3.621,1388,4.09,1389,3.312,1390,3.312,1391,3.312,1392,3.312,1393,2.585,1394,2.585,1395,4.09,1396,3.621,1397,2.585,1398,4.09,1399,5.076,1400,2.585,1401,2.585,1402,3.312,1403,2.585,1404,3.312,1405,4.111,1406,2.585,1407,2.093,1408,3.621,1409,2.585,1410,3.621,1411,2.585,1412,2.585,1413,2.585,1414,2.585,1415,2.585,1416,2.585,1417,2.585,1418,2.288,1419,2.585,1420,2.585,1421,2.585,1422,2.585,1423,2.585,1424,2.585,1425,2.585,1426,2.288,1427,4.09,1428,5.772,1429,5.772,1430,4.09,1431,4.09,1432,4.09,1433,4.09,1434,4.09,1435,4.09]],["title/classes/ProfilesResolver.html",[0,0.298,1362,3.18]],["body/classes/ProfilesResolver.html",[0,0.18,2,0.318,3,0.047,4,0.047,5,0.099,7,0.177,10,0.498,11,0.008,12,0.717,13,1.093,15,0.493,17,0.136,19,0.431,20,0.047,21,0.004,22,0.004,29,0.857,30,1.994,34,1.128,36,3.491,38,1.271,39,0.93,40,0.914,41,3.065,48,1.271,58,1.586,59,1.181,60,0.451,61,1.47,68,1.186,72,1.918,74,0.979,75,3.336,81,2.131,92,2.194,108,2.513,137,1.42,150,0.705,153,1.73,159,1.215,166,1.545,191,1.407,214,1.42,221,2.351,241,2.711,264,2.486,265,1.673,280,3.996,281,3.065,282,1.47,301,1.326,328,3.065,352,1.855,425,1.875,442,3.457,452,3.195,456,1.586,457,1.586,460,1.586,490,2.742,509,1.817,550,3.622,563,1.73,624,2.398,679,2.194,684,2.194,685,2.194,700,3.617,701,2.711,702,2.304,703,3.617,705,1.817,738,1.289,781,3.198,782,3.437,783,3.198,784,3.215,808,1.73,824,1.919,842,3.006,847,2.398,1077,2.398,1081,4.355,1222,2.398,1331,2.041,1362,3.006,1389,4.238,1390,4.238,1391,5.209,1392,2.194,1402,2.194,1404,2.194,1405,4.797,1407,4.238,1436,2.398,1437,5.923,1438,6.432,1439,2.709,1440,4.633,1441,2.709,1442,2.709,1443,2.709,1444,2.709,1445,2.709,1446,5.923,1447,2.709,1448,2.709,1449,2.709,1450,2.709,1451,2.398,1452,4.245,1453,2.709,1454,2.398,1455,4.245,1456,4.245,1457,2.709,1458,3.758,1459,2.709,1460,2.709,1461,2.709,1462,2.709,1463,2.709,1464,2.709,1465,2.709,1466,2.709,1467,2.709,1468,2.398,1469,2.709,1470,2.709,1471,2.709,1472,2.709,1473,2.709]],["title/injectables/ProfilesService.html",[200,0.763,442,2.275]],["body/injectables/ProfilesService.html",[0,0.243,3,0.063,4,0.063,5,0.049,7,0.238,10,0.497,11,0.008,12,1.021,15,0.571,17,0.126,20,0.063,21,0.005,22,0.005,29,1.075,30,2.142,34,1.416,38,1.562,39,0.881,40,1.123,48,1.513,60,0.608,68,0.608,72,2.034,74,0.557,101,3.112,108,2.26,137,1.917,144,1.854,150,0.951,185,1.212,191,1.419,200,0.906,202,1.184,221,2.089,267,2.639,301,1.423,328,3.68,352,0.951,358,2.234,425,1.989,442,2.7,546,4.675,550,4.131,555,2.962,563,2.336,585,4.007,679,2.962,684,2.962,685,2.962,703,3.253,784,1.985,835,4.629,1384,3.239,1385,3.239,1387,5.563,1389,4.314,1390,4.314,1391,4.314,1392,4.314,1396,4.717,1402,4.314,1404,4.314,1405,5.088,1407,2.962,1408,4.717,1410,4.717,1440,5.563,1454,3.239,1468,3.239,1474,3.239,1475,5.328,1476,3.658,1477,3.658,1478,3.658,1479,5.328,1480,3.658,1481,3.658,1482,3.658,1483,3.658,1484,3.658,1485,3.658,1486,3.658,1487,3.658]],["title/classes/Provider.html",[0,0.298,287,1.904]],["body/classes/Provider.html",[0,0.51,2,0.631,3,0.092,4,0.092,5,0.072,7,0.35,8,1.462,10,0.558,11,0.008,12,0.991,13,1.18,14,1.853,15,0.502,17,0.119,18,2.149,19,0.856,20,0.14,21,0.006,22,0.006,39,0.6,40,0.987,68,1.279,185,1.781,265,2,287,2.945,301,1.735,349,2.3,353,3.114,354,1.91,716,3.809,722,4.066,785,4.051,1488,4.051,1489,5.377,1490,5.377,1491,4.354,1492,4.354,1493,4.354,1494,4.354,1495,4.354,1496,4.354]],["title/classes/ProviderInput.html",[0,0.298,716,3.18]],["body/classes/ProviderInput.html",[0,0.509,2,0.629,3,0.092,4,0.092,5,0.072,7,0.349,8,1.459,10,0.558,11,0.008,12,0.99,13,1.178,14,1.808,15,0.501,17,0.119,18,2.145,19,0.853,20,0.139,21,0.006,22,0.006,39,0.598,40,0.985,68,1.153,185,2.296,265,1.998,287,2.275,301,1.733,349,2.296,353,3.109,354,1.905,716,4.91,722,4.059,785,4.04,1488,4.04,1491,4.343,1492,4.343,1493,4.343,1494,4.343,1495,4.343,1496,4.343,1497,5.363,1498,5.363,1499,5.363,1500,5.363]],["title/modules/PubSubModule.html",[109,1.453,124,3.18]],["body/modules/PubSubModule.html",[0,0.406,3,0.105,4,0.105,5,0.082,11,0.008,17,0.129,20,0.129,21,0.007,22,0.007,60,1.019,74,0.932,109,2.44,111,2.747,124,5.339,156,4.815,158,3.587,159,2.747,160,3.74,166,2.229,173,4.96,174,4.96,175,5.422,191,1.135,199,5.422,248,2.914,249,3.74,406,3.587,459,5.478,638,5.679,1501,4.96,1502,7.538,1503,6.125]],["title/classes/PublisherSubscriptions.html",[0,0.298,1290,3.382]],["body/classes/PublisherSubscriptions.html",[0,0.428,2,0.757,3,0.111,4,0.111,5,0.087,7,0.421,8,1.639,10,0.406,11,0.008,12,0.868,13,1.098,14,1.674,15,0.467,17,0.111,19,1.027,20,0.111,21,0.007,22,0.007,301,1.831,348,2.701,349,2.578,371,2.531,1290,5.865,1504,5.716,1505,6.457]],["title/classes/RedisIoAdapter.html",[0,0.298,1506,3.636]],["body/classes/RedisIoAdapter.html",[0,0.326,2,0.577,3,0.084,4,0.084,5,0.066,7,0.321,8,1.379,10,0.412,11,0.008,15,0.532,17,0.14,20,0.084,21,0.006,22,0.006,28,3.555,29,1.322,30,1.76,38,0.972,39,0.549,40,0.699,48,1.294,65,3.836,72,2.384,74,1.121,83,1.979,156,3.142,174,3.984,191,0.912,221,2.229,361,2.384,390,1.835,738,3.503,784,4.438,1418,6.952,1506,5.305,1507,4.356,1508,7.365,1509,7.365,1510,7.852,1511,6.551,1512,6.551,1513,4.92,1514,4.92,1515,6.551,1516,7.852,1517,4.92,1518,4.356,1519,4.356,1520,4.92,1521,4.356,1522,4.356,1523,6.551,1524,4.92,1525,4.92,1526,4.92,1527,4.92,1528,6.551,1529,4.92,1530,4.92,1531,4.92,1532,4.92,1533,4.92]],["title/classes/RegisterResponse.html",[0,0.298,1534,3.636]],["body/classes/RegisterResponse.html",[0,0.408,2,0.723,3,0.106,4,0.106,5,0.083,7,0.402,8,1.593,9,6.631,10,0.476,11,0.008,12,0.844,13,1.286,14,1.836,15,0.547,17,0.13,18,2.342,19,0.981,20,0.106,21,0.007,22,0.007,154,2.687,283,3.136,371,2.416,1534,6.127,1535,5.455,1536,6.162,1537,6.162]],["title/classes/Request.html",[0,0.298,864,2.528]],["body/classes/Request.html",[0,0.271,2,0.479,3,0.07,4,0.07,5,0.055,7,0.266,8,1.214,10,0.533,11,0.008,12,0.81,13,1.351,14,1.756,15,0.574,17,0.125,18,1.785,19,0.65,20,0.115,21,0.005,22,0.005,40,1.185,68,1.43,74,0.622,141,1.323,150,1.063,185,2.405,265,1.5,301,1.189,331,1.936,352,1.738,362,3.669,365,2.663,369,2.663,370,2.914,371,1.602,375,4.67,379,5.036,386,4.164,387,2.744,388,2.141,390,2.151,392,2.218,393,2.218,394,4.6,612,3.377,652,4.967,752,4.089,753,4.089,764,4.484,765,4.484,766,4.484,794,2.393,864,3.764,903,2.894,1538,3.078,1539,4.086,1540,5.767,1541,4.086,1542,6.684,1543,4.086,1544,4.086,1545,5.767,1546,4.086,1547,5.767,1548,4.086,1549,3.309,1550,3.078,1551,3.618,1552,4.086]],["title/injectables/RequestsGateway.html",[200,0.763,1553,3.18]],["body/injectables/RequestsGateway.html",[0,0.285,3,0.074,4,0.074,5,0.058,7,0.28,8,1.259,10,0.432,11,0.008,13,1.017,15,0.497,17,0.139,20,0.074,21,0.005,22,0.005,28,4.385,29,1.207,30,1.642,34,1.589,35,2.627,36,4.236,38,1.182,39,0.667,40,0.85,41,3.502,42,4.197,45,4.744,47,4.197,48,0.85,54,3.819,55,2.748,56,2.627,57,2.52,58,2.52,59,1.876,60,0.716,61,2.335,65,2.52,66,2.627,67,2.52,68,0.716,72,2.225,74,1.188,81,2.277,85,4.012,150,1.119,200,1.017,202,1.393,221,1.81,301,0.887,330,2.607,331,1.246,425,1.893,442,4.199,464,2.887,490,2.255,507,4.012,509,2.887,752,4.183,753,4.396,796,1.93,864,3.368,1132,3.485,1148,3.81,1150,3.81,1339,5.566,1342,3.81,1349,3.81,1350,3.81,1351,3.81,1355,3.81,1553,4.236,1554,3.81,1555,5.293,1556,4.303,1557,5.98,1558,4.303,1559,4.303,1560,3.81,1561,3.81,1562,4.303,1563,4.303,1564,4.303,1565,4.303]],["title/modules/RequestsModule.html",[109,1.453,125,3.18]],["body/modules/RequestsModule.html",[0,0.334,3,0.087,4,0.087,5,0.068,11,0.008,17,0.136,20,0.087,21,0.006,22,0.006,39,0.562,60,0.839,109,2.156,111,2.261,112,3.074,123,4.437,125,6.53,128,3.267,129,2.474,130,2.474,132,3.489,140,2.953,141,1.632,150,1.311,152,3.799,191,0.935,248,3.168,249,4.066,404,3.079,406,2.953,864,2.84,1550,5.016,1553,5.998,1555,5.803,1566,4.464,1567,5.042,1568,4.464,1569,4.464,1570,6.094,1571,6.209,1572,5.042,1573,5.042]],["title/injectables/RequestsRepository.html",[200,0.763,1570,3.012]],["body/injectables/RequestsRepository.html",[0,0.203,3,0.109,4,0.053,5,0.041,7,0.2,10,0.428,11,0.008,15,0.492,17,0.117,20,0.053,21,0.004,22,0.004,29,0.943,30,1.979,34,0.815,38,1.345,39,0.759,40,0.968,48,1.25,60,0.51,68,1.193,72,0.993,74,1.091,81,2.376,83,1.879,141,0.993,152,2.31,162,4.582,185,2.547,191,1.382,200,0.794,202,0.993,221,2.327,301,1.479,328,4.613,390,1.143,412,3.862,422,1.872,425,0.97,432,5.004,433,4.812,434,4.812,435,4.812,436,4.812,437,4.812,752,4.6,753,4.6,764,4.812,765,4.243,766,4.243,864,4.525,1549,2.483,1570,3.133,1574,2.714,1575,3.782,1576,3.782,1577,3.782,1578,3.782,1579,3.066,1580,3.066,1581,4.67,1582,3.782,1583,3.066,1584,3.782,1585,3.066,1586,4.135,1587,3.066,1588,3.782,1589,3.066,1590,2.714,1591,3.066,1592,3.066,1593,5.657,1594,3.066,1595,4.67,1596,4.67,1597,4.67,1598,4.67,1599,4.67,1600,4.67,1601,4.67,1602,4.67]],["title/classes/RequestsResolver.html",[0,0.298,1571,3.18]],["body/classes/RequestsResolver.html",[0,0.198,2,0.351,3,0.116,4,0.051,5,0.04,7,0.195,10,0.492,11,0.008,13,1.145,15,0.513,17,0.134,19,0.476,20,0.051,21,0.004,22,0.004,29,0.926,30,2.033,34,0.795,38,1.331,39,0.976,40,0.957,48,1.331,60,0.498,68,1.039,74,1.025,75,3.139,158,3.264,159,1.342,160,1.828,166,1.089,185,2.069,191,1.248,214,1.568,221,2.31,264,3.264,265,1.985,267,1.144,280,3.945,281,3.945,282,2.489,283,2.859,286,1.624,425,0.947,445,2.12,448,4.371,452,1.828,454,3.793,455,1.828,456,1.753,457,1.753,458,3.948,460,1.753,465,4.191,752,3.793,753,3.518,760,2.12,761,2.12,864,4.832,1144,4.514,1145,4.514,1555,4.539,1560,2.65,1561,2.65,1571,3.248,1575,5.455,1576,5.455,1577,3.713,1578,5.455,1582,2.424,1584,2.424,1588,2.424,1590,2.65,1603,2.424,1604,5.574,1605,6.248,1606,2.993,1607,2.993,1608,7.631,1609,2.993,1610,6.248,1611,2.993,1612,2.993,1613,2.993,1614,6.248,1615,2.993,1616,5.574,1617,2.993,1618,2.993,1619,2.993,1620,2.993,1621,2.993,1622,2.993,1623,5.574,1624,2.993,1625,2.993,1626,2.993,1627,2.993]],["title/injectables/RequestsService.html",[200,0.763,1555,2.867]],["body/injectables/RequestsService.html",[0,0.299,3,0.106,4,0.077,5,0.061,7,0.294,10,0.476,11,0.008,15,0.573,17,0.13,20,0.077,21,0.005,22,0.005,29,1.246,30,2.133,34,1.64,38,1.568,39,0.885,40,1.127,48,1.496,60,0.749,72,1.998,74,1.071,101,1.911,108,2.986,150,1.171,152,3.393,191,1.404,200,1.049,202,1.458,221,2.292,267,2.359,328,4.798,425,1.953,442,4.252,585,2.849,864,4.725,1144,3.647,1145,3.647,1555,3.942,1570,5.497,1575,4.998,1576,4.998,1577,4.998,1578,4.998,1582,4.998,1584,4.998,1586,5.464,1588,4.998,1628,3.988,1629,4.504,1630,4.504,1631,4.504,1632,4.504,1633,4.504,1634,4.504,1635,4.504,1636,4.504,1637,4.504,1638,4.504,1639,4.504,1640,4.504]],["title/injectables/Require.html",[200,0.763,1641,3.636]],["body/injectables/Require.html",[0,0.402,3,0.104,4,0.104,5,0.082,7,0.396,10,0.381,11,0.008,15,0.439,17,0.104,20,0.104,21,0.007,22,0.007,25,3.076,29,1.513,38,1.199,39,0.677,40,0.863,48,1.199,60,1.009,166,2.209,191,1.125,200,1.274,202,1.965,241,3.877,278,5.761,330,3.268,1174,6.07,1177,6.07,1641,6.07,1642,5.374,1643,6.637,1644,7.726,1645,6.07,1646,5.374,1647,5.374,1648,4.915]],["title/injectables/RequireAtLeast.html",[200,0.763,1649,3.382]],["body/injectables/RequireAtLeast.html",[0,0.402,3,0.104,4,0.104,5,0.082,7,0.396,10,0.381,11,0.008,15,0.439,17,0.104,20,0.104,21,0.007,22,0.007,25,3.076,29,1.513,38,1.199,39,0.677,40,0.863,48,1.199,60,1.009,166,2.209,191,1.125,200,1.274,202,1.965,241,3.877,278,5.761,330,3.268,1174,6.07,1177,6.07,1643,6.637,1644,7.726,1646,5.374,1647,5.374,1648,4.915,1649,5.647,1650,5.374,1651,6.07]],["title/classes/RetrieveRequest.html",[0,0.298,767,3.012]],["body/classes/RetrieveRequest.html",[0,0.547,2,0.594,3,0.087,4,0.087,5,0.068,11,0.008,12,0.886,14,1.887,17,0.115,19,0.806,20,0.142,21,0.006,22,0.006,40,0.72,59,2.209,68,1.243,234,3.589,265,1.944,283,1.758,301,1.702,348,2.865,349,2.735,353,3.563,354,1.801,355,1.987,361,1.844,362,2.34,652,4.966,722,3.912,723,4.481,750,3.399,751,3.589,752,3.762,753,3.762,758,3.399,759,5.985,760,4.732,761,3.589,762,3.399,763,4.481,764,3.399,765,3.399,766,3.399,767,4.481,768,3.818]],["title/modules/S3Module.html",[109,1.453,126,2.741]],["body/modules/S3Module.html",[0,0.393,3,0.102,4,0.102,5,0.08,11,0.008,17,0.138,20,0.102,21,0.006,22,0.006,39,0.661,60,0.986,109,2.392,111,2.658,112,3.41,126,5.473,128,3.625,129,2.909,130,2.909,132,3.106,136,5.232,137,3.106,248,3.514,249,4.51,549,4.466,550,3.338,702,3.217,1081,5.675,1652,5.248,1653,5.248,1654,5.248,1655,5.928,1656,5.928]],["title/classes/S3Processor.html",[0,0.298,1657,3.636]],["body/classes/S3Processor.html",[0,0.368,2,0.652,3,0.095,4,0.095,5,0.075,7,0.362,10,0.349,11,0.008,13,0.944,15,0.401,17,0.134,20,0.095,21,0.006,22,0.006,29,1.431,30,1.866,38,1.097,39,0.619,40,0.789,48,1.097,74,1.079,81,1.84,137,2.91,166,2.021,191,1.029,221,1.681,267,2.123,550,3.128,558,6.883,561,4.497,562,4.497,563,3.547,702,3.014,781,5.341,783,5.341,1013,5.741,1129,5.883,1383,4.917,1657,5.741,1658,4.917,1659,7.09,1660,7.09,1661,7.09,1662,5.554,1663,7.284,1664,4.497,1665,4.497,1666,5.554,1667,4.917,1668,4.917,1669,4.497,1670,4.917,1671,4.917]],["title/injectables/S3Service.html",[200,0.763,1081,2.741]],["body/injectables/S3Service.html",[0,0.218,3,0.056,4,0.056,5,0.099,7,0.214,10,0.412,11,0.008,15,0.427,17,0.121,20,0.056,21,0.004,22,0.004,29,0.994,30,1.919,38,1.167,39,0.658,40,0.839,48,1.167,60,0.547,74,1.317,81,1.632,159,1.475,166,2.682,191,1.456,200,0.837,202,1.065,221,1.787,240,3.711,267,1.883,294,4.361,700,4.665,702,1.785,781,4.939,782,5.967,783,4.939,784,1.785,798,1.927,803,2.33,1013,6.812,1081,3.008,1129,3.711,1332,2.33,1368,4.939,1663,6.216,1664,3.989,1665,2.664,1667,4.361,1668,4.361,1669,3.989,1670,4.361,1671,4.361,1672,2.664,1673,4.926,1674,4.926,1675,4.926,1676,4.926,1677,3.29,1678,5.905,1679,4.926,1680,3.29,1681,4.926,1682,3.29,1683,3.29,1684,3.29,1685,4.361,1686,2.912,1687,6.556,1688,4.926,1689,5.905,1690,6.556,1691,7.369,1692,4.926,1693,4.926,1694,4.926,1695,4.926,1696,4.926,1697,4.926,1698,4.926,1699,5.905,1700,3.29,1701,4.926,1702,4.926,1703,4.926,1704,6.556,1705,4.926,1706,4.926,1707,3.29,1708,4.926,1709,3.29,1710,3.29,1711,3.29,1712,3.29,1713,3.29]],["title/classes/Search.html",[0,0.298,704,2.867]],["body/classes/Search.html",[0,0.556,2,0.622,3,0.091,4,0.091,5,0.093,7,0.346,8,1.45,10,0.334,11,0.008,12,1.015,13,0.902,14,1.968,15,0.383,17,0.118,19,0.844,20,0.147,21,0.006,22,0.006,39,0.592,101,2.251,159,2.38,287,2.251,301,1.575,334,2.524,348,2.98,349,2.845,355,2.08,490,2.781,585,2.45,694,3.389,695,3.56,700,4.204,701,4.397,702,2.88,703,3.24,704,4.397,705,5.127,706,3.389,707,3.389,1714,5.307]],["title/classes/Send.html",[0,0.298,1188,3.18]],["body/classes/Send.html",[0,0.523,2,0.584,3,0.086,4,0.086,5,0.067,7,0.325,8,1.39,10,0.466,11,0.008,12,0.987,13,1.26,14,1.88,15,0.535,17,0.127,19,0.792,20,0.141,21,0.006,22,0.006,68,0.828,265,1.295,301,1.627,348,2.738,349,2.614,354,1.77,355,1.953,362,2.299,371,1.953,513,4.808,723,4.021,730,3.998,731,2.703,738,3.906,796,3.323,1052,3.041,1058,3.528,1063,5.589,1092,4.678,1183,3.528,1184,3.752,1188,4.678,1715,4.409,1716,4.98,1717,4.98,1718,4.98,1719,4.98]],["title/classes/SendFiles.html",[0,0.298,1052,2.741]],["body/classes/SendFiles.html",[0,0.528,2,0.599,3,0.088,4,0.088,5,0.069,7,0.333,8,1.414,10,0.422,11,0.008,12,0.98,13,1.141,14,1.89,15,0.485,17,0.129,19,0.812,20,0.142,21,0.006,22,0.006,68,0.849,265,1.328,301,1.643,348,2.765,349,2.639,354,1.814,355,2.002,362,2.357,371,2.002,513,4.848,723,4.071,730,4.038,731,2.771,738,3.938,796,2.29,1052,4.099,1058,3.617,1063,5.644,1092,4.755,1183,3.617,1184,3.847,1188,3.617,1715,4.52,1720,5.106,1721,5.106]],["title/classes/Status.html",[0,0.298,763,3.012]],["body/classes/Status.html",[0,0.533,2,0.549,3,0.08,4,0.08,5,0.063,7,0.305,8,1.334,10,0.451,11,0.008,12,0.858,13,1.221,14,1.854,15,0.519,17,0.109,19,0.745,20,0.138,21,0.006,22,0.006,40,0.665,59,2.041,68,1.194,234,3.316,265,1.868,283,1.624,301,1.658,348,2.79,349,2.663,353,3.451,354,1.663,355,1.835,361,1.704,362,2.161,652,5.117,722,3.71,723,4.364,750,3.14,751,3.316,752,3.568,753,3.568,758,3.14,759,5.798,760,4.488,761,3.316,762,3.14,763,4.818,764,4.818,765,4.818,766,4.818,767,3.14,768,3.527,1722,7.182,1723,4.681,1724,4.681,1725,4.681]],["title/classes/UpdatePost.html",[0,0.298,742,2.629]],["body/classes/UpdatePost.html",[0,0.571,2,0.548,3,0.08,4,0.08,5,0.063,11,0.008,12,0.924,14,1.728,17,0.138,18,1.958,19,0.743,20,0.148,21,0.006,22,0.006,68,1.052,74,1.17,83,1.879,149,2.545,185,2.095,265,2,331,2.227,348,2.939,349,2.974,350,2.535,352,1.866,353,2.837,354,1.659,355,1.831,361,2.924,367,2.996,728,2.447,729,2.852,730,3.205,731,2.535,732,2.535,733,2.983,734,2.63,735,2.735,736,4.04,737,3.562,738,3.009,739,2.983,740,2.735,741,2.983,742,3.704,743,2.983,744,2.447,745,4.582,746,2.535,747,2.735,748,2.447,749,2.852]],["title/classes/User.html",[0,0.298,283,1.558]],["body/classes/User.html",[0,0.247,2,0.436,3,0.064,4,0.064,5,0.05,7,0.242,8,1.135,10,0.551,11,0.008,12,0.951,13,1.41,14,1.872,15,0.599,17,0.127,18,1.669,19,0.592,20,0.109,21,0.005,22,0.005,68,1.401,74,0.566,83,1.496,84,5.455,141,1.204,154,1.621,185,2.446,248,3.017,265,2.003,283,2.201,287,2.287,291,3.873,292,3.873,301,1.111,331,1.837,334,3.017,337,4.254,359,3.617,362,2.489,365,3.409,366,3.873,369,3.409,370,2.765,371,2.486,373,6.13,386,4.163,387,2.565,388,1.949,389,1.717,390,2.011,392,2.018,393,2.018,394,3.917,785,5.24,903,3.819,969,5.615,1332,2.634,1648,5.136,1726,2.801,1727,3.719,1728,3.719,1729,5.391,1730,3.719,1731,3.719,1732,3.719,1733,3.719,1734,3.719,1735,3.719,1736,3.719,1737,5.391,1738,3.719,1739,3.011,1740,6.342,1741,3.719,1742,2.801,1743,3.292]],["title/classes/UserInput.html",[0,0.298,311,2.741]],["body/classes/UserInput.html",[0,0.401,2,0.514,3,0.075,4,0.075,5,0.059,7,0.285,8,1.274,10,0.494,11,0.008,12,1.009,13,1.335,14,1.747,15,0.567,17,0.135,19,0.697,20,0.075,21,0.005,22,0.005,40,1.239,68,1.433,154,1.909,265,2.268,283,2.407,291,4.235,292,4.235,311,3.695,331,2.009,334,3.299,337,4.653,348,2.1,349,2.005,353,3.643,354,1.555,370,3.024,389,2.021,721,4.901,723,4.408,724,3.545,726,4.901,727,3.545,730,3.067,731,2.376,1744,3.876,1745,4.378,1746,4.378,1747,4.378,1748,4.378,1749,4.378,1750,4.378,1751,4.378,1752,4.378,1753,4.378,1754,4.378,1755,4.378,1756,4.378,1757,6.052]],["title/modules/UsersModule.html",[109,1.453,127,2.867]],["body/modules/UsersModule.html",[0,0.296,3,0.077,4,0.077,5,0.06,11,0.008,17,0.146,20,0.077,21,0.005,22,0.005,39,0.498,60,0.742,64,2.514,74,1.148,109,1.986,111,2.002,112,2.832,123,3.214,126,4.99,127,5.692,128,3.01,129,2.191,130,2.191,132,3.214,140,2.614,141,1.445,150,1.161,153,2.851,191,0.827,194,3.363,248,2.918,249,3.745,258,3.952,260,5.442,283,1.549,292,2.726,322,3.615,334,2.124,387,2.918,404,2.726,406,2.614,506,4.115,610,3.363,1365,5.675,1367,3.952,1368,3.363,1371,3.952,1372,3.952,1742,4.621,1758,3.952,1759,3.952,1760,3.952,1761,4.464,1762,5.978,1763,4.464,1764,4.464,1765,4.464,1766,4.621,1767,4.464,1768,4.464,1769,4.464,1770,4.464,1771,4.464,1772,4.464,1773,6.134,1774,4.464,1775,4.464,1776,4.464,1777,4.464,1778,4.464,1779,4.464,1780,4.464,1781,4.464,1782,4.464]],["title/injectables/UsersRepository.html",[200,0.763,1762,3.012]],["body/injectables/UsersRepository.html",[0,0.2,3,0.052,4,0.052,5,0.04,7,0.196,10,0.511,11,0.008,12,0.794,15,0.566,17,0.116,20,0.052,21,0.004,22,0.004,29,0.93,30,2.14,34,0.8,38,1.465,39,0.827,40,1.053,48,1.511,60,0.501,72,0.975,74,1.128,81,2.076,101,1.954,108,2.658,141,0.975,154,1.313,166,1.096,185,1.526,191,1.482,200,0.783,202,0.975,221,2.6,248,2.662,257,3.47,269,4.549,273,4.349,283,2.175,287,3.243,291,2.813,292,2.813,301,1.576,311,5.099,320,3.09,331,0.872,334,3.526,337,4.204,366,1.838,370,2.732,389,1.39,390,1.123,412,3.827,422,1.838,430,2.666,774,1.923,1426,2.666,1739,2.438,1762,3.09,1783,2.666,1784,3.73,1785,5.075,1786,3.73,1787,5.075,1788,3.73,1789,3.73,1790,4.078,1791,3.011,1792,3.011,1793,4.607,1794,3.73,1795,3.011,1796,3.011,1797,3.73,1798,3.011,1799,3.011,1800,3.73,1801,3.011,1802,4.607,1803,3.011,1804,3.73,1805,3.011,1806,4.078,1807,3.011,1808,3.011,1809,3.011,1810,3.011,1811,3.011,1812,3.011,1813,3.011,1814,3.011,1815,3.011,1816,3.011,1817,5.595,1818,4.607,1819,3.011,1820,3.011,1821,4.607,1822,3.011,1823,4.607,1824,3.011,1825,3.011,1826,3.011,1827,3.011,1828,3.011,1829,3.011,1830,3.011]],["title/classes/UsersResolver.html",[0,0.298,1766,3.382]],["body/classes/UsersResolver.html",[0,0.205,2,0.362,3,0.053,4,0.053,5,0.042,7,0.201,10,0.452,11,0.008,13,1.271,15,0.557,17,0.136,19,0.492,20,0.053,21,0.004,22,0.004,29,0.948,30,2.122,34,0.821,38,1.422,39,0.986,40,1.022,48,1.478,60,0.514,68,1.396,72,1,75,3.576,81,1.023,153,1.973,154,1.347,166,2.069,191,1.386,214,1.619,221,2.437,260,4.393,264,3.719,265,2.206,267,1.796,273,4.393,276,2.188,277,2.735,279,2.735,280,1.809,281,4.001,282,2.549,283,2.794,286,1.676,306,2.735,308,2.735,311,5.268,315,2.735,425,1.487,448,3.58,452,3.47,454,1.74,455,1.886,456,1.809,457,1.809,460,1.809,774,3,1081,4.566,1451,2.735,1649,4.784,1766,3.539,1784,5.143,1785,5.826,1786,5.143,1787,5.826,1788,5.143,1789,5.143,1794,2.501,1797,2.501,1800,2.501,1804,2.501,1831,2.735,1832,4.697,1833,3.089,1834,3.089,1835,3.089,1836,3.089,1837,3.089,1838,3.089,1839,3.089,1840,3.089,1841,3.089,1842,3.089,1843,3.089,1844,3.089,1845,3.089,1846,3.089,1847,3.089,1848,3.089,1849,3.089,1850,3.089,1851,3.089,1852,3.089,1853,3.089]],["title/injectables/UsersService.html",[200,0.763,260,2.741]],["body/injectables/UsersService.html",[0,0.234,3,0.061,4,0.061,5,0.047,7,0.23,10,0.491,11,0.008,12,0.843,15,0.591,17,0.117,20,0.061,21,0.005,22,0.005,29,1.048,30,1.807,34,1.379,38,1.545,39,0.928,40,1.111,48,1.585,59,1.539,60,0.587,72,1.681,74,1.033,81,1.719,101,1.498,150,0.918,154,1.539,191,1.486,194,2.66,200,0.882,202,1.143,221,2.584,257,3.911,260,3.17,268,4.204,269,4.335,271,4.204,273,4.415,283,2.712,287,2.879,301,1.269,311,5.264,320,2.368,334,2.928,335,4.596,337,4.553,370,2.959,389,1.63,423,2.66,425,1.643,465,2.368,506,2.368,510,3.126,774,2.255,835,4.696,1762,5.072,1784,4.204,1785,5.496,1786,4.204,1787,5.496,1788,4.204,1789,4.204,1790,4.596,1794,4.204,1797,4.204,1800,4.204,1804,4.204,1806,4.596,1854,3.126,1855,3.531,1856,3.531,1857,3.531,1858,3.531,1859,3.531,1860,3.531,1861,3.531,1862,3.531,1863,3.531,1864,3.531,1865,3.531,1866,3.531,1867,3.531,1868,5.191,1869,3.531,1870,3.531,1871,3.531,1872,3.531,1873,3.531]],["title/classes/ValidationExceptionFilter.html",[0,0.298,1874,3.636]],["body/classes/ValidationExceptionFilter.html",[0,0.366,2,0.648,3,0.121,4,0.095,5,0.074,7,0.36,10,0.347,11,0.008,12,0.616,14,1.519,15,0.399,17,0.121,20,0.095,21,0.006,22,0.006,25,3.58,29,1.426,38,1.091,39,0.616,40,0.785,47,3.373,48,1.091,60,0.919,74,1.075,159,3.168,166,2.01,191,1.444,239,5.517,240,5.868,278,3.912,359,3.705,389,2.55,390,2.06,796,2.477,852,5.868,853,5.721,855,4.473,1129,4.161,1458,4.89,1874,5.721,1875,4.473,1876,7.269,1877,5.524,1878,5.721,1879,5.524,1880,5.524,1881,5.524,1882,5.524,1883,5.524,1884,5.524,1885,5.524,1886,5.524,1887,5.524,1888,5.524,1889,5.524]],["title/classes/_Upload_.html",[0,0.298,707,2.867]],["body/classes/_Upload_.html",[0,0.551,2,0.607,3,0.089,4,0.089,5,0.108,7,0.337,8,1.425,10,0.425,11,0.008,12,1.011,13,1.151,14,1.949,15,0.489,17,0.116,19,0.823,20,0.146,21,0.006,22,0.006,39,0.577,101,2.193,159,2.319,287,2.193,301,1.713,334,2.46,348,2.959,349,2.825,355,2.027,371,2.654,490,2.71,585,2.387,694,3.303,695,3.469,700,4.608,701,4.324,702,2.806,703,3.157,704,3.303,705,3.469,706,3.303,707,4.324,1890,5.171,1891,5.171]],["title/coverage.html",[1892,5.452]],["body/coverage.html",[0,0.617,1,1.469,5,0.044,6,1.726,10,0.123,11,0.008,21,0.003,22,0.003,23,1.579,24,1.726,99,7.69,109,0.631,131,1.579,158,1.905,166,0.71,200,1.463,201,1.579,203,1.726,210,1.381,211,1.726,213,1.579,214,1.022,216,1.726,246,1.308,251,1.469,254,1.726,260,1.191,263,1.469,269,1.245,273,1.191,276,1.381,283,0.677,287,0.827,311,1.191,313,1.726,329,1.469,346,1.191,347,3.153,351,0.875,352,0.507,357,1.191,360,1.381,363,1.245,364,2.451,367,0.727,395,1.469,400,1.308,402,1.381,403,1.469,407,1.726,439,1.726,442,0.988,448,1.022,454,1.098,459,1.308,473,1.726,482,2.451,490,1.022,491,1.469,493,1.381,494,1.726,497,1.191,546,1.191,548,1.469,552,1.579,553,1.726,566,1.726,635,1.726,664,1.726,694,1.245,695,3.642,704,1.245,706,1.245,707,1.245,711,1.726,716,1.381,728,1.022,729,3.799,730,0.988,735,1.142,742,1.142,744,1.022,746,1.058,747,1.142,748,1.022,750,1.308,751,3.46,762,1.308,763,1.308,767,1.308,769,2.451,771,1.469,774,1.245,775,1.726,780,1.726,790,1.308,791,3.467,796,0.875,799,1.308,801,1.191,804,1.245,808,1.245,809,2.451,813,1.579,818,1.308,820,1.469,821,1.308,822,1.726,825,1.726,833,1.726,835,1.142,842,1.381,843,1.726,850,1.579,851,1.726,860,1.579,861,1.726,864,1.098,872,1.579,873,1.726,882,1.579,883,1.726,889,2.451,900,1.469,907,1.308,909,1.381,910,1.469,912,1.726,927,1.726,930,1.142,947,1.726,957,1.726,962,1.726,976,1.381,977,1.726,1045,1.308,1046,1.308,1048,1.469,1050,1.726,1052,1.191,1078,1.726,1081,1.191,1104,1.726,1114,1.579,1115,1.726,1121,1.726,1135,1.381,1136,1.726,1154,1.381,1156,1.469,1157,1.726,1158,1.726,1163,1.726,1172,1.579,1173,1.726,1183,1.381,1184,3.153,1188,1.381,1189,2.451,1205,1.469,1211,1.381,1212,1.726,1235,1.381,1236,1.469,1238,1.726,1280,1.726,1290,1.469,1305,1.726,1316,3.153,1331,1.469,1334,1.469,1337,1.381,1338,1.726,1362,1.381,1366,1.469,1368,3.68,1375,1.726,1386,1.726,1436,1.726,1474,1.726,1488,2.451,1501,1.579,1504,1.726,1506,1.579,1507,1.726,1534,1.579,1535,1.726,1538,2.451,1550,1.469,1553,1.381,1554,1.726,1555,1.245,1570,1.308,1571,1.381,1574,1.726,1603,2.634,1628,1.726,1641,1.579,1642,1.726,1649,1.469,1650,1.726,1657,1.579,1658,1.726,1672,1.579,1726,2.451,1742,1.469,1744,1.726,1762,1.308,1766,1.469,1783,1.726,1831,1.726,1854,1.726,1874,1.579,1875,2.634,1878,1.579,1892,1.726,1893,1.95,1894,1.95,1895,1.95,1896,6.771,1897,7.923,1898,8.734,1899,8.158,1900,8.086,1901,7.338,1902,7.726,1903,4.185,1904,1.726,1905,1.726,1906,1.726,1907,1.726,1908,1.726,1909,1.726,1910,1.726,1911,1.726,1912,3.253,1913,5.429,1914,1.95,1915,5.429,1916,2.634,1917,1.726,1918,3.253,1919,1.95,1920,1.95]],["title/dependencies.html",[112,2.497,1921,3.306]],["body/dependencies.html",[0,0.389,11,0.008,19,0.666,21,0.005,22,0.005,28,3.185,36,3.185,57,2.452,60,0.696,61,3.185,65,3.967,112,1.933,135,3.707,137,2.194,141,1.356,156,4.326,157,3.707,159,3.592,160,3.583,164,3.707,165,3.707,187,5.195,225,3.155,322,3.391,354,2.085,389,1.933,390,2.188,563,2.674,702,2.273,869,5.997,903,2.966,1332,2.966,1365,3.391,1519,5.997,1521,3.707,1522,5.195,1664,3.391,1665,3.391,1669,3.391,1685,3.707,1922,4.188,1923,4.188,1924,4.188,1925,4.188,1926,5.868,1927,4.188,1928,4.188,1929,4.188,1930,4.188,1931,4.188,1932,7.34,1933,4.188,1934,4.188,1935,4.188,1936,5.868,1937,4.188,1938,4.188,1939,5.868,1940,4.188,1941,5.868,1942,5.868,1943,4.188,1944,4.188,1945,4.188,1946,5.868,1947,5.868,1948,4.188,1949,5.868,1950,4.188,1951,5.868,1952,4.188,1953,4.188,1954,4.188,1955,4.188,1956,4.188,1957,4.188,1958,4.188,1959,4.188,1960,4.188,1961,4.188,1962,4.188,1963,4.188,1964,4.188,1965,4.188,1966,4.188,1967,4.188,1968,4.188,1969,4.188,1970,4.188,1971,4.188,1972,4.188,1973,4.188,1974,4.188,1975,4.188,1976,4.188,1977,4.188,1978,4.188,1979,6.774,1980,4.188,1981,4.188,1982,4.188,1983,4.188,1984,4.188,1985,4.188,1986,4.188,1987,4.188,1988,4.188,1989,4.188,1990,4.188,1991,4.188,1992,4.188,1993,4.188,1994,4.188,1995,4.188,1996,4.188,1997,4.188,1998,4.188,1999,4.188]],["title/miscellaneous/functions.html",[2000,2.505,2001,4.788]],["body/miscellaneous/functions.html",[7,0.403,10,0.515,11,0.008,12,0.845,21,0.007,22,0.007,38,1.62,39,0.914,40,1.165,48,1.221,730,3.841,1518,7.259,1905,5.472,1906,6.711,1907,5.472,1908,6.711,1909,5.472,1916,5.005,1917,7.259,2000,4.146,2001,5.472,2002,5.472,2003,6.181,2004,6.181,2005,6.181,2006,6.181,2007,6.181,2008,6.181,2009,6.181,2010,8.928,2011,6.181]],["title/index.html",[7,0.243,2012,3.734,2013,3.734]],["body/index.html",[11,0.007,21,0.007,22,0.007,28,3.902,2014,7.19,2015,7.19,2016,7.19,2017,7.19,2018,7.19,2019,7.19]],["title/modules.html",[111,2.762]],["body/modules.html",[11,0.006,21,0.006,22,0.006,110,4.427,111,2.635,115,4.162,116,4.162,117,3.753,118,3.942,119,4.162,120,3.942,121,4.162,122,3.942,123,3.079,124,4.162,125,4.162,126,3.588,127,3.753,2020,9.321,2021,9.321,2022,9.321,2023,9.353,2024,5.876,2025,5.876]],["title/overview.html",[2026,5.452]],["body/overview.html",[2,0.357,11,0.008,21,0.004,22,0.004,110,6.841,111,1.367,112,2.146,113,2.698,114,2.698,115,5.682,116,5.272,117,5.209,118,4.993,119,5.57,120,5.471,121,5.272,122,5.471,123,4.599,124,3.992,125,5.993,126,4.801,127,5.283,128,2.281,129,1.495,130,1.495,202,0.987,210,3.992,213,2.468,242,2.698,243,2.698,244,2.698,246,4.993,260,4.545,397,2.698,398,2.698,400,3.781,442,3.772,493,3.992,497,4.545,543,2.698,544,2.698,545,2.698,546,4.545,612,1.784,815,2.698,817,2.698,818,3.781,835,4.359,904,2.698,906,2.698,907,3.781,930,4.359,976,3.992,1042,2.698,1044,2.698,1045,3.781,1046,3.781,1081,4.545,1135,3.992,1152,2.698,1153,2.698,1154,3.992,1211,3.992,1229,2.698,1231,2.698,1232,2.698,1337,3.992,1358,2.698,1360,2.698,1361,2.698,1362,4.467,1553,3.992,1555,4.754,1566,2.698,1568,2.698,1569,2.698,1570,4.993,1571,4.467,1652,2.698,1653,2.698,1654,2.698,1758,2.698,1759,2.698,1760,2.698,1762,4.993,2026,2.698,2027,3.047,2028,3.047,2029,3.047]],["title/properties.html",[8,1.139,1921,3.306]],["body/properties.html",[8,1.493,11,0.008,21,0.007,22,0.007,736,3.992,2030,7.09,2031,7.09,2032,7.09,2033,7.09,2034,7.09]],["title/miscellaneous/typealiases.html",[2000,2.505,2035,5.408]],["body/miscellaneous/typealiases.html",[7,0.362,10,0.446,11,0.008,12,0.871,21,0.006,22,0.006,320,4.756,330,3.091,352,1.844,364,4.184,367,2.644,391,5.741,482,4.184,489,5.741,769,4.184,791,3.547,794,4.152,795,4.756,809,4.184,812,6.277,889,4.184,896,5.741,898,5.741,899,6.277,1189,4.184,1204,5.741,1214,4.917,1316,4.184,1329,5.741,1488,4.184,1491,5.741,1492,5.741,1493,4.497,1494,4.497,1495,4.497,1496,4.497,1538,4.184,1549,5.741,1672,4.497,1686,6.277,1726,4.184,1739,5.741,2000,3.726,2036,5.554,2037,4.917,2038,4.917,2039,6.277,2040,6.277,2041,6.277,2042,5.554,2043,4.917,2044,4.917,2045,5.554,2046,7.09,2047,4.917,2048,4.917,2049,5.554,2050,5.554]],["title/miscellaneous/variables.html",[2000,2.505,2051,4.788]],["body/miscellaneous/variables.html",[7,0.272,10,0.425,11,0.008,12,0.465,21,0.005,22,0.005,30,1.398,39,0.465,74,1.028,81,1.381,109,1.894,131,3.377,158,4.811,166,2.46,173,3.377,191,1.43,197,3.377,219,3.692,221,1.262,222,3.692,225,4.408,231,5.18,238,3.692,241,2.663,331,1.208,352,1.522,362,4.172,364,3.142,395,4.408,396,3.692,454,3.295,459,3.925,482,3.142,491,4.408,492,3.692,585,1.925,791,2.663,804,3.737,805,2.954,808,3.737,809,3.142,813,4.738,814,3.692,889,3.142,900,4.408,901,3.692,1060,6.937,1189,3.142,1205,4.408,1206,3.692,1316,3.142,1327,3.692,1331,5.092,1332,2.954,1333,3.692,1334,4.408,1335,3.692,1501,3.377,1538,3.142,1550,4.408,1551,3.692,1603,3.377,1726,3.142,1742,4.408,1743,3.692,1875,3.377,1876,3.692,1878,4.738,1904,3.692,1910,3.692,1911,5.18,1916,3.377,2000,2.797,2002,3.692,2037,3.692,2038,3.692,2039,3.692,2040,3.692,2041,5.18,2043,3.692,2044,3.692,2047,3.692,2048,3.692,2051,3.692,2052,4.17,2053,4.17,2054,4.17,2055,4.17,2056,4.17,2057,4.17,2058,4.17,2059,4.17,2060,4.17,2061,4.17,2062,4.17,2063,4.17,2064,4.17,2065,4.17,2066,4.17,2067,4.17,2068,4.17]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthGateway.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"modules/CommentsModule.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"modules/FriendsModule.html":{},"classes/FriendsProfile.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"modules/NotificationsModule.html":{},"classes/NotificationsResolver.html":{},"injectables/NotificationsService.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"injectables/ObjectIdPipe.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"modules/PubSubModule.html":{},"classes/PublisherSubscriptions.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/RetrieveRequest.html":{},"modules/S3Module.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":99,"title":{},"body":{"classes/AppGateway.html":{},"injectables/ProfilesRepository.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2031,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1988,"title":{},"body":{"dependencies.html":{}}}],["0.1.3",{"_index":1933,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1954,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":1945,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1953,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1980,"title":{},"body":{"dependencies.html":{}}}],["0.6.1",{"_index":1927,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1898,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1913,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1912,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1914,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1900,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1899,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1902,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1901,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1896,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1915,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1903,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1918,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":612,"title":{},"body":{"injectables/ConversationsRepository.html":{},"injectables/ConversationsService.html":{},"classes/Like.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{},"classes/Profile.html":{},"injectables/ProfilesRepository.html":{},"classes/Request.html":{},"overview.html":{}}}],["1.0.0",{"_index":1984,"title":{},"body":{"dependencies.html":{}}}],["1.11.0",{"_index":1960,"title":{},"body":{"dependencies.html":{}}}],["1.17.3",{"_index":1962,"title":{},"body":{"dependencies.html":{}}}],["1.20.0",{"_index":1948,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1958,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":1956,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1075,"title":{},"body":{"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{}}}],["10.0.2",{"_index":1935,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1926,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1770,"title":{},"body":{"modules/UsersModule.html":{}}}],["11000",{"_index":1128,"title":{},"body":{"classes/MongooseExceptionFilter.html":{}}}],["12.0.0",{"_index":1965,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":2027,"title":{},"body":{"overview.html":{}}}],["15",{"_index":727,"title":{},"body":{"classes/CreateInput.html":{},"classes/LoginInput.html":{},"classes/UserInput.html":{}}}],["15)@field(undefined",{"_index":1755,"title":{},"body":{"classes/UserInput.html":{}}}],["15)@isnotempty()@field(undefined",{"_index":719,"title":{},"body":{"classes/CreateInput.html":{},"classes/LoginInput.html":{}}}],["16.6.0",{"_index":1963,"title":{},"body":{"dependencies.html":{}}}],["1e8",{"_index":70,"title":{},"body":{"classes/AppGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/PostsGateway.html":{}}}],["2",{"_index":604,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["2.0.0",{"_index":1951,"title":{},"body":{"dependencies.html":{}}}],["2.1.35",{"_index":1970,"title":{},"body":{"dependencies.html":{}}}],["2.1328.0",{"_index":1943,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":1971,"title":{},"body":{"dependencies.html":{}}}],["2.3.1",{"_index":1930,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":1994,"title":{},"body":{"dependencies.html":{}}}],["2.5.0",{"_index":1998,"title":{},"body":{"dependencies.html":{}}}],["2.6.0",{"_index":1964,"title":{},"body":{"dependencies.html":{}}}],["26042",{"_index":1888,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["29",{"_index":2028,"title":{},"body":{"overview.html":{}}}],["3",{"_index":1985,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1990,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":1973,"title":{},"body":{"dependencies.html":{}}}],["3.12.0",{"_index":1942,"title":{},"body":{"dependencies.html":{}}}],["3.2.10",{"_index":1978,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1982,"title":{},"body":{"dependencies.html":{}}}],["4.10.4",{"_index":1949,"title":{},"body":{"dependencies.html":{}}}],["4.20.1",{"_index":1975,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":1923,"title":{},"body":{"dependencies.html":{}}}],["4.6.1",{"_index":1993,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":1946,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":1950,"title":{},"body":{"dependencies.html":{}}}],["5.11.3",{"_index":1966,"title":{},"body":{"dependencies.html":{}}}],["5.16.5",{"_index":1996,"title":{},"body":{"dependencies.html":{}}}],["6.0.1",{"_index":1968,"title":{},"body":{"dependencies.html":{}}}],["6.4.1",{"_index":1972,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1462,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["6379",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"modules/PubSubModule.html":{}}}],["7.8.0",{"_index":1992,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":2029,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":1940,"title":{},"body":{"dependencies.html":{}}}],["8.12.1",{"_index":1999,"title":{},"body":{"dependencies.html":{}}}],["9.0.16",{"_index":1925,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":1938,"title":{},"body":{"dependencies.html":{}}}],["9.2.1",{"_index":1936,"title":{},"body":{"dependencies.html":{}}}],["9.3.7",{"_index":1928,"title":{},"body":{"dependencies.html":{}}}],["9.3.9",{"_index":1932,"title":{},"body":{"dependencies.html":{}}}],["_deletedat",{"_index":1266,"title":{},"body":{"classes/PostsRepository.html":{}}}],["_friends(@parent",{"_index":1473,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["_id",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"classes/CommentsRepository.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsRepository.html":{},"classes/CreateConversation.html":{},"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/FileInfo.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/Like.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesRepository.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"classes/Profile.html":{},"injectables/ProfilesRepository.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["_oauthinput",{"_index":271,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["_post",{"_index":1257,"title":{},"body":{"classes/PostsRepository.html":{},"classes/PostsResolver.html":{}}}],["_post.toobject",{"_index":1258,"title":{},"body":{"classes/PostsRepository.html":{}}}],["_receiver",{"_index":1430,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["_receiver.modifiedcount",{"_index":1433,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["_requestor",{"_index":1431,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["_requestor.modifiedcount",{"_index":1434,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["_text",{"_index":428,"title":{},"body":{"classes/CommentsRepository.html":{}}}],["_upload_",{"_index":707,"title":{"classes/_Upload_.html":{}},"body":{"classes/Create.html":{},"classes/Friend.html":{},"classes/Obtain.html":{},"classes/Search.html":{},"classes/_Upload_.html":{},"coverage.html":{}}}],["accepted",{"_index":1151,"title":{},"body":{"injectables/NotificationsGateway.html":{}}}],["acceptrequest",{"_index":1575,"title":{},"body":{"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{}}}],["acceptrequest(request",{"_index":1582,"title":{},"body":{"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{}}}],["accesstoken",{"_index":9,"title":{},"body":{"classes/AccessTokenResponse.html":{},"injectables/AuthService.html":{},"classes/RegisterResponse.html":{}}}],["accesstokenresponse",{"_index":1,"title":{"classes/AccessTokenResponse.html":{}},"body":{"classes/AccessTokenResponse.html":{},"classes/AuthResolver.html":{},"coverage.html":{}}}],["account",{"_index":288,"title":{},"body":{"classes/AuthResolver.html":{}}}],["acknowledged",{"_index":776,"title":{},"body":{"classes/DeleteResult.html":{}}}],["adapter",{"_index":1522,"title":{},"body":{"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["adapterconstructor",{"_index":1509,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["add",{"_index":1150,"title":{},"body":{"injectables/NotificationsGateway.html":{},"injectables/RequestsGateway.html":{}}}],["add(`${random(0",{"_index":1769,"title":{},"body":{"modules/UsersModule.html":{}}}],["addfields",{"_index":1264,"title":{},"body":{"classes/PostsRepository.html":{}}}],["addfriend",{"_index":1387,"title":{},"body":{"injectables/ProfilesRepository.html":{},"injectables/ProfilesService.html":{}}}],["addfriend(userid",{"_index":1396,"title":{},"body":{"injectables/ProfilesRepository.html":{},"injectables/ProfilesService.html":{}}}],["addmember",{"_index":495,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{}}}],["addmember(@messagebody",{"_index":511,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["addmember(conversationid",{"_index":576,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{}}}],["addmember(payload",{"_index":499,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["addmemberconversation",{"_index":640,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["addrequest",{"_index":1576,"title":{},"body":{"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{}}}],["addrequest(request",{"_index":1584,"title":{},"body":{"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{}}}],["addtoset",{"_index":1825,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["aliases",{"_index":2036,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":1132,"title":{},"body":{"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"injectables/RequestsGateway.html":{}}}],["apollo",{"_index":1941,"title":{},"body":{"dependencies.html":{}}}],["apollo/server",{"_index":1922,"title":{},"body":{"dependencies.html":{}}}],["apollodriver",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["apollodriverconfig",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["appearance",{"_index":1777,"title":{},"body":{"modules/UsersModule.html":{}}}],["appgateway",{"_index":23,"title":{"classes/AppGateway.html":{}},"body":{"classes/AppGateway.html":{},"coverage.html":{}}}],["appmodule",{"_index":110,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":201,"title":{"injectables/AppService.html":{}},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["apromises",{"_index":1099,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["apromises.push(this.s3service.uploadmultipleimage(file",{"_index":1100,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["args",{"_index":280,"title":{},"body":{"classes/AuthResolver.html":{},"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/LikesResolver.html":{},"classes/MessagesResolver.html":{},"classes/PostsResolver.html":{},"classes/ProfilesResolver.html":{},"classes/RequestsResolver.html":{},"classes/UsersResolver.html":{}}}],["argstype",{"_index":348,"title":{},"body":{"classes/ChangeNameConversation.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/DeletePost.html":{},"classes/Friend.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/OAuthInput.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/PostDto.html":{},"classes/PublisherSubscriptions.html":{},"classes/RetrieveRequest.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/UserInput.html":{},"classes/_Upload_.html":{}}}],["argumentshost",{"_index":2059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":359,"title":{},"body":{"classes/ChangeNameConversation.html":{},"classes/CreateConversation.html":{},"classes/ListFriendNotInConversation.html":{},"classes/Profile.html":{},"classes/User.html":{},"classes/ValidationExceptionFilter.html":{}}}],["async",{"_index":30,"title":{},"body":{"classes/AppGateway.html":{},"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"injectables/ConversationsGateway.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":1974,"title":{},"body":{"dependencies.html":{}}}],["auth.gateway",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.resolver",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{}}}],["auth/jwt",{"_index":226,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authgateway",{"_index":210,"title":{"injectables/AuthGateway.html":{}},"body":{"injectables/AuthGateway.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":214,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/FriendsResolver.html":{},"classes/LikesResolver.html":{},"classes/MessagesResolver.html":{},"classes/PostsResolver.html":{},"classes/ProfilesResolver.html":{},"classes/RequestsResolver.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["authmodule",{"_index":115,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2034,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":454,"title":{},"body":{"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/FriendsResolver.html":{},"classes/LikesResolver.html":{},"classes/MessagesResolver.html":{},"classes/PostsResolver.html":{},"classes/RequestsResolver.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authresolver",{"_index":251,"title":{"classes/AuthResolver.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"coverage.html":{}}}],["authservice",{"_index":246,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoschemafile",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":2025,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":1317,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfilesRepository.html":{}}}],["await",{"_index":81,"title":{},"body":{"classes/AppGateway.html":{},"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/NotificationsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/ProfilesGateway.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":1664,"title":{},"body":{"classes/S3Processor.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["axios",{"_index":1944,"title":{},"body":{"dependencies.html":{}}}],["badrequestexception",{"_index":278,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/ObjectIdPipe.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/ValidationExceptionFilter.html":{}}}],["badrequestexception('error",{"_index":304,"title":{},"body":{"classes/AuthResolver.html":{}}}],["badrequestexception('invalid",{"_index":1180,"title":{},"body":{"injectables/ObjectIdPipe.html":{}}}],["badrequestexception('payload",{"_index":1647,"title":{},"body":{"injectables/Require.html":{},"injectables/RequireAtLeast.html":{}}}],["badrequestexception('request",{"_index":299,"title":{},"body":{"classes/AuthResolver.html":{}}}],["badrequestexception(listerrors",{"_index":1889,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["base64",{"_index":1015,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["bcrypt",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["body",{"_index":1669,"title":{},"body":{"classes/S3Processor.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["boolean",{"_index":652,"title":{},"body":{"classes/ConversationsResolver.html":{},"classes/CreateRequest.html":{},"classes/DeleteResult.html":{},"classes/InfoRequest.html":{},"classes/IsNonceConstraint.html":{},"classes/Post.html":{},"classes/Request.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{}}}],["bootstrap",{"_index":1917,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":2014,"title":{},"body":{"index.html":{}}}],["browse",{"_index":2023,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2020,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1667,"title":{},"body":{"classes/S3Processor.html":{},"injectables/S3Service.html":{}}}],["buffer",{"_index":1013,"title":{},"body":{"injectables/MessagesGateway.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{}}}],["buffer.concat(chunks",{"_index":1696,"title":{},"body":{"injectables/S3Service.html":{}}}],["buffer.from(info.file",{"_index":1014,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["buffer.tostring('base64",{"_index":1016,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["bull",{"_index":563,"title":{},"body":{"classes/ConversationsProcessor.html":{},"injectables/ConversationsService.html":{},"classes/ProfilesProcessor.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/S3Processor.html":{},"dependencies.html":{}}}],["bullmodule",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/MessagesModule.html":{},"modules/ProfilesModule.html":{},"modules/S3Module.html":{}}}],["bullmodule.forroot",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":549,"title":{},"body":{"modules/ConversationsModule.html":{},"modules/MessagesModule.html":{},"modules/ProfilesModule.html":{},"modules/S3Module.html":{}}}],["cache",{"_index":36,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesResolver.html":{},"injectables/RequestsGateway.html":{},"dependencies.html":{}}}],["cache_manager",{"_index":58,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesResolver.html":{},"injectables/RequestsGateway.html":{}}}],["cachemanager",{"_index":41,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesResolver.html":{},"injectables/RequestsGateway.html":{}}}],["cachemodule",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["caller",{"_index":537,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["caller.id",{"_index":539,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["canactivate",{"_index":217,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":218,"title":{},"body":{"guards/AuthGuard.html":{}}}],["case",{"_index":1127,"title":{},"body":{"classes/MongooseExceptionFilter.html":{}}}],["catch",{"_index":239,"title":{},"body":{"guards/AuthGuard.html":{},"classes/GraphQLExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["catch(exception",{"_index":853,"title":{},"body":{"classes/GraphQLExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["catch(graphqlexception",{"_index":857,"title":{},"body":{"classes/GraphQLExceptionFilter.html":{}}}],["catch(mongoerror",{"_index":1119,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["catch(validationerror",{"_index":1883,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["changenameconversation",{"_index":346,"title":{"classes/ChangeNameConversation.html":{}},"body":{"classes/ChangeNameConversation.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversation.html":{},"classes/ListFriendNotInConversation.html":{},"coverage.html":{}}}],["changenameconversation(payload",{"_index":578,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{}}}],["check",{"_index":89,"title":{},"body":{"classes/AppGateway.html":{}}}],["chunk",{"_index":1693,"title":{},"body":{"injectables/S3Service.html":{}}}],["chunks",{"_index":1689,"title":{},"body":{"injectables/S3Service.html":{}}}],["chunks.push(chunk",{"_index":1694,"title":{},"body":{"injectables/S3Service.html":{}}}],["class",{"_index":0,"title":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"classes/AuthResolver.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"classes/Conversation.html":{},"classes/ConversationsProcessor.html":{},"classes/ConversationsResolver.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"classes/FriendsProfile.html":{},"classes/FriendsResolver.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/MessagesResolver.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"classes/NotificationsResolver.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"classes/Profile.html":{},"classes/ProfilesProcessor.html":{},"classes/ProfilesResolver.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/PublisherSubscriptions.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"classes/RequestsResolver.html":{},"classes/RetrieveRequest.html":{},"classes/S3Processor.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"classes/UsersResolver.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{}},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthGateway.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"modules/CommentsModule.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"modules/FriendsModule.html":{},"classes/FriendsProfile.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"modules/NotificationsModule.html":{},"classes/NotificationsResolver.html":{},"injectables/NotificationsService.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"injectables/ObjectIdPipe.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"modules/PubSubModule.html":{},"classes/PublisherSubscriptions.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/RetrieveRequest.html":{},"modules/S3Module.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"classes/AuthResolver.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"classes/Conversation.html":{},"classes/ConversationsProcessor.html":{},"classes/ConversationsResolver.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"classes/FriendsProfile.html":{},"classes/FriendsResolver.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/MessagesResolver.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"classes/NotificationsResolver.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"classes/Profile.html":{},"classes/ProfilesProcessor.html":{},"classes/ProfilesResolver.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/PublisherSubscriptions.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"classes/RequestsResolver.html":{},"classes/RetrieveRequest.html":{},"classes/S3Processor.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"classes/UsersResolver.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{},"overview.html":{}}}],["client",{"_index":47,"title":{},"body":{"classes/AppGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{},"classes/ValidationExceptionFilter.html":{}}}],["client.emit('call.success",{"_index":1022,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["client.emit('messages.user_offline",{"_index":1027,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["client.emit('result.friendisonline",{"_index":542,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["client.handshake",{"_index":76,"title":{},"body":{"classes/AppGateway.html":{}}}],["client.id",{"_index":88,"title":{},"body":{"classes/AppGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["client.setmaxlisteners(200",{"_index":77,"title":{},"body":{"classes/AppGateway.html":{}}}],["client.to(listsocketid).emit('messages.incoming_call",{"_index":1024,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["client.to(listsocketid).emit('messages.self_reject",{"_index":1035,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["client.to(listsocketid).emit('messages.stop_call",{"_index":1041,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["client.to(listsocketid).emit('publish/messages.send",{"_index":535,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["client.to(listsocketid).emit('publish/messages.send_files",{"_index":1019,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["client.to(listsocketid).emit('publish/notifications.send_notification",{"_index":1147,"title":{},"body":{"injectables/NotificationsGateway.html":{}}}],["client.to(listsocketid).emit('publish/profiles.unfriend",{"_index":1357,"title":{},"body":{"injectables/ProfilesGateway.html":{}}}],["client.to(listsocketid).emit('publish/requests.send_request",{"_index":1563,"title":{},"body":{"injectables/RequestsGateway.html":{}}}],["client.to(listsocketid).emit('receiver.accept_call",{"_index":1031,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["client.to(listsocketid).emit('receiver.reject_call",{"_index":1033,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["client.to(listsocketid).emit('subscribe.addfriend",{"_index":1352,"title":{},"body":{"injectables/ProfilesGateway.html":{}}}],["client.to(receiverpacket).emit('post.add",{"_index":1228,"title":{},"body":{"injectables/PostsGateway.html":{}}}],["cluster_appmodule",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_commentsmodule",{"_index":397,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_commentsmodule_imports",{"_index":399,"title":{},"body":{"modules/CommentsModule.html":{}}}],["cluster_commentsmodule_providers",{"_index":398,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule",{"_index":543,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule_exports",{"_index":545,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule_providers",{"_index":544,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_friendsmodule",{"_index":815,"title":{},"body":{"modules/FriendsModule.html":{},"overview.html":{}}}],["cluster_friendsmodule_imports",{"_index":816,"title":{},"body":{"modules/FriendsModule.html":{}}}],["cluster_friendsmodule_providers",{"_index":817,"title":{},"body":{"modules/FriendsModule.html":{},"overview.html":{}}}],["cluster_likesmodule",{"_index":904,"title":{},"body":{"modules/LikesModule.html":{},"overview.html":{}}}],["cluster_likesmodule_imports",{"_index":905,"title":{},"body":{"modules/LikesModule.html":{}}}],["cluster_likesmodule_providers",{"_index":906,"title":{},"body":{"modules/LikesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule",{"_index":1042,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_imports",{"_index":1043,"title":{},"body":{"modules/MessagesModule.html":{}}}],["cluster_messagesmodule_providers",{"_index":1044,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule",{"_index":1152,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule_providers",{"_index":1153,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1229,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":1231,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1230,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1232,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_profilesmodule",{"_index":1358,"title":{},"body":{"modules/ProfilesModule.html":{},"overview.html":{}}}],["cluster_profilesmodule_exports",{"_index":1360,"title":{},"body":{"modules/ProfilesModule.html":{},"overview.html":{}}}],["cluster_profilesmodule_imports",{"_index":1359,"title":{},"body":{"modules/ProfilesModule.html":{}}}],["cluster_profilesmodule_providers",{"_index":1361,"title":{},"body":{"modules/ProfilesModule.html":{},"overview.html":{}}}],["cluster_requestsmodule",{"_index":1566,"title":{},"body":{"modules/RequestsModule.html":{},"overview.html":{}}}],["cluster_requestsmodule_exports",{"_index":1568,"title":{},"body":{"modules/RequestsModule.html":{},"overview.html":{}}}],["cluster_requestsmodule_imports",{"_index":1567,"title":{},"body":{"modules/RequestsModule.html":{}}}],["cluster_requestsmodule_providers",{"_index":1569,"title":{},"body":{"modules/RequestsModule.html":{},"overview.html":{}}}],["cluster_s3module",{"_index":1652,"title":{},"body":{"modules/S3Module.html":{},"overview.html":{}}}],["cluster_s3module_exports",{"_index":1654,"title":{},"body":{"modules/S3Module.html":{},"overview.html":{}}}],["cluster_s3module_providers",{"_index":1653,"title":{},"body":{"modules/S3Module.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1758,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1759,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1761,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1760,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1887,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["comment",{"_index":363,"title":{"classes/Comment.html":{}},"body":{"classes/Comment.html":{},"modules/CommentsModule.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"coverage.html":{}}}],["comment.name",{"_index":405,"title":{},"body":{"modules/CommentsModule.html":{}}}],["commentadded",{"_index":440,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["commentadded(@args",{"_index":471,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["commentadded(post",{"_index":444,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["commentdocument",{"_index":391,"title":{},"body":{"classes/Comment.html":{},"classes/CommentsRepository.html":{},"miscellaneous/typealiases.html":{}}}],["commentmodel",{"_index":414,"title":{},"body":{"classes/CommentsRepository.html":{}}}],["commentpost",{"_index":408,"title":{},"body":{"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{}}}],["commentpost(user",{"_index":447,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["commentpost(userid",{"_index":415,"title":{},"body":{"classes/CommentsRepository.html":{},"injectables/CommentsService.html":{}}}],["comments",{"_index":1271,"title":{},"body":{"classes/PostsRepository.html":{}}}],["comments._deletedat",{"_index":1273,"title":{},"body":{"classes/PostsRepository.html":{}}}],["comments._post",{"_index":1272,"title":{},"body":{"classes/PostsRepository.html":{}}}],["commentschema",{"_index":395,"title":{},"body":{"classes/Comment.html":{},"modules/CommentsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commentsmodule",{"_index":116,"title":{"modules/CommentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules.html":{},"overview.html":{}}}],["commentsrepository",{"_index":402,"title":{"classes/CommentsRepository.html":{}},"body":{"modules/CommentsModule.html":{},"classes/CommentsRepository.html":{},"injectables/CommentsService.html":{},"coverage.html":{}}}],["commentsresolver",{"_index":403,"title":{"classes/CommentsResolver.html":{}},"body":{"modules/CommentsModule.html":{},"classes/CommentsResolver.html":{},"coverage.html":{}}}],["commentsservice",{"_index":400,"title":{"injectables/CommentsService.html":{}},"body":{"modules/CommentsModule.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"coverage.html":{},"overview.html":{}}}],["common/decorators",{"_index":455,"title":{},"body":{"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/FriendsResolver.html":{},"classes/LikesResolver.html":{},"classes/MessagesResolver.html":{},"classes/PostsResolver.html":{},"classes/RequestsResolver.html":{},"classes/UsersResolver.html":{}}}],["common/exceptions",{"_index":1450,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["common/filters",{"_index":277,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["common/graphql",{"_index":1451,"title":{},"body":{"classes/ProfilesResolver.html":{},"classes/UsersResolver.html":{}}}],["common/guards",{"_index":456,"title":{},"body":{"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/FriendsResolver.html":{},"classes/LikesResolver.html":{},"classes/MessagesResolver.html":{},"classes/PostsResolver.html":{},"classes/ProfilesResolver.html":{},"classes/RequestsResolver.html":{},"classes/UsersResolver.html":{}}}],["common/pipes",{"_index":1843,"title":{},"body":{"classes/UsersResolver.html":{}}}],["comparesync",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparesync(password",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["compression",{"_index":1955,"title":{},"body":{"dependencies.html":{}}}],["cond",{"_index":623,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/PostsRepository.html":{}}}],["conflictexception",{"_index":1123,"title":{},"body":{"classes/MongooseExceptionFilter.html":{}}}],["conflictexception(`${key",{"_index":1131,"title":{},"body":{"classes/MongooseExceptionFilter.html":{}}}],["conflictexception(exception?.response?.message",{"_index":1134,"title":{},"body":{"classes/MongooseExceptionFilter.html":{}}}],["connectedsocket",{"_index":54,"title":{},"body":{"classes/AppGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["connection",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"modules/PubSubModule.html":{}}}],["connecttoredis",{"_index":1510,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["console.log(postresult",{"_index":944,"title":{},"body":{"classes/LikesResolver.html":{}}}],["const",{"_index":74,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"classes/CreateConversation.html":{},"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/FileInfo.html":{},"classes/FriendProfile.html":{},"classes/FriendsProfile.html":{},"classes/FriendsResolver.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/Like.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"injectables/ObjectIdPipe.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"modules/PubSubModule.html":{},"classes/RedisIoAdapter.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":34,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"injectables/ConversationsGateway.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GraphQLException.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(cache_manager",{"_index":71,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"injectables/NotificationsGateway.html":{}}}],["constructor(@injectmodel(comment.name",{"_index":424,"title":{},"body":{"classes/CommentsRepository.html":{}}}],["constructor(@injectmodel(like.name",{"_index":922,"title":{},"body":{"classes/LikesRepository.html":{}}}],["constructor(@injectmodel(message.name",{"_index":1067,"title":{},"body":{"injectables/MessagesRepository.html":{}}}],["constructor(@injectmodel(post.name",{"_index":1255,"title":{},"body":{"classes/PostsRepository.html":{}}}],["constructor(@injectmodel(profile.name",{"_index":1412,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["constructor(@injectmodel(request.name",{"_index":1591,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["constructor(@injectmodel(user.name",{"_index":1808,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["constructor(authservice",{"_index":259,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(cachemanager",{"_index":35,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["constructor(commentmodel",{"_index":411,"title":{},"body":{"classes/CommentsRepository.html":{}}}],["constructor(commentsrepository",{"_index":474,"title":{},"body":{"injectables/CommentsService.html":{}}}],["constructor(commentsservice",{"_index":441,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["constructor(conversationmodel",{"_index":573,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["constructor(conversationsrepository",{"_index":555,"title":{},"body":{"classes/ConversationsProcessor.html":{},"injectables/ConversationsService.html":{},"injectables/ProfilesService.html":{}}}],["constructor(conversationsservice",{"_index":637,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["constructor(friendsservice",{"_index":827,"title":{},"body":{"classes/FriendsResolver.html":{}}}],["constructor(likemodel",{"_index":915,"title":{},"body":{"classes/LikesRepository.html":{}}}],["constructor(likesrepository",{"_index":948,"title":{},"body":{"injectables/LikesService.html":{}}}],["constructor(likesservice",{"_index":929,"title":{},"body":{"classes/LikesResolver.html":{}}}],["constructor(message",{"_index":845,"title":{},"body":{"classes/GraphQLException.html":{}}}],["constructor(messagemodel",{"_index":1054,"title":{},"body":{"injectables/MessagesRepository.html":{}}}],["constructor(messagesrepository",{"_index":1105,"title":{},"body":{"injectables/MessagesService.html":{}}}],["constructor(messagesservice",{"_index":1080,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["constructor(postmodel",{"_index":1239,"title":{},"body":{"classes/PostsRepository.html":{}}}],["constructor(postsrepository",{"_index":1306,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(postsservice",{"_index":1281,"title":{},"body":{"classes/PostsResolver.html":{}}}],["constructor(private",{"_index":286,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"classes/ConversationsProcessor.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"classes/ProfilesProcessor.html":{},"classes/RequestsResolver.html":{},"classes/UsersResolver.html":{}}}],["constructor(profilemodel",{"_index":1393,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["constructor(profilesrepository",{"_index":834,"title":{},"body":{"injectables/FriendsService.html":{},"classes/ProfilesProcessor.html":{}}}],["constructor(profilesservice",{"_index":1439,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["constructor(requestmodel",{"_index":1579,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["constructor(requestsrepository",{"_index":1629,"title":{},"body":{"injectables/RequestsService.html":{}}}],["constructor(requestsservice",{"_index":1606,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["constructor(usermodel",{"_index":1791,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["constructor(usersrepository",{"_index":1855,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"classes/UsersResolver.html":{}}}],["content",{"_index":737,"title":{},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"classes/UpdatePost.html":{}}}],["contentencoding",{"_index":1670,"title":{},"body":{"classes/S3Processor.html":{},"injectables/S3Service.html":{}}}],["contenttype",{"_index":1671,"title":{},"body":{"classes/S3Processor.html":{},"injectables/S3Service.html":{}}}],["context",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["conversation",{"_index":351,"title":{"classes/Conversation.html":{}},"body":{"classes/ChangeNameConversation.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversation.html":{},"classes/FileInfo.html":{},"classes/ListFriendNotInConversation.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"coverage.html":{}}}],["conversation.members",{"_index":531,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"injectables/MessagesGateway.html":{}}}],["conversation.members.length",{"_index":626,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["conversation.name",{"_index":551,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["conversation.save",{"_index":599,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["conversationdocument",{"_index":489,"title":{},"body":{"classes/Conversation.html":{},"injectables/ConversationsRepository.html":{},"miscellaneous/typealiases.html":{}}}],["conversationid",{"_index":513,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"injectables/MessagesRepository.html":{},"injectables/MessagesService.html":{},"classes/PaginationMessages.html":{},"classes/Send.html":{},"classes/SendFiles.html":{}}}],["conversationinput",{"_index":356,"title":{},"body":{"classes/ChangeNameConversation.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversation.html":{},"classes/ListFriendNotInConversation.html":{}}}],["conversationinput.changenameconversation",{"_index":579,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{}}}],["conversationinput.createconversation",{"_index":643,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["conversationinput.listfriendnotinconversation",{"_index":656,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["conversationmodel",{"_index":575,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["conversationqueue",{"_index":666,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["conversationschema",{"_index":491,"title":{},"body":{"classes/Conversation.html":{},"modules/ConversationsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["conversationsgateway",{"_index":493,"title":{"injectables/ConversationsGateway.html":{}},"body":{"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"coverage.html":{},"overview.html":{}}}],["conversationsmodule",{"_index":117,"title":{"modules/ConversationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/MessagesModule.html":{},"modules/ProfilesModule.html":{},"modules.html":{},"overview.html":{}}}],["conversationsprocessor",{"_index":552,"title":{"classes/ConversationsProcessor.html":{}},"body":{"classes/ConversationsProcessor.html":{},"coverage.html":{}}}],["conversationsrepository",{"_index":546,"title":{"injectables/ConversationsRepository.html":{}},"body":{"modules/ConversationsModule.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"injectables/ConversationsService.html":{},"injectables/ProfilesService.html":{},"coverage.html":{},"overview.html":{}}}],["conversationsresolver",{"_index":548,"title":{"classes/ConversationsResolver.html":{}},"body":{"modules/ConversationsModule.html":{},"classes/ConversationsResolver.html":{},"coverage.html":{}}}],["conversationsservice",{"_index":497,"title":{"injectables/ConversationsService.html":{}},"body":{"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"injectables/MessagesGateway.html":{},"coverage.html":{},"overview.html":{}}}],["cookie",{"_index":1957,"title":{},"body":{"dependencies.html":{}}}],["cors",{"_index":67,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AuthGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["count",{"_index":739,"title":{},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PostDto.html":{},"classes/UpdatePost.html":{}}}],["countcomment",{"_index":1190,"title":{},"body":{"classes/Post.html":{},"classes/PostsRepository.html":{}}}],["countfriend",{"_index":1421,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["countlike",{"_index":740,"title":{},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostsRepository.html":{},"classes/UpdatePost.html":{}}}],["countmember",{"_index":614,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["countmessage",{"_index":1076,"title":{},"body":{"injectables/MessagesRepository.html":{}}}],["coverage",{"_index":1892,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":694,"title":{"classes/Create.html":{}},"body":{"classes/Create.html":{},"classes/Friend.html":{},"classes/Obtain.html":{},"classes/Search.html":{},"classes/_Upload_.html":{},"coverage.html":{}}}],["createadapter",{"_index":1520,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createadapter(pubclient",{"_index":1531,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createclient",{"_index":1523,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createconversation",{"_index":357,"title":{"classes/CreateConversation.html":{}},"body":{"classes/ChangeNameConversation.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversation.html":{},"classes/ListFriendNotInConversation.html":{},"coverage.html":{}}}],["createconversation(infoconversation",{"_index":581,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{}}}],["createdat",{"_index":365,"title":{},"body":{"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/Conversation.html":{},"injectables/ConversationsRepository.html":{},"classes/FileInfo.html":{},"classes/Like.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesRepository.html":{},"classes/Post.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"classes/Profile.html":{},"classes/Request.html":{},"classes/User.html":{}}}],["createinput",{"_index":273,"title":{"classes/CreateInput.html":{}},"body":{"classes/AuthResolver.html":{},"classes/CreateInput.html":{},"injectables/ProfilesRepository.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createioserver",{"_index":1511,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createioserver(port",{"_index":1515,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createparamdecorator",{"_index":2058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":728,"title":{"classes/CreatePost.html":{}},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PostDto.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdatePost.html":{},"coverage.html":{}}}],["createpost(post",{"_index":1242,"title":{},"body":{"classes/PostsRepository.html":{},"injectables/PostsService.html":{}}}],["createpost(user",{"_index":1283,"title":{},"body":{"classes/PostsResolver.html":{}}}],["createprofile",{"_index":1388,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["createprofile(createinput",{"_index":1398,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["createreadstream",{"_index":1687,"title":{},"body":{"injectables/S3Service.html":{}}}],["createrequest",{"_index":750,"title":{"classes/CreateRequest.html":{}},"body":{"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{},"coverage.html":{}}}],["createuniontype",{"_index":1327,"title":{},"body":{"classes/Profile.html":{},"miscellaneous/variables.html":{}}}],["createuser",{"_index":1784,"title":{},"body":{"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["createuser(@args('createinput",{"_index":1853,"title":{},"body":{"classes/UsersResolver.html":{}}}],["createuser(createinput",{"_index":1794,"title":{},"body":{"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["credentials",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"modules/ProfilesModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["crypto",{"_index":284,"title":{},"body":{"classes/AuthResolver.html":{}}}],["crypto.createhash('md5').update(data).digest('hex",{"_index":297,"title":{},"body":{"classes/AuthResolver.html":{}}}],["csrfprevention",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["csurf",{"_index":1959,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":231,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.req.user",{"_index":238,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx?.req",{"_index":233,"title":{},"body":{"guards/AuthGuard.html":{}}}],["ctx?.req?.user",{"_index":2061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":448,"title":{"classes/Current.html":{}},"body":{"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/Current.html":{},"classes/FriendsResolver.html":{},"classes/LikesResolver.html":{},"classes/MessagesResolver.html":{},"classes/OAuthInfo.html":{},"classes/PostsResolver.html":{},"classes/RequestsResolver.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["data",{"_index":294,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/S3Service.html":{}}}],["data.location",{"_index":1713,"title":{},"body":{"injectables/S3Service.html":{}}}],["date",{"_index":373,"title":{},"body":{"classes/Comment.html":{},"classes/Like.html":{},"classes/Post.html":{},"classes/User.html":{}}}],["date.now",{"_index":430,"title":{},"body":{"classes/CommentsRepository.html":{},"injectables/UsersRepository.html":{}}}],["date.now().tostring",{"_index":1262,"title":{},"body":{"classes/PostsRepository.html":{}}}],["date.now()}.${extensionfile",{"_index":1703,"title":{},"body":{"injectables/S3Service.html":{}}}],["date})@field(undefined",{"_index":376,"title":{},"body":{"classes/Comment.html":{},"classes/Like.html":{}}}],["debug",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["decode",{"_index":224,"title":{},"body":{"guards/AuthGuard.html":{}}}],["decorators",{"_index":13,"title":{},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"injectables/AuthGateway.html":{},"classes/AuthResolver.html":{},"classes/Comment.html":{},"classes/CommentsResolver.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"classes/ConversationsProcessor.html":{},"classes/ConversationsResolver.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreateRequest.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"classes/FriendsResolver.html":{},"classes/GetPosts.html":{},"classes/InfoRequest.html":{},"classes/Like.html":{},"classes/LikesResolver.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"classes/MessagesResolver.html":{},"injectables/NotificationsGateway.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"classes/PostsResolver.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesProcessor.html":{},"classes/ProfilesResolver.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/PublisherSubscriptions.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"classes/RequestsResolver.html":{},"classes/S3Processor.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/User.html":{},"classes/UserInput.html":{},"classes/UsersResolver.html":{},"classes/_Upload_.html":{}}}],["decorators/isobjectid.decorator",{"_index":731,"title":{},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PaginationMessages.html":{},"classes/PostDto.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/UpdatePost.html":{},"classes/UserInput.html":{}}}],["default",{"_index":362,"title":{},"body":{"classes/ChangeNameConversation.html":{},"classes/CreateConversation.html":{},"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/ListFriendNotInConversation.html":{},"injectables/MessagesRepository.html":{},"classes/MongooseExceptionFilter.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/Request.html":{},"classes/RetrieveRequest.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":875,"title":{},"body":{"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{}}}],["defaultvalue",{"_index":749,"title":{},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PostDto.html":{},"classes/PostsResolver.html":{},"classes/UpdatePost.html":{}}}],["defined",{"_index":15,"title":{},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"injectables/AppService.html":{},"injectables/AuthGateway.html":{},"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreateRequest.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GetPosts.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/InfoRequest.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"injectables/ObjectIdPipe.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/PublisherSubscriptions.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/User.html":{},"classes/UserInput.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{}}}],["deletecomment",{"_index":409,"title":{},"body":{"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{}}}],["deletecomment(_id",{"_index":418,"title":{},"body":{"classes/CommentsRepository.html":{},"injectables/CommentsService.html":{}}}],["deletecomment(user",{"_index":450,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["deletedat",{"_index":366,"title":{},"body":{"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/Like.html":{},"classes/Post.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{}}}],["deletedcount",{"_index":777,"title":{},"body":{"classes/DeleteResult.html":{}}}],["deleteentireuser",{"_index":1785,"title":{},"body":{"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["deletepost",{"_index":744,"title":{"classes/DeletePost.html":{}},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PostDto.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdatePost.html":{},"coverage.html":{}}}],["deletepost(post",{"_index":1245,"title":{},"body":{"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["deleteresult",{"_index":774,"title":{"classes/DeleteResult.html":{}},"body":{"classes/DeleteResult.html":{},"classes/LikesRepository.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["deleteuser",{"_index":1786,"title":{},"body":{"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["deleteuser(@args('userinput",{"_index":1848,"title":{},"body":{"classes/UsersResolver.html":{}}}],["deleteuser(userinput",{"_index":1797,"title":{},"body":{"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":112,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ConversationsModule.html":{},"modules/FriendsModule.html":{},"modules/LikesModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/PostsModule.html":{},"modules/ProfilesModule.html":{},"modules/RequestsModule.html":{},"modules/S3Module.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":736,"title":{},"body":{"classes/CreatePost.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/OAuthInfo.html":{},"classes/PostDto.html":{},"classes/UpdatePost.html":{},"properties.html":{}}}],["detail",{"_index":2017,"title":{},"body":{"index.html":{}}}],["development",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["devtoolsmodule",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["devtoolsmodule.register",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["discord",{"_index":1496,"title":{},"body":{"classes/Provider.html":{},"classes/ProviderInput.html":{},"miscellaneous/typealiases.html":{}}}],["document",{"_index":897,"title":{},"body":{"classes/Like.html":{},"classes/LikesRepository.html":{}}}],["documentation",{"_index":1893,"title":{},"body":{"coverage.html":{}}}],["driver",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/logininput.input",{"_index":285,"title":{},"body":{"classes/AuthResolver.html":{}}}],["dto/requests.input",{"_index":1619,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["dynamiclike",{"_index":899,"title":{},"body":{"classes/Like.html":{},"miscellaneous/typealiases.html":{}}}],["dynamicpost",{"_index":896,"title":{},"body":{"classes/Like.html":{},"classes/Post.html":{},"miscellaneous/typealiases.html":{}}}],["dynamicprofile",{"_index":794,"title":{},"body":{"classes/FileInfo.html":{},"classes/Like.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/Post.html":{},"classes/Profile.html":{},"classes/Request.html":{},"miscellaneous/typealiases.html":{}}}],["each",{"_index":628,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["email",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"classes/Create.html":{},"classes/CreateInput.html":{},"classes/Friend.html":{},"classes/OAuthInput.html":{},"classes/Obtain.html":{},"classes/Profile.html":{},"injectables/ProfilesRepository.html":{},"classes/Search.html":{},"classes/User.html":{},"classes/UserInput.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/_Upload_.html":{}}}],["empty",{"_index":1648,"title":{},"body":{"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/User.html":{}}}],["encoding",{"_index":781,"title":{},"body":{"classes/File.html":{},"classes/ProfilesResolver.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{}}}],["eq",{"_index":602,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/PostsRepository.html":{}}}],["err",{"_index":1704,"title":{},"body":{"injectables/S3Service.html":{}}}],["error",{"_index":240,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/NotificationsGateway.html":{},"injectables/S3Service.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error('kec",{"_index":1120,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["error.validationerror",{"_index":1876,"title":{},"body":{"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["exception",{"_index":855,"title":{},"body":{"classes/GraphQLExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exception.code",{"_index":1126,"title":{},"body":{"classes/MongooseExceptionFilter.html":{}}}],["exception.errors[key].message",{"_index":1886,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["exception.getstatus",{"_index":859,"title":{},"body":{"classes/GraphQLExceptionFilter.html":{}}}],["exceptionfilter",{"_index":852,"title":{},"body":{"classes/GraphQLExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exceptions/graphql.exception",{"_index":856,"title":{},"body":{"classes/GraphQLExceptionFilter.html":{}}}],["executioncontext",{"_index":219,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1133,"title":{},"body":{"classes/MongooseExceptionFilter.html":{}}}],["existemail",{"_index":1821,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["existemail.providers.push",{"_index":1822,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["existprovider",{"_index":1817,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["expiresin",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":20,"title":{},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthGateway.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"modules/CommentsModule.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"modules/FriendsModule.html":{},"classes/FriendsProfile.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"modules/NotificationsModule.html":{},"classes/NotificationsResolver.html":{},"injectables/NotificationsService.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"injectables/ObjectIdPipe.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"modules/PubSubModule.html":{},"classes/PublisherSubscriptions.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/RetrieveRequest.html":{},"modules/S3Module.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{}}}],["exports",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/ProfilesModule.html":{},"modules/PubSubModule.html":{},"modules/RequestsModule.html":{},"modules/S3Module.html":{},"modules/UsersModule.html":{}}}],["expr",{"_index":601,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/PostsRepository.html":{}}}],["express",{"_index":869,"title":{},"body":{"injectables/HomeMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":361,"title":{},"body":{"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"classes/CreateConversation.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/FileInfo.html":{},"classes/FriendsProfile.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/ListFriendNotInConversation.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/OAuthInfo.html":{},"classes/PostDto.html":{},"classes/RedisIoAdapter.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{}}}],["extensionfile",{"_index":1699,"title":{},"body":{"injectables/S3Service.html":{}}}],["f",{"_index":1322,"title":{},"body":{"classes/Profile.html":{}}}],["facebook",{"_index":1493,"title":{},"body":{"classes/Provider.html":{},"classes/ProviderInput.html":{},"miscellaneous/typealiases.html":{}}}],["false",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"classes/Conversation.html":{},"injectables/ConversationsService.html":{},"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/FileInfo.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/LikesResolver.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/Request.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{}}}],["false})@field(undefined",{"_index":1540,"title":{},"body":{"classes/Request.html":{}}}],["false})@isobjectid",{"_index":1209,"title":{},"body":{"classes/PostDto.html":{}}}],["false})@prop({required",{"_index":1731,"title":{},"body":{"classes/User.html":{}}}],["false})@prop({type",{"_index":966,"title":{},"body":{"classes/Message.html":{},"classes/Post.html":{}}}],["false})@usefilters(mongooseexceptionfilter",{"_index":274,"title":{},"body":{"classes/AuthResolver.html":{}}}],["fastify",{"_index":1939,"title":{},"body":{"dependencies.html":{}}}],["fetch",{"_index":1977,"title":{},"body":{"dependencies.html":{}}}],["field",{"_index":14,"title":{},"body":{"classes/AccessTokenResponse.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"classes/Conversation.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/Like.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/Profile.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/PublisherSubscriptions.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"classes/RetrieveRequest.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{}}}],["field()@isstring",{"_index":1717,"title":{},"body":{"classes/Send.html":{}}}],["field()@isstring()@isobjectid",{"_index":1185,"title":{},"body":{"classes/PaginationMessages.html":{}}}],["field(undefined",{"_index":371,"title":{},"body":{"classes/Comment.html":{},"classes/Conversation.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreateRequest.html":{},"classes/FileInfo.html":{},"classes/InfoRequest.html":{},"classes/Like.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessagesConversation.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PublisherSubscriptions.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/User.html":{},"classes/_Upload_.html":{}}}],["field(undefined)@isboolean",{"_index":1722,"title":{},"body":{"classes/Status.html":{}}}],["field(undefined)@isobjectid",{"_index":1715,"title":{},"body":{"classes/Send.html":{},"classes/SendFiles.html":{}}}],["field(undefined)@isoptional",{"_index":709,"title":{},"body":{"classes/CreateConversation.html":{}}}],["field(undefined)@isstring()@isnotempty",{"_index":754,"title":{},"body":{"classes/CreateRequest.html":{}}}],["field(undefined)@prop({default",{"_index":1729,"title":{},"body":{"classes/User.html":{}}}],["field(undefined)@prop({type",{"_index":1198,"title":{},"body":{"classes/Post.html":{}}}],["field({name",{"_index":1161,"title":{},"body":{"classes/OAuthInfo.html":{}}}],["field({nullable",{"_index":785,"title":{},"body":{"classes/File.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/User.html":{}}}],["fieldmiddleware",{"_index":2062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{"classes/File.html":{}},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthGateway.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"modules/CommentsModule.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"modules/FriendsModule.html":{},"classes/FriendsProfile.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"modules/NotificationsModule.html":{},"classes/NotificationsResolver.html":{},"injectables/NotificationsService.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"injectables/ObjectIdPipe.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"modules/PubSubModule.html":{},"classes/PublisherSubscriptions.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/RetrieveRequest.html":{},"modules/S3Module.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{},"coverage.html":{}}}],["file.filename",{"_index":1688,"title":{},"body":{"injectables/S3Service.html":{}}}],["fileimage",{"_index":1686,"title":{},"body":{"injectables/S3Service.html":{},"miscellaneous/typealiases.html":{}}}],["fileinfo",{"_index":790,"title":{"classes/FileInfo.html":{}},"body":{"classes/FileInfo.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"coverage.html":{}}}],["filename",{"_index":782,"title":{},"body":{"classes/File.html":{},"classes/ProfilesResolver.html":{},"injectables/S3Service.html":{}}}],["filename.replace(/\\.(.*)$/g",{"_index":1701,"title":{},"body":{"injectables/S3Service.html":{}}}],["files",{"_index":798,"title":{},"body":{"classes/FileInfo.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"injectables/S3Service.html":{}}}],["fileupload",{"_index":700,"title":{},"body":{"classes/Create.html":{},"classes/Friend.html":{},"classes/MessagesResolver.html":{},"classes/Obtain.html":{},"classes/ProfilesResolver.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"classes/_Upload_.html":{}}}],["filter",{"_index":620,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/PostsRepository.html":{}}}],["filterresult",{"_index":93,"title":{},"body":{"classes/AppGateway.html":{}}}],["filterresult.includes(client.id",{"_index":97,"title":{},"body":{"classes/AppGateway.html":{}}}],["filterresult.push(client.id",{"_index":98,"title":{},"body":{"classes/AppGateway.html":{}}}],["findoneandupdate",{"_index":1824,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["first",{"_index":610,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{},"modules/UsersModule.html":{}}}],["foreignfield",{"_index":436,"title":{},"body":{"classes/CommentsRepository.html":{},"injectables/ConversationsRepository.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{},"injectables/RequestsRepository.html":{}}}],["format('x",{"_index":1772,"title":{},"body":{"modules/UsersModule.html":{}}}],["forwardref",{"_index":506,"title":{},"body":{"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"modules/MessagesModule.html":{},"modules/ProfilesModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":305,"title":{},"body":{"classes/AuthResolver.html":{}}}],["friend",{"_index":490,"title":{"classes/Friend.html":{}},"body":{"classes/Conversation.html":{},"injectables/ConversationsRepository.html":{},"classes/Create.html":{},"classes/Friend.html":{},"injectables/NotificationsGateway.html":{},"classes/Obtain.html":{},"classes/ProfilesResolver.html":{},"injectables/RequestsGateway.html":{},"classes/Search.html":{},"classes/_Upload_.html":{},"coverage.html":{}}}],["friend'})@field(undefined",{"_index":485,"title":{},"body":{"classes/Conversation.html":{}}}],["friend.friendid",{"_index":624,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/ProfilesResolver.html":{}}}],["frienddocument",{"_index":812,"title":{},"body":{"classes/FriendProfile.html":{},"miscellaneous/typealiases.html":{}}}],["friendid",{"_index":585,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/Create.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"classes/Obtain.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"injectables/ProfilesService.html":{},"injectables/RequestsService.html":{},"classes/Search.html":{},"classes/_Upload_.html":{},"miscellaneous/variables.html":{}}}],["friendisonline",{"_index":496,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["friendisonline(@messagebody",{"_index":536,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["friendisonline(payload",{"_index":502,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["friendprofile",{"_index":808,"title":{"classes/FriendProfile.html":{}},"body":{"classes/FriendProfile.html":{},"modules/FriendsModule.html":{},"classes/Profile.html":{},"classes/ProfilesResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["friends",{"_index":824,"title":{},"body":{"classes/FriendsProfile.html":{},"injectables/PostsGateway.html":{},"classes/Profile.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{}}}],["friends.friendid",{"_index":1420,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["friends/friends.schema",{"_index":1328,"title":{},"body":{"classes/Profile.html":{}}}],["friendschema",{"_index":813,"title":{},"body":{"classes/FriendProfile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["friendsmodule",{"_index":118,"title":{"modules/FriendsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FriendsModule.html":{},"modules/ProfilesModule.html":{},"modules.html":{},"overview.html":{}}}],["friendsprofile",{"_index":821,"title":{"classes/FriendsProfile.html":{}},"body":{"classes/FriendsProfile.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"injectables/ProfilesRepository.html":{},"coverage.html":{}}}],["friendsresolver",{"_index":820,"title":{"classes/FriendsResolver.html":{}},"body":{"modules/FriendsModule.html":{},"classes/FriendsResolver.html":{},"coverage.html":{}}}],["friendsservice",{"_index":818,"title":{"injectables/FriendsService.html":{}},"body":{"modules/FriendsModule.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"coverage.html":{},"overview.html":{}}}],["function",{"_index":1368,"title":{},"body":{"modules/ProfilesModule.html":{},"injectables/S3Service.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["functions",{"_index":2001,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["getcomments",{"_index":410,"title":{},"body":{"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{}}}],["getcomments(@args",{"_index":469,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["getcomments(post",{"_index":420,"title":{},"body":{"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{}}}],["getconversationbyfriend",{"_index":567,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyfriend(profileid",{"_index":584,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyid",{"_index":568,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyid(conversationid",{"_index":587,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyidnoref",{"_index":569,"title":{},"body":{"injectables/ConversationsRepository.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyidnoref(conversationid",{"_index":589,"title":{},"body":{"injectables/ConversationsRepository.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyprofileid",{"_index":570,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyprofileid(id",{"_index":591,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["getconversationbyprofileid(profileid",{"_index":647,"title":{},"body":{"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{}}}],["getentirefriends",{"_index":826,"title":{},"body":{"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"injectables/ProfilesRepository.html":{}}}],["getentirefriends(id",{"_index":837,"title":{},"body":{"injectables/FriendsService.html":{},"injectables/ProfilesRepository.html":{}}}],["getentirefriends(user",{"_index":829,"title":{},"body":{"classes/FriendsResolver.html":{}}}],["getentireprofile",{"_index":1437,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["getexecutioncontext",{"_index":1906,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getexecutioncontext(headername",{"_index":2006,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getfriendinconversation",{"_index":571,"title":{},"body":{"injectables/ConversationsRepository.html":{},"injectables/ConversationsService.html":{}}}],["getfriendinconversation(conversationid",{"_index":593,"title":{},"body":{"injectables/ConversationsRepository.html":{},"injectables/ConversationsService.html":{}}}],["getlistfriendnotinconversation",{"_index":572,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{}}}],["getlistfriendnotinconversation(conversationid",{"_index":595,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{}}}],["getlistusers",{"_index":1787,"title":{},"body":{"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["getme",{"_index":1832,"title":{},"body":{"classes/UsersResolver.html":{}}}],["getme(@authorization",{"_index":1844,"title":{},"body":{"classes/UsersResolver.html":{}}}],["getme(user",{"_index":1839,"title":{},"body":{"classes/UsersResolver.html":{}}}],["getmessagesbyconversationid",{"_index":1051,"title":{},"body":{"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{}}}],["getmessagesbyconversationid(conversationid",{"_index":1057,"title":{},"body":{"injectables/MessagesRepository.html":{},"injectables/MessagesService.html":{}}}],["getmessagesbyconversationid(payload",{"_index":1083,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["getpost",{"_index":746,"title":{"classes/GetPost.html":{}},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PostDto.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"classes/UpdatePost.html":{},"coverage.html":{}}}],["getpost(post",{"_index":1248,"title":{},"body":{"classes/PostsRepository.html":{},"injectables/PostsService.html":{}}}],["getposts",{"_index":748,"title":{"classes/GetPosts.html":{}},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PostDto.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdatePost.html":{},"coverage.html":{}}}],["getposts(payload",{"_index":1286,"title":{},"body":{"classes/PostsResolver.html":{}}}],["getposts(userid",{"_index":1251,"title":{},"body":{"classes/PostsRepository.html":{},"injectables/PostsService.html":{}}}],["getprofile",{"_index":1389,"title":{},"body":{"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{}}}],["getprofile(profileinput",{"_index":1402,"title":{},"body":{"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{}}}],["getrequests",{"_index":1577,"title":{},"body":{"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{}}}],["getrequests(info",{"_index":1586,"title":{},"body":{"injectables/RequestsRepository.html":{},"injectables/RequestsService.html":{}}}],["getters",{"_index":1259,"title":{},"body":{"classes/PostsRepository.html":{}}}],["getting",{"_index":2012,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":1788,"title":{},"body":{"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["getuser(@args('userinput",{"_index":1845,"title":{},"body":{"classes/UsersResolver.html":{}}}],["getuser(userinput",{"_index":1800,"title":{},"body":{"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["github",{"_index":1495,"title":{},"body":{"classes/Provider.html":{},"classes/ProviderInput.html":{},"miscellaneous/typealiases.html":{}}}],["global",{"_index":1502,"title":{},"body":{"modules/PubSubModule.html":{}}}],["google",{"_index":1494,"title":{},"body":{"classes/Provider.html":{},"classes/ProviderInput.html":{},"miscellaneous/typealiases.html":{}}}],["gqlargumentshost.create(host).getcontext",{"_index":2060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gqlexecutioncontext",{"_index":223,"title":{},"body":{"guards/AuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":228,"title":{},"body":{"guards/AuthGuard.html":{}}}],["graph",{"_index":2024,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/Create.html":{},"classes/Friend.html":{},"classes/LikesResolver.html":{},"classes/MessagesResolver.html":{},"classes/Obtain.html":{},"classes/PostsResolver.html":{},"classes/ProfilesResolver.html":{},"modules/PubSubModule.html":{},"classes/RequestsResolver.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{},"dependencies.html":{}}}],["graphqlexception",{"_index":842,"title":{"classes/GraphQLException.html":{}},"body":{"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"classes/ProfilesResolver.html":{},"coverage.html":{}}}],["graphqlexception(exception.getresponse().tostring",{"_index":858,"title":{},"body":{"classes/GraphQLExceptionFilter.html":{}}}],["graphqlexceptionfilter",{"_index":850,"title":{"classes/GraphQLExceptionFilter.html":{}},"body":{"classes/GraphQLExceptionFilter.html":{},"coverage.html":{}}}],["graphqlmodule",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlupload",{"_index":701,"title":{},"body":{"classes/Create.html":{},"classes/Friend.html":{},"classes/MessagesResolver.html":{},"classes/Obtain.html":{},"classes/ProfilesResolver.html":{},"classes/Search.html":{},"classes/_Upload_.html":{}}}],["group",{"_index":608,"title":{},"body":{"injectables/ConversationsRepository.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{}}}],["guard",{"_index":213,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":215,"title":{},"body":{"guards/AuthGuard.html":{}}}],["handleacceptcall",{"_index":978,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handleacceptcall(@messagebody",{"_index":1029,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handleacceptcall(payload",{"_index":986,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handleaddfriend",{"_index":1339,"title":{},"body":{"injectables/ProfilesGateway.html":{},"classes/ProfilesProcessor.html":{},"injectables/RequestsGateway.html":{}}}],["handleaddfriend(job",{"_index":1377,"title":{},"body":{"classes/ProfilesProcessor.html":{}}}],["handleaddfriend(payload",{"_index":1342,"title":{},"body":{"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["handleconnection",{"_index":31,"title":{},"body":{"classes/AppGateway.html":{}}}],["handleconnection(@connectedsocket",{"_index":73,"title":{},"body":{"classes/AppGateway.html":{}}}],["handleconnection(client",{"_index":44,"title":{},"body":{"classes/AppGateway.html":{}}}],["handledisconnect",{"_index":32,"title":{},"body":{"classes/AppGateway.html":{}}}],["handledisconnect(@connectedsocket",{"_index":100,"title":{},"body":{"classes/AppGateway.html":{}}}],["handledisconnect(client",{"_index":49,"title":{},"body":{"classes/AppGateway.html":{}}}],["handlelogout",{"_index":33,"title":{},"body":{"classes/AppGateway.html":{}}}],["handlelogout(client",{"_index":51,"title":{},"body":{"classes/AppGateway.html":{}}}],["handlerejectcall",{"_index":979,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handlerejectcall(@messagebody",{"_index":1032,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handlerejectcall(payload",{"_index":989,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handleselfreject",{"_index":980,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handleselfreject(@messagebody",{"_index":1034,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handleselfreject(payload",{"_index":992,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handlesendfiles",{"_index":981,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handlesendfiles(payload",{"_index":995,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handlesendmessage",{"_index":982,"title":{},"body":{"injectables/MessagesGateway.html":{},"injectables/PostsGateway.html":{}}}],["handlesendmessage(payload",{"_index":998,"title":{},"body":{"injectables/MessagesGateway.html":{},"injectables/PostsGateway.html":{}}}],["handlesendnotification",{"_index":1137,"title":{},"body":{"injectables/NotificationsGateway.html":{}}}],["handlesendnotification(payload",{"_index":1139,"title":{},"body":{"injectables/NotificationsGateway.html":{}}}],["handlestartcall",{"_index":983,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handlestartcall(@messagebody",{"_index":1020,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handlestartcall(payload",{"_index":1001,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handlestopcall",{"_index":984,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handlestopcall(@messagebody",{"_index":1036,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handlestopcall(payload",{"_index":1004,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["handleunfriend",{"_index":1340,"title":{},"body":{"injectables/ProfilesGateway.html":{}}}],["handleunfriend(payload",{"_index":1345,"title":{},"body":{"injectables/ProfilesGateway.html":{}}}],["handleupdateavatar",{"_index":554,"title":{},"body":{"classes/ConversationsProcessor.html":{},"classes/ProfilesProcessor.html":{}}}],["handleupdateavatar(job",{"_index":557,"title":{},"body":{"classes/ConversationsProcessor.html":{},"classes/ProfilesProcessor.html":{}}}],["handleuploadfile",{"_index":1659,"title":{},"body":{"classes/S3Processor.html":{}}}],["handleuploadfile(job",{"_index":1660,"title":{},"body":{"classes/S3Processor.html":{}}}],["hash",{"_index":296,"title":{},"body":{"classes/AuthResolver.html":{}}}],["hashsync",{"_index":1764,"title":{},"body":{"modules/UsersModule.html":{}}}],["hashsync(password",{"_index":1781,"title":{},"body":{"modules/UsersModule.html":{}}}],["headername",{"_index":2007,"title":{},"body":{"miscellaneous/functions.html":{}}}],["headers",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{}}}],["headers?.authorization",{"_index":235,"title":{},"body":{"guards/AuthGuard.html":{}}}],["headers?.authorization)?.replace('bearer",{"_index":236,"title":{},"body":{"guards/AuthGuard.html":{}}}],["helmet",{"_index":1967,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":2019,"title":{},"body":{"index.html":{}}}],["homemiddleware",{"_index":860,"title":{"injectables/HomeMiddleware.html":{}},"body":{"injectables/HomeMiddleware.html":{},"coverage.html":{}}}],["host",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"modules/PubSubModule.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["httpexception",{"_index":844,"title":{},"body":{"classes/GraphQLException.html":{}}}],["httpstatus",{"_index":847,"title":{},"body":{"classes/GraphQLException.html":{},"classes/ProfilesResolver.html":{}}}],["httpstatus.not_acceptable",{"_index":1470,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["id",{"_index":301,"title":{},"body":{"classes/AuthResolver.html":{},"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"classes/Create.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/InfoRequest.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"injectables/LikesService.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesRepository.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/PublisherSubscriptions.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RetrieveRequest.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/_Upload_.html":{}}}],["identifier",{"_index":1894,"title":{},"body":{"coverage.html":{}}}],["idpublisher",{"_index":79,"title":{},"body":{"classes/AppGateway.html":{}}}],["id}.${provider}.${process.env.secret",{"_index":302,"title":{},"body":{"classes/AuthResolver.html":{}}}],["image",{"_index":1077,"title":{},"body":{"injectables/MessagesRepository.html":{},"classes/ProfilesResolver.html":{}}}],["image)\\/(png|jpg|jpeg|webp))|((text)\\/(plain))|((application)\\/(pdf)))$/g",{"_index":1009,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["implements",{"_index":25,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/ObjectIdPipe.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/ValidationExceptionFilter.html":{}}}],["import",{"_index":17,"title":{},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthGateway.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"modules/CommentsModule.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"modules/FriendsModule.html":{},"classes/FriendsProfile.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"modules/NotificationsModule.html":{},"classes/NotificationsResolver.html":{},"injectables/NotificationsService.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"injectables/ObjectIdPipe.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"modules/PubSubModule.html":{},"classes/PublisherSubscriptions.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/RetrieveRequest.html":{},"modules/S3Module.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{}}}],["imports",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ConversationsModule.html":{},"modules/FriendsModule.html":{},"modules/LikesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/ProfilesModule.html":{},"modules/RequestsModule.html":{},"modules/S3Module.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"injectables/AppService.html":{},"injectables/AuthGateway.html":{},"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreateRequest.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GetPosts.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/InfoRequest.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"injectables/ObjectIdPipe.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/PublisherSubscriptions.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/User.html":{},"classes/UserInput.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthGateway.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"modules/CommentsModule.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"modules/FriendsModule.html":{},"classes/FriendsProfile.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"modules/NotificationsModule.html":{},"classes/NotificationsResolver.html":{},"injectables/NotificationsService.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"injectables/ObjectIdPipe.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"modules/PubSubModule.html":{},"classes/PublisherSubscriptions.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/RetrieveRequest.html":{},"modules/S3Module.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{}}}],["info.file",{"_index":1017,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["info.type",{"_index":1011,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["info.userreceive",{"_index":1621,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["info?.userreceive",{"_index":1620,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["infoconversation",{"_index":583,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{}}}],["inforequest",{"_index":762,"title":{"classes/InfoRequest.html":{}},"body":{"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{},"coverage.html":{}}}],["inject",{"_index":59,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"classes/CommentsResolver.html":{},"injectables/ConversationsGateway.html":{},"classes/ConversationsResolver.html":{},"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/LikesResolver.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"classes/PostsResolver.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesResolver.html":{},"injectables/RequestsGateway.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{},"injectables/UsersService.html":{}}}],["inject('pubsub",{"_index":651,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["inject(cache_manager",{"_index":509,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesResolver.html":{},"injectables/RequestsGateway.html":{}}}],["inject(forwardref",{"_index":510,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/UsersService.html":{}}}],["inject(pub_sub",{"_index":461,"title":{},"body":{"classes/CommentsResolver.html":{},"classes/LikesResolver.html":{},"classes/PostsResolver.html":{}}}],["injectable",{"_index":200,"title":{"injectables/AppService.html":{},"injectables/AuthGateway.html":{},"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"injectables/ConversationsService.html":{},"injectables/FriendsService.html":{},"injectables/HomeMiddleware.html":{},"injectables/LikesService.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsGateway.html":{},"injectables/NotificationsService.html":{},"injectables/ObjectIdPipe.html":{},"injectables/PostsGateway.html":{},"injectables/PostsService.html":{},"injectables/ProfilesGateway.html":{},"injectables/ProfilesRepository.html":{},"injectables/ProfilesService.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"injectables/S3Service.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthGateway.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"injectables/ConversationsService.html":{},"injectables/FriendsService.html":{},"injectables/HomeMiddleware.html":{},"injectables/LikesService.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsGateway.html":{},"injectables/NotificationsService.html":{},"injectables/ObjectIdPipe.html":{},"injectables/PostsGateway.html":{},"injectables/PostsService.html":{},"injectables/ProfilesGateway.html":{},"injectables/ProfilesRepository.html":{},"injectables/ProfilesService.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"injectables/S3Service.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":202,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthGateway.html":{},"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"injectables/ConversationsService.html":{},"injectables/FriendsService.html":{},"injectables/HomeMiddleware.html":{},"injectables/LikesService.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsGateway.html":{},"injectables/NotificationsService.html":{},"injectables/ObjectIdPipe.html":{},"injectables/PostsGateway.html":{},"injectables/PostsService.html":{},"injectables/ProfilesGateway.html":{},"injectables/ProfilesRepository.html":{},"injectables/ProfilesService.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"injectables/S3Service.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":422,"title":{},"body":{"classes/CommentsRepository.html":{},"injectables/ConversationsRepository.html":{},"classes/LikesRepository.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{},"injectables/RequestsRepository.html":{},"injectables/UsersRepository.html":{}}}],["injectmodel(conversation.name",{"_index":597,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["injectqueue",{"_index":679,"title":{},"body":{"injectables/ConversationsService.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{}}}],["injectqueue('conversation",{"_index":680,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["injectqueue('profile",{"_index":1454,"title":{},"body":{"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{}}}],["input",{"_index":621,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/PostsRepository.html":{}}}],["inputtype",{"_index":349,"title":{},"body":{"classes/ChangeNameConversation.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/DeletePost.html":{},"classes/Friend.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/OAuthInput.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/PostDto.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/PublisherSubscriptions.html":{},"classes/RetrieveRequest.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/UserInput.html":{},"classes/_Upload_.html":{}}}],["installsubscriptionhandlers",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["instanceof",{"_index":2065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instruction",{"_index":2018,"title":{},"body":{"index.html":{}}}],["integration",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["interactpost",{"_index":747,"title":{"classes/InteractPost.html":{}},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PostDto.html":{},"classes/UpdatePost.html":{},"coverage.html":{}}}],["intersectiontype",{"_index":758,"title":{},"body":{"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/InfoRequest.html":{},"classes/OAuthInfo.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{}}}],["intersectiontype(inforequest",{"_index":768,"title":{},"body":{"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{}}}],["intersectiontype(user",{"_index":773,"title":{},"body":{"classes/Current.html":{},"classes/OAuthInfo.html":{}}}],["invalid",{"_index":92,"title":{},"body":{"classes/AppGateway.html":{},"classes/AuthResolver.html":{},"classes/ProfilesResolver.html":{}}}],["invitorid",{"_index":514,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["ioadapter",{"_index":1508,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["isaccept",{"_index":766,"title":{},"body":{"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/Request.html":{},"injectables/RequestsRepository.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{}}}],["isboolean",{"_index":759,"title":{},"body":{"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{}}}],["iscorrect",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":721,"title":{},"body":{"classes/CreateInput.html":{},"classes/OAuthInput.html":{},"classes/UserInput.html":{}}}],["isempty",{"_index":62,"title":{},"body":{"classes/AppGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{}}}],["isempty(listsocketid",{"_index":529,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["isempty(profile",{"_index":1422,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["isempty(removedlist",{"_index":105,"title":{},"body":{"classes/AppGateway.html":{}}}],["isempty(result",{"_index":605,"title":{},"body":{"injectables/ConversationsRepository.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{}}}],["isempty(type.match(validextfilepattern",{"_index":1012,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["isglobal",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["isjwt",{"_index":1757,"title":{},"body":{"classes/UserInput.html":{}}}],["isliked",{"_index":1191,"title":{},"body":{"classes/Post.html":{},"classes/PostsRepository.html":{}}}],["isnonce",{"_index":1908,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isnonce(validationoptions",{"_index":2009,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isnonceconstraint",{"_index":872,"title":{"classes/IsNonceConstraint.html":{}},"body":{"classes/IsNonceConstraint.html":{},"coverage.html":{}}}],["isnotempty",{"_index":722,"title":{},"body":{"classes/CreateInput.html":{},"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/LoginInput.html":{},"classes/OAuthInput.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{}}}],["isnotempty()@field(undefined",{"_index":958,"title":{},"body":{"classes/LoginInput.html":{}}}],["isnotempty()@field({nullable",{"_index":1499,"title":{},"body":{"classes/ProviderInput.html":{}}}],["isnotempty()@isstring()@field(undefined",{"_index":1169,"title":{},"body":{"classes/OAuthInput.html":{}}}],["isobjectid",{"_index":730,"title":{},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PaginationMessages.html":{},"classes/PostDto.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/UpdatePost.html":{},"classes/UserInput.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isobjectid(validationoptions",{"_index":2011,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isobjectidconstraint",{"_index":882,"title":{"classes/IsObjectIdConstraint.html":{}},"body":{"classes/IsObjectIdConstraint.html":{},"coverage.html":{}}}],["isoptional",{"_index":353,"title":{},"body":{"classes/ChangeNameConversation.html":{},"classes/CreateConversation.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/ListFriendNotInConversation.html":{},"classes/PostDto.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/UserInput.html":{}}}],["isoptional()@field(undefined",{"_index":840,"title":{},"body":{"classes/GetPosts.html":{}}}],["isoptional()@isstring()@field(undefined",{"_index":1749,"title":{},"body":{"classes/UserInput.html":{}}}],["isoptional()@isstring()@isemail()@field(undefined",{"_index":1747,"title":{},"body":{"classes/UserInput.html":{}}}],["isoptional()@isstring()@isjwt()@field(undefined",{"_index":1752,"title":{},"body":{"classes/UserInput.html":{}}}],["isoptional()@isstring()@isobjectid()@field(undefined",{"_index":1745,"title":{},"body":{"classes/UserInput.html":{}}}],["isoptional()@isstring()@length(6",{"_index":1754,"title":{},"body":{"classes/UserInput.html":{}}}],["ispending",{"_index":764,"title":{},"body":{"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/Request.html":{},"injectables/RequestsRepository.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{}}}],["isreject",{"_index":765,"title":{},"body":{"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/Request.html":{},"injectables/RequestsRepository.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{}}}],["isstring",{"_index":723,"title":{},"body":{"classes/CreateInput.html":{},"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/LoginInput.html":{},"classes/OAuthInput.html":{},"classes/PaginationMessages.html":{},"classes/RetrieveRequest.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UserInput.html":{}}}],["isstring()@isemail()@isnotempty()@field(undefined",{"_index":712,"title":{},"body":{"classes/CreateInput.html":{}}}],["isstring()@isnotempty()@field(undefined",{"_index":1166,"title":{},"body":{"classes/OAuthInput.html":{}}}],["isstring()@isnotempty()@isemail()@field(undefined",{"_index":1164,"title":{},"body":{"classes/OAuthInput.html":{}}}],["isstring()@isnotempty()@length(6)@field(undefined",{"_index":714,"title":{},"body":{"classes/CreateInput.html":{},"classes/LoginInput.html":{}}}],["isstring()@length(6",{"_index":718,"title":{},"body":{"classes/CreateInput.html":{},"classes/LoginInput.html":{}}}],["isvalidobjectid",{"_index":887,"title":{},"body":{"classes/IsObjectIdConstraint.html":{}}}],["isvalidobjectid(objectid",{"_index":888,"title":{},"body":{"classes/IsObjectIdConstraint.html":{}}}],["job",{"_index":558,"title":{},"body":{"classes/ConversationsProcessor.html":{},"classes/ProfilesProcessor.html":{},"classes/S3Processor.html":{}}}],["job.data",{"_index":1383,"title":{},"body":{"classes/ProfilesProcessor.html":{},"classes/S3Processor.html":{}}}],["join",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["join(process.cwd",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["jose",{"_index":1969,"title":{},"body":{"dependencies.html":{}}}],["json.parse(result",{"_index":1456,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["json.stringify(list",{"_index":1461,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["jwt",{"_index":1981,"title":{},"body":{"dependencies.html":{}}}],["key",{"_index":1129,"title":{},"body":{"classes/MongooseExceptionFilter.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/ValidationExceptionFilter.html":{}}}],["keyword",{"_index":705,"title":{},"body":{"classes/Create.html":{},"classes/Friend.html":{},"classes/Obtain.html":{},"classes/ProfilesResolver.html":{},"classes/Search.html":{},"classes/_Upload_.html":{}}}],["lean",{"_index":1827,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["length",{"_index":724,"title":{},"body":{"classes/CreateInput.html":{},"classes/LoginInput.html":{},"classes/UserInput.html":{}}}],["length(6",{"_index":726,"title":{},"body":{"classes/CreateInput.html":{},"classes/LoginInput.html":{},"classes/UserInput.html":{}}}],["license",{"_index":2032,"title":{},"body":{"properties.html":{}}}],["like.name",{"_index":911,"title":{},"body":{"modules/LikesModule.html":{}}}],["like.profile",{"_index":1274,"title":{},"body":{"classes/PostsRepository.html":{}}}],["likedocument",{"_index":898,"title":{},"body":{"classes/Like.html":{},"classes/LikesRepository.html":{},"miscellaneous/typealiases.html":{}}}],["likemodel",{"_index":917,"title":{},"body":{"classes/LikesRepository.html":{}}}],["likepost",{"_index":913,"title":{},"body":{"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{}}}],["likepost(user",{"_index":918,"title":{},"body":{"classes/LikesRepository.html":{},"classes/LikesResolver.html":{}}}],["likepost(userid",{"_index":950,"title":{},"body":{"injectables/LikesService.html":{}}}],["likeresult",{"_index":937,"title":{},"body":{"classes/LikesResolver.html":{}}}],["likes",{"_index":1192,"title":{},"body":{"classes/Post.html":{},"classes/PostsRepository.html":{}}}],["likes._deletedat",{"_index":1270,"title":{},"body":{"classes/PostsRepository.html":{}}}],["likes._post",{"_index":1269,"title":{},"body":{"classes/PostsRepository.html":{}}}],["likes.profile",{"_index":1275,"title":{},"body":{"classes/PostsRepository.html":{}}}],["likeschema",{"_index":900,"title":{},"body":{"classes/Like.html":{},"modules/LikesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["likeschema.index",{"_index":902,"title":{},"body":{"classes/Like.html":{}}}],["likesmodule",{"_index":119,"title":{"modules/LikesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LikesModule.html":{},"modules.html":{},"overview.html":{}}}],["likesrepository",{"_index":909,"title":{"classes/LikesRepository.html":{}},"body":{"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"injectables/LikesService.html":{},"coverage.html":{}}}],["likesresolver",{"_index":910,"title":{"classes/LikesResolver.html":{}},"body":{"modules/LikesModule.html":{},"classes/LikesResolver.html":{},"coverage.html":{}}}],["likesservice",{"_index":907,"title":{"injectables/LikesService.html":{}},"body":{"modules/LikesModule.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"coverage.html":{},"overview.html":{}}}],["limit",{"_index":1074,"title":{},"body":{"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{}}}],["list",{"_index":1458,"title":{},"body":{"classes/ProfilesResolver.html":{},"classes/ValidationExceptionFilter.html":{}}}],["listerrors",{"_index":1884,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["listfriendnotinconversation",{"_index":360,"title":{"classes/ListFriendNotInConversation.html":{}},"body":{"classes/ChangeNameConversation.html":{},"classes/CreateConversation.html":{},"classes/ListFriendNotInConversation.html":{},"coverage.html":{}}}],["listsocketid",{"_index":85,"title":{},"body":{"classes/AppGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["listsocketid.filter",{"_index":94,"title":{},"body":{"classes/AppGateway.html":{}}}],["listsocketid.push(...sendersocketids",{"_index":527,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["listsocketid.push(...temp",{"_index":521,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["literal",{"_index":1214,"title":{},"body":{"injectables/PostsGateway.html":{},"miscellaneous/typealiases.html":{}}}],["local",{"_index":1983,"title":{},"body":{"dependencies.html":{}}}],["localfield",{"_index":435,"title":{},"body":{"classes/CommentsRepository.html":{},"injectables/ConversationsRepository.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{},"injectables/RequestsRepository.html":{}}}],["lodash",{"_index":64,"title":{},"body":{"classes/AppGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{},"modules/UsersModule.html":{}}}],["login",{"_index":256,"title":{},"body":{"classes/AuthResolver.html":{}}}],["login(@args('logininput",{"_index":290,"title":{},"body":{"classes/AuthResolver.html":{}}}],["login(logininput",{"_index":262,"title":{},"body":{"classes/AuthResolver.html":{}}}],["login(user",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["logininput",{"_index":263,"title":{"classes/LoginInput.html":{}},"body":{"classes/AuthResolver.html":{},"classes/LoginInput.html":{},"coverage.html":{}}}],["loginresponse",{"_index":329,"title":{"classes/LoginResponse.html":{}},"body":{"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"coverage.html":{}}}],["lookup",{"_index":433,"title":{},"body":{"classes/CommentsRepository.html":{},"injectables/ConversationsRepository.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{},"injectables/RequestsRepository.html":{}}}],["lt",{"_index":1072,"title":{},"body":{"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{}}}],["managedupload",{"_index":1683,"title":{},"body":{"injectables/S3Service.html":{}}}],["managedupload.senddata",{"_index":1705,"title":{},"body":{"injectables/S3Service.html":{}}}],["manager",{"_index":61,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesResolver.html":{},"injectables/RequestsGateway.html":{},"dependencies.html":{}}}],["map",{"_index":1882,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["match",{"_index":432,"title":{},"body":{"classes/CommentsRepository.html":{},"injectables/ConversationsRepository.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{},"injectables/RequestsRepository.html":{}}}],["match.userreceive",{"_index":1600,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["match.userrequest",{"_index":1601,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["matching",{"_index":22,"title":{},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthGateway.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"modules/CommentsModule.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"modules/FriendsModule.html":{},"classes/FriendsProfile.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"modules/NotificationsModule.html":{},"classes/NotificationsResolver.html":{},"injectables/NotificationsService.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"injectables/ObjectIdPipe.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"modules/PubSubModule.html":{},"classes/PublisherSubscriptions.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/RetrieveRequest.html":{},"modules/S3Module.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxhttpbuffersize",{"_index":69,"title":{},"body":{"classes/AppGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/PostsGateway.html":{}}}],["member",{"_index":518,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["memberadded",{"_index":636,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["members",{"_index":358,"title":{},"body":{"classes/ChangeNameConversation.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"classes/CreateConversation.html":{},"classes/ListFriendNotInConversation.html":{},"injectables/MessagesGateway.html":{},"injectables/ProfilesService.html":{}}}],["members.id",{"_index":606,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["membersdetail",{"_index":617,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["membersdetail.friends",{"_index":622,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["membersdetail.id",{"_index":618,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["message",{"_index":796,"title":{"classes/Message.html":{}},"body":{"classes/FileInfo.html":{},"classes/GraphQLException.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/NotificationsGateway.html":{},"classes/PaginationMessages.html":{},"injectables/RequestsGateway.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["message.name",{"_index":1049,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messagebody",{"_index":507,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["messagedocument",{"_index":795,"title":{},"body":{"classes/FileInfo.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesRepository.html":{},"miscellaneous/typealiases.html":{}}}],["messageinput",{"_index":1092,"title":{},"body":{"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/PaginationMessages.html":{},"classes/Send.html":{},"classes/SendFiles.html":{}}}],["messageinput.paginationmessages",{"_index":1084,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["messageinput.send",{"_index":1087,"title":{},"body":{"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{}}}],["messageinput.sendfiles",{"_index":1090,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["messagemodel",{"_index":1056,"title":{},"body":{"injectables/MessagesRepository.html":{}}}],["messageomit",{"_index":799,"title":{"classes/MessageOmit.html":{}},"body":{"classes/FileInfo.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"coverage.html":{}}}],["messages",{"_index":802,"title":{},"body":{"classes/FileInfo.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesRepository.html":{}}}],["messageschema",{"_index":804,"title":{},"body":{"classes/FileInfo.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"modules/MessagesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["messagesconversation",{"_index":801,"title":{"classes/MessagesConversation.html":{}},"body":{"classes/FileInfo.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"coverage.html":{}}}],["messagesgateway",{"_index":976,"title":{"injectables/MessagesGateway.html":{}},"body":{"injectables/MessagesGateway.html":{},"modules/MessagesModule.html":{},"coverage.html":{},"overview.html":{}}}],["messagesmodule",{"_index":120,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesrepository",{"_index":1045,"title":{"injectables/MessagesRepository.html":{}},"body":{"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["messagesresolver",{"_index":1048,"title":{"classes/MessagesResolver.html":{}},"body":{"modules/MessagesModule.html":{},"classes/MessagesResolver.html":{},"coverage.html":{}}}],["messagesservice",{"_index":1046,"title":{"injectables/MessagesService.html":{}},"body":{"modules/MessagesModule.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["metadata",{"_index":1987,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":29,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"injectables/ConversationsGateway.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"injectables/ObjectIdPipe.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{}}}],["middlewarecontext",{"_index":2063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mime",{"_index":1685,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["mime.extension(mimetype",{"_index":1710,"title":{},"body":{"injectables/S3Service.html":{}}}],["mimetype",{"_index":783,"title":{},"body":{"classes/File.html":{},"classes/ProfilesResolver.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{}}}],["mimetype.replace('image",{"_index":1700,"title":{},"body":{"injectables/S3Service.html":{}}}],["mimetype.startswith('image",{"_index":1465,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["miscellaneous",{"_index":2000,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":412,"title":{},"body":{"classes/CommentsRepository.html":{},"injectables/ConversationsRepository.html":{},"classes/LikesRepository.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{},"injectables/RequestsRepository.html":{},"injectables/UsersRepository.html":{}}}],["model.updateone",{"_index":1429,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["modifiedcount",{"_index":691,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["module",{"_index":109,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ConversationsModule.html":{},"modules/FriendsModule.html":{},"modules/LikesModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/PostsModule.html":{},"modules/ProfilesModule.html":{},"modules/PubSubModule.html":{},"modules/RequestsModule.html":{},"modules/S3Module.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ConversationsModule.html":{},"modules/FriendsModule.html":{},"modules/LikesModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/PostsModule.html":{},"modules/ProfilesModule.html":{},"modules/PubSubModule.html":{},"modules/RequestsModule.html":{},"modules/S3Module.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":111,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ConversationsModule.html":{},"modules/FriendsModule.html":{},"modules/LikesModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/PostsModule.html":{},"modules/ProfilesModule.html":{},"modules/PubSubModule.html":{},"modules/RequestsModule.html":{},"modules/S3Module.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1365,"title":{},"body":{"modules/ProfilesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["moment().format('x",{"_index":1372,"title":{},"body":{"modules/ProfilesModule.html":{},"modules/UsersModule.html":{}}}],["mongodb",{"_index":389,"title":{},"body":{"classes/Comment.html":{},"classes/CommentsRepository.html":{},"injectables/ConversationsRepository.html":{},"injectables/ConversationsService.html":{},"classes/Like.html":{},"classes/LikesRepository.html":{},"injectables/MessagesRepository.html":{},"classes/MongoExceptionFilter.html":{},"injectables/ObjectIdPipe.html":{},"classes/PostsRepository.html":{},"classes/User.html":{},"classes/UserInput.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"dependencies.html":{}}}],["mongoerror",{"_index":1117,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["mongoexceptionfilter",{"_index":1114,"title":{"classes/MongoExceptionFilter.html":{}},"body":{"classes/MongoExceptionFilter.html":{},"coverage.html":{}}}],["mongoose",{"_index":390,"title":{},"body":{"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/Conversation.html":{},"injectables/ConversationsRepository.html":{},"classes/FileInfo.html":{},"classes/FriendProfile.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"classes/LikesRepository.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesRepository.html":{},"classes/Post.html":{},"classes/PostsRepository.html":{},"classes/Profile.html":{},"injectables/ProfilesRepository.html":{},"classes/RedisIoAdapter.html":{},"classes/Request.html":{},"injectables/RequestsRepository.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"classes/ValidationExceptionFilter.html":{},"dependencies.html":{}}}],["mongoose.document",{"_index":392,"title":{},"body":{"classes/Comment.html":{},"classes/Conversation.html":{},"classes/FileInfo.html":{},"classes/FriendProfile.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/Post.html":{},"classes/Profile.html":{},"classes/Request.html":{},"classes/User.html":{}}}],["mongooseexceptionfilter",{"_index":276,"title":{"classes/MongooseExceptionFilter.html":{}},"body":{"classes/AuthResolver.html":{},"classes/MongooseExceptionFilter.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["mongoosemodule",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules/ConversationsModule.html":{},"modules/LikesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/ProfilesModule.html":{},"modules/RequestsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeatureasync",{"_index":404,"title":{},"body":{"modules/CommentsModule.html":{},"modules/ConversationsModule.html":{},"modules/LikesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/ProfilesModule.html":{},"modules/RequestsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(process.env.mongo_url",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoservererror",{"_index":1118,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["mutation",{"_index":281,"title":{},"body":{"classes/AuthResolver.html":{},"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/LikesResolver.html":{},"classes/MessagesResolver.html":{},"classes/PostsResolver.html":{},"classes/ProfilesResolver.html":{},"classes/RequestsResolver.html":{},"classes/UsersResolver.html":{}}}],["mutation(undefined",{"_index":264,"title":{},"body":{"classes/AuthResolver.html":{},"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/LikesResolver.html":{},"classes/MessagesResolver.html":{},"classes/PostsResolver.html":{},"classes/ProfilesResolver.html":{},"classes/RequestsResolver.html":{},"classes/UsersResolver.html":{}}}],["name",{"_index":39,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/ChangeNameConversation.html":{},"modules/CommentsModule.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/Current.html":{},"classes/Friend.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"injectables/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"injectables/ObjectIdPipe.html":{},"classes/Obtain.html":{},"injectables/PostsGateway.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/RedisIoAdapter.html":{},"injectables/RequestsGateway.html":{},"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"modules/S3Module.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["namespace",{"_index":355,"title":{},"body":{"classes/ChangeNameConversation.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/DeletePost.html":{},"classes/Friend.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/ListFriendNotInConversation.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/PostDto.html":{},"classes/RetrieveRequest.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/_Upload_.html":{}}}],["ne",{"_index":632,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["nestjs/apollo",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/bull",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsService.html":{},"modules/MessagesModule.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"modules/S3Module.html":{},"classes/S3Processor.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":60,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthGateway.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"modules/CommentsModule.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"modules/FriendsModule.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"modules/LikesModule.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"injectables/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"injectables/ObjectIdPipe.html":{},"injectables/PostsGateway.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"modules/PubSubModule.html":{},"injectables/RequestsGateway.html":{},"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"modules/S3Module.html":{},"injectables/S3Service.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":1929,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":1931,"title":{},"body":{"dependencies.html":{}}}],["nestjs/devtools",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":19,"title":{},"body":{"classes/AccessTokenResponse.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"classes/CommentsResolver.html":{},"classes/Conversation.html":{},"classes/ConversationsResolver.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"classes/FriendsProfile.html":{},"classes/FriendsResolver.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/Like.html":{},"classes/LikesResolver.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/MessagesResolver.html":{},"classes/NotificationsResolver.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostsResolver.html":{},"classes/Profile.html":{},"classes/ProfilesResolver.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/PublisherSubscriptions.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"classes/RequestsResolver.html":{},"classes/RetrieveRequest.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"classes/UsersResolver.html":{},"classes/_Upload_.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":1934,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"classes/Comment.html":{},"modules/CommentsModule.html":{},"classes/CommentsRepository.html":{},"classes/Conversation.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsRepository.html":{},"classes/FileInfo.html":{},"classes/FriendProfile.html":{},"classes/Like.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"classes/Post.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"classes/Profile.html":{},"modules/ProfilesModule.html":{},"injectables/ProfilesRepository.html":{},"classes/Request.html":{},"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":1937,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":1519,"title":{},"body":{"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":57,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AuthGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":868,"title":{},"body":{"injectables/HomeMiddleware.html":{}}}],["new",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"classes/CommentsRepository.html":{},"injectables/ConversationsRepository.html":{},"classes/GraphQLExceptionFilter.html":{},"classes/LikesRepository.html":{},"injectables/MessagesRepository.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/ObjectIdPipe.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"modules/PubSubModule.html":{},"classes/RequestsResolver.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newcontext",{"_index":227,"title":{},"body":{"guards/AuthGuard.html":{}}}],["newcontext.getcontext",{"_index":232,"title":{},"body":{"guards/AuthGuard.html":{}}}],["newlike",{"_index":928,"title":{},"body":{"classes/LikesResolver.html":{}}}],["newlike(user",{"_index":933,"title":{},"body":{"classes/LikesResolver.html":{}}}],["newmessage",{"_index":1068,"title":{},"body":{"injectables/MessagesRepository.html":{}}}],["newmessage.save",{"_index":1070,"title":{},"body":{"injectables/MessagesRepository.html":{}}}],["newpayload",{"_index":1018,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["newrequest",{"_index":1623,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["next",{"_index":225,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/HomeMiddleware.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nextfn",{"_index":2064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nextfunction",{"_index":866,"title":{},"body":{"injectables/HomeMiddleware.html":{}}}],["nin",{"_index":607,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["node",{"_index":1976,"title":{},"body":{"dependencies.html":{}}}],["nonce",{"_index":293,"title":{},"body":{"classes/AuthResolver.html":{},"classes/IsNonceConstraint.html":{},"classes/LoginInput.html":{},"classes/OAuthInput.html":{}}}],["note",{"_index":761,"title":{},"body":{"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/RequestsResolver.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{}}}],["notfoundexception",{"_index":1452,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["notificationsgateway",{"_index":1135,"title":{"injectables/NotificationsGateway.html":{}},"body":{"injectables/NotificationsGateway.html":{},"modules/NotificationsModule.html":{},"coverage.html":{},"overview.html":{}}}],["notificationsmodule",{"_index":121,"title":{"modules/NotificationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationsModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationsresolver",{"_index":1156,"title":{"classes/NotificationsResolver.html":{}},"body":{"modules/NotificationsModule.html":{},"classes/NotificationsResolver.html":{},"coverage.html":{}}}],["notificationsservice",{"_index":1154,"title":{"injectables/NotificationsService.html":{}},"body":{"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"coverage.html":{},"overview.html":{}}}],["now",{"_index":1063,"title":{},"body":{"injectables/MessagesRepository.html":{},"injectables/MessagesService.html":{},"classes/PaginationMessages.html":{},"classes/Send.html":{},"classes/SendFiles.html":{}}}],["nowunix",{"_index":1371,"title":{},"body":{"modules/ProfilesModule.html":{},"modules/UsersModule.html":{}}}],["null",{"_index":83,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AuthService.html":{},"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"injectables/LikesService.html":{},"injectables/MessagesRepository.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/ProfilesRepository.html":{},"classes/RedisIoAdapter.html":{},"injectables/RequestsRepository.html":{},"classes/UpdatePost.html":{},"classes/User.html":{}}}],["nullable",{"_index":265,"title":{},"body":{"classes/AuthResolver.html":{},"classes/CommentsResolver.html":{},"classes/Conversation.html":{},"classes/ConversationsResolver.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/DeletePost.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/FriendProfile.html":{},"classes/FriendsResolver.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/LikesResolver.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/MessagesResolver.html":{},"classes/OAuthInput.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostsResolver.html":{},"classes/Profile.html":{},"classes/ProfilesResolver.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/Request.html":{},"classes/RequestsResolver.html":{},"classes/RetrieveRequest.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"classes/UsersResolver.html":{}}}],["number",{"_index":738,"title":{},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/DeleteResult.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/LikesResolver.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/ProfilesResolver.html":{},"classes/RedisIoAdapter.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/UpdatePost.html":{}}}],["oauth",{"_index":257,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["oauth(@args('oauthinput",{"_index":300,"title":{},"body":{"classes/AuthResolver.html":{}}}],["oauth(_oauthinput",{"_index":268,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["oauth(oauthinput",{"_index":1802,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["oauthinfo",{"_index":771,"title":{"classes/OAuthInfo.html":{}},"body":{"classes/Current.html":{},"classes/OAuthInfo.html":{},"coverage.html":{}}}],["oauthinput",{"_index":269,"title":{"classes/OAuthInput.html":{}},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/OAuthInput.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["object",{"_index":2066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(exception.errors).map((key",{"_index":1885,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["object.keys(payload).length",{"_index":1646,"title":{},"body":{"injectables/Require.html":{},"injectables/RequireAtLeast.html":{}}}],["objectid",{"_index":370,"title":{},"body":{"classes/Comment.html":{},"classes/Conversation.html":{},"injectables/ConversationsRepository.html":{},"classes/FileInfo.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesRepository.html":{},"injectables/ObjectIdPipe.html":{},"classes/Post.html":{},"classes/PostsRepository.html":{},"classes/Request.html":{},"classes/User.html":{},"classes/UserInput.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["objectid(conversationid",{"_index":613,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["objectid(payload._id",{"_index":1277,"title":{},"body":{"classes/PostsRepository.html":{}}}],["objectid(post._id",{"_index":1279,"title":{},"body":{"classes/PostsRepository.html":{}}}],["objectid(startvalue",{"_index":1073,"title":{},"body":{"injectables/MessagesRepository.html":{}}}],["objectid(value",{"_index":1181,"title":{},"body":{"injectables/ObjectIdPipe.html":{}}}],["objectid.isvalid(value",{"_index":1179,"title":{},"body":{"injectables/ObjectIdPipe.html":{}}}],["objectidpipe",{"_index":1172,"title":{"injectables/ObjectIdPipe.html":{}},"body":{"injectables/ObjectIdPipe.html":{},"coverage.html":{}}}],["objecttype",{"_index":18,"title":{},"body":{"classes/AccessTokenResponse.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"classes/Conversation.html":{},"classes/CreateConversation.html":{},"classes/CreatePost.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/FriendProfile.html":{},"classes/FriendsProfile.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/Like.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/OAuthInfo.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/Profile.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"classes/UpdatePost.html":{},"classes/User.html":{}}}],["obtain",{"_index":706,"title":{"classes/Obtain.html":{}},"body":{"classes/Create.html":{},"classes/Friend.html":{},"classes/Obtain.html":{},"classes/Search.html":{},"classes/_Upload_.html":{},"coverage.html":{}}}],["oldmember",{"_index":629,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["omit",{"_index":803,"title":{},"body":{"classes/FileInfo.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/S3Service.html":{}}}],["omittype",{"_index":732,"title":{},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/FileInfo.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/PostDto.html":{},"classes/UpdatePost.html":{}}}],["omittype(message",{"_index":800,"title":{},"body":{"classes/FileInfo.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{}}}],["omittype(partialtype(postdto",{"_index":741,"title":{},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PostDto.html":{},"classes/UpdatePost.html":{}}}],["onconnect",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["ongatewayconnection",{"_index":26,"title":{},"body":{"classes/AppGateway.html":{}}}],["ongatewaydisconnect",{"_index":27,"title":{},"body":{"classes/AppGateway.html":{}}}],["onmoduleinit",{"_index":204,"title":{},"body":{"injectables/AppService.html":{}}}],["optional",{"_index":40,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversation.html":{},"classes/CreateRequest.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/InfoRequest.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/Message.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"injectables/ObjectIdPipe.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/RedisIoAdapter.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/RetrieveRequest.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/Status.html":{},"classes/UserInput.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1418,"title":{},"body":{"injectables/ProfilesRepository.html":{},"classes/RedisIoAdapter.html":{}}}],["origin",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["out",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ConversationsModule.html":{},"modules/FriendsModule.html":{},"modules/LikesModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/PostsModule.html":{},"modules/ProfilesModule.html":{},"modules/RequestsModule.html":{},"modules/S3Module.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":2026,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":378,"title":{},"body":{"classes/Comment.html":{},"classes/Like.html":{},"injectables/PostsGateway.html":{}}}],["package",{"_index":1921,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["paginationmessages",{"_index":1183,"title":{"classes/PaginationMessages.html":{}},"body":{"classes/PaginationMessages.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"coverage.html":{}}}],["parameterdecorator",{"_index":2008,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"injectables/ConversationsGateway.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"injectables/ObjectIdPipe.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["parseint(process.env.salt",{"_index":1782,"title":{},"body":{"modules/UsersModule.html":{}}}],["parser",{"_index":1947,"title":{},"body":{"dependencies.html":{}}}],["partial",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsRepository.html":{},"injectables/ConversationsService.html":{},"classes/LoginResponse.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"injectables/RequestsRepository.html":{},"injectables/RequestsService.html":{}}}],["partialtype",{"_index":733,"title":{},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PostDto.html":{},"classes/UpdatePost.html":{}}}],["partialtype(postdto",{"_index":743,"title":{},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PostDto.html":{},"classes/UpdatePost.html":{}}}],["passport",{"_index":1979,"title":{},"body":{"dependencies.html":{}}}],["password",{"_index":292,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CreateInput.html":{},"classes/LoginInput.html":{},"classes/User.html":{},"classes/UserInput.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{}}}],["path",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"classes/CommentsRepository.html":{},"injectables/ConversationsRepository.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{},"injectables/RequestsRepository.html":{}}}],["payload",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"injectables/MessagesGateway.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"miscellaneous/typealiases.html":{}}}],["payload._id",{"_index":633,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["payload.conversationid",{"_index":1095,"title":{},"body":{"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{}}}],["payload.files.map((info",{"_index":1010,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["payload.friendid",{"_index":1355,"title":{},"body":{"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["payload.message",{"_index":1111,"title":{},"body":{"injectables/MessagesService.html":{}}}],["payload.name",{"_index":634,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["payload.now",{"_index":1103,"title":{},"body":{"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{}}}],["payload.postadded",{"_index":1219,"title":{},"body":{"injectables/PostsGateway.html":{}}}],["payload.request",{"_index":1143,"title":{},"body":{"injectables/NotificationsGateway.html":{}}}],["payload.startvalue",{"_index":1096,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["payload.userid",{"_index":1562,"title":{},"body":{"injectables/RequestsGateway.html":{}}}],["payload?._id",{"_index":1276,"title":{},"body":{"classes/PostsRepository.html":{}}}],["payload?.friendid",{"_index":1350,"title":{},"body":{"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["payload?.userid",{"_index":1349,"title":{},"body":{"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["persist",{"_index":96,"title":{},"body":{"classes/AppGateway.html":{}}}],["pf",{"_index":382,"title":{},"body":{"classes/Comment.html":{},"classes/Like.html":{},"classes/Post.html":{}}}],["picktype",{"_index":350,"title":{},"body":{"classes/ChangeNameConversation.html":{},"classes/CreateConversation.html":{},"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/FriendsProfile.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/ListFriendNotInConversation.html":{},"classes/PostDto.html":{},"classes/UpdatePost.html":{}}}],["picktype(post",{"_index":745,"title":{},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PostDto.html":{},"classes/UpdatePost.html":{}}}],["picktype(profile",{"_index":823,"title":{},"body":{"classes/FriendsProfile.html":{}}}],["picture",{"_index":772,"title":{},"body":{"classes/Current.html":{},"classes/OAuthInfo.html":{}}}],["pipeline",{"_index":1263,"title":{},"body":{"classes/PostsRepository.html":{}}}],["pipelinestage",{"_index":1254,"title":{},"body":{"classes/PostsRepository.html":{}}}],["pipetransform",{"_index":1177,"title":{},"body":{"injectables/ObjectIdPipe.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{}}}],["playground",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":1469,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["port",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/PubSubModule.html":{},"classes/RedisIoAdapter.html":{}}}],["post",{"_index":367,"title":{"classes/Post.html":{}},"body":{"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/Like.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdatePost.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["post._id",{"_index":1261,"title":{},"body":{"classes/PostsRepository.html":{}}}],["post._id.tostring",{"_index":925,"title":{},"body":{"classes/LikesRepository.html":{}}}],["post.name",{"_index":1237,"title":{},"body":{"modules/PostsModule.html":{}}}],["post.profile",{"_index":1221,"title":{},"body":{"injectables/PostsGateway.html":{}}}],["post?.profile",{"_index":1220,"title":{},"body":{"injectables/PostsGateway.html":{}}}],["postadded",{"_index":1218,"title":{},"body":{"injectables/PostsGateway.html":{},"classes/PostsResolver.html":{}}}],["postadded(user",{"_index":1288,"title":{},"body":{"classes/PostsResolver.html":{}}}],["postdocument",{"_index":1204,"title":{},"body":{"classes/Post.html":{},"classes/PostsRepository.html":{},"miscellaneous/typealiases.html":{}}}],["postdto",{"_index":735,"title":{"classes/PostDto.html":{}},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PostDto.html":{},"classes/UpdatePost.html":{},"coverage.html":{}}}],["postid",{"_index":416,"title":{},"body":{"classes/CommentsRepository.html":{},"injectables/CommentsService.html":{},"classes/LikesRepository.html":{},"injectables/LikesService.html":{}}}],["postinput",{"_index":734,"title":{},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PostDto.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdatePost.html":{}}}],["postinput.createpost",{"_index":1243,"title":{},"body":{"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["postinput.deletepost",{"_index":1246,"title":{},"body":{"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["postinput.getpost",{"_index":1249,"title":{},"body":{"classes/PostsRepository.html":{},"injectables/PostsService.html":{}}}],["postinput.getposts",{"_index":1252,"title":{},"body":{"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["postmodel",{"_index":1241,"title":{},"body":{"classes/PostsRepository.html":{}}}],["postresult",{"_index":939,"title":{},"body":{"classes/LikesResolver.html":{}}}],["postschema",{"_index":1205,"title":{},"body":{"classes/Post.html":{},"modules/PostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postsgateway",{"_index":1211,"title":{"injectables/PostsGateway.html":{}},"body":{"injectables/PostsGateway.html":{},"modules/PostsModule.html":{},"coverage.html":{},"overview.html":{}}}],["postsmodule",{"_index":122,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LikesModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":1235,"title":{"classes/PostsRepository.html":{}},"body":{"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postsresolver",{"_index":1236,"title":{"classes/PostsResolver.html":{}},"body":{"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["postsservice",{"_index":930,"title":{"injectables/PostsService.html":{}},"body":{"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"injectables/PostsGateway.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["preservenullandemptyarrays",{"_index":438,"title":{},"body":{"classes/CommentsRepository.html":{},"injectables/ConversationsRepository.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{}}}],["private",{"_index":72,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"classes/AuthResolver.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/ProfilesGateway.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"injectables/RequestsService.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":561,"title":{},"body":{"classes/ConversationsProcessor.html":{},"classes/ProfilesProcessor.html":{},"classes/S3Processor.html":{}}}],["process('addfriend",{"_index":1378,"title":{},"body":{"classes/ProfilesProcessor.html":{}}}],["process('createconversation",{"_index":559,"title":{},"body":{"classes/ConversationsProcessor.html":{}}}],["process('updateavatar",{"_index":1380,"title":{},"body":{"classes/ProfilesProcessor.html":{}}}],["process('uploadfile",{"_index":1661,"title":{},"body":{"classes/S3Processor.html":{}}}],["process.env.aws_s3_name_bucket",{"_index":1668,"title":{},"body":{"classes/S3Processor.html":{},"injectables/S3Service.html":{}}}],["process.env.default_avatar",{"_index":1330,"title":{},"body":{"classes/Profile.html":{}}}],["process.env.node_env",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.pod_ip",{"_index":1524,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["process.env.redis_url",{"_index":1526,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["process.env.secret",{"_index":230,"title":{},"body":{"guards/AuthGuard.html":{}}}],["process.env.time_expire_access_token",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["processor",{"_index":562,"title":{},"body":{"classes/ConversationsProcessor.html":{},"classes/ProfilesProcessor.html":{},"classes/S3Processor.html":{}}}],["processor('conversation",{"_index":564,"title":{},"body":{"classes/ConversationsProcessor.html":{}}}],["processor('profile",{"_index":1382,"title":{},"body":{"classes/ProfilesProcessor.html":{}}}],["processor('upload",{"_index":1666,"title":{},"body":{"classes/S3Processor.html":{}}}],["production",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["profile",{"_index":352,"title":{"classes/Profile.html":{}},"body":{"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"classes/CreateConversation.html":{},"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/FileInfo.html":{},"classes/FriendsProfile.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/Like.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"classes/ListFriendNotInConversation.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Request.html":{},"classes/UpdatePost.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["profile.friends",{"_index":1222,"title":{},"body":{"injectables/PostsGateway.html":{},"classes/ProfilesResolver.html":{}}}],["profile.id",{"_index":1353,"title":{},"body":{"injectables/ProfilesGateway.html":{}}}],["profile.name",{"_index":1354,"title":{},"body":{"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{}}}],["profile.save",{"_index":1414,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["profile[0",{"_index":1423,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["profiledocument",{"_index":1329,"title":{},"body":{"classes/Profile.html":{},"injectables/ProfilesRepository.html":{},"miscellaneous/typealiases.html":{}}}],["profileid",{"_index":512,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{}}}],["profileids",{"_index":658,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["profileinput",{"_index":703,"title":{},"body":{"classes/Create.html":{},"classes/Friend.html":{},"classes/Obtain.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Search.html":{},"classes/_Upload_.html":{}}}],["profileinput.create",{"_index":1399,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["profileinput.friend",{"_index":1446,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["profileinput.obtain",{"_index":1463,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["profileinput.search",{"_index":1405,"title":{},"body":{"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{}}}],["profilemodel",{"_index":1395,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["profilequeue",{"_index":1440,"title":{},"body":{"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{}}}],["profiles",{"_index":434,"title":{},"body":{"classes/CommentsRepository.html":{},"injectables/ConversationsRepository.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{},"injectables/RequestsRepository.html":{}}}],["profiles/profiles.module",{"_index":1234,"title":{},"body":{"modules/PostsModule.html":{}}}],["profileschema",{"_index":1334,"title":{},"body":{"classes/Profile.html":{},"modules/ProfilesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["profileschema.index({email",{"_index":1336,"title":{},"body":{"classes/Profile.html":{}}}],["profilesgateway",{"_index":1337,"title":{"injectables/ProfilesGateway.html":{}},"body":{"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"coverage.html":{},"overview.html":{}}}],["profilesmodule",{"_index":123,"title":{"modules/ProfilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules/ConversationsModule.html":{},"modules/FriendsModule.html":{},"modules/LikesModule.html":{},"modules/PostsModule.html":{},"modules/ProfilesModule.html":{},"modules/RequestsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["profilesocketids",{"_index":522,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["profilesprocessor",{"_index":1366,"title":{"classes/ProfilesProcessor.html":{}},"body":{"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"coverage.html":{}}}],["profilesrepository",{"_index":835,"title":{"injectables/ProfilesRepository.html":{}},"body":{"injectables/FriendsService.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"injectables/ProfilesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["profilesresolver",{"_index":1362,"title":{"classes/ProfilesResolver.html":{}},"body":{"modules/ProfilesModule.html":{},"classes/ProfilesResolver.html":{},"coverage.html":{},"overview.html":{}}}],["profilesservice",{"_index":442,"title":{"injectables/ProfilesService.html":{}},"body":{"classes/CommentsResolver.html":{},"injectables/ConversationsGateway.html":{},"injectables/LikesService.html":{},"classes/PostsResolver.html":{},"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsService.html":{},"coverage.html":{},"overview.html":{}}}],["project",{"_index":619,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["promise",{"_index":221,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/MessagesGateway.html":{},"classes/MessagesResolver.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/ProfilesGateway.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["promise((resolve",{"_index":1690,"title":{},"body":{"injectables/S3Service.html":{}}}],["promise.all",{"_index":953,"title":{},"body":{"injectables/LikesService.html":{}}}],["promise.all([receiver",{"_index":1432,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["promise.all([resultpost",{"_index":1296,"title":{},"body":{"classes/PostsResolver.html":{}}}],["promise.all(apromises",{"_index":1102,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["promise.all(files",{"_index":1098,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["promise.all(promises",{"_index":466,"title":{},"body":{"classes/CommentsResolver.html":{},"injectables/ConversationsGateway.html":{}}}],["promises",{"_index":462,"title":{},"body":{"classes/CommentsResolver.html":{},"injectables/ConversationsGateway.html":{}}}],["promisesupload",{"_index":1708,"title":{},"body":{"injectables/S3Service.html":{}}}],["promisesupload.push",{"_index":1711,"title":{},"body":{"injectables/S3Service.html":{}}}],["prop",{"_index":386,"title":{},"body":{"classes/Comment.html":{},"classes/Conversation.html":{},"classes/FileInfo.html":{},"classes/FriendProfile.html":{},"classes/Like.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/Post.html":{},"classes/Profile.html":{},"classes/Request.html":{},"classes/User.html":{}}}],["prop()@field(undefined",{"_index":810,"title":{},"body":{"classes/FriendProfile.html":{},"classes/Profile.html":{}}}],["prop({default",{"_index":1318,"title":{},"body":{"classes/Profile.html":{}}}],["prop({required",{"_index":379,"title":{},"body":{"classes/Comment.html":{},"classes/Conversation.html":{},"classes/Like.html":{},"classes/Request.html":{}}}],["prop({type",{"_index":375,"title":{},"body":{"classes/Comment.html":{},"classes/Like.html":{},"classes/Request.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"injectables/AuthGateway.html":{},"classes/Comment.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreateRequest.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"classes/GetPosts.html":{},"classes/InfoRequest.html":{},"classes/Like.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/PublisherSubscriptions.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/User.html":{},"classes/UserInput.html":{},"classes/_Upload_.html":{},"properties.html":{}}}],["provide",{"_index":1503,"title":{},"body":{"modules/PubSubModule.html":{}}}],["provider",{"_index":287,"title":{"classes/Provider.html":{}},"body":{"classes/AuthResolver.html":{},"classes/Create.html":{},"classes/CreateInput.html":{},"classes/Current.html":{},"classes/Friend.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"classes/Obtain.html":{},"classes/Profile.html":{},"injectables/ProfilesRepository.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/Search.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/_Upload_.html":{},"coverage.html":{}}}],["provider.type",{"_index":1812,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["providerinput",{"_index":716,"title":{"classes/ProviderInput.html":{}},"body":{"classes/CreateInput.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"coverage.html":{}}}],["providers",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ConversationsModule.html":{},"modules/FriendsModule.html":{},"modules/LikesModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/PostsModule.html":{},"modules/ProfilesModule.html":{},"modules/PubSubModule.html":{},"modules/RequestsModule.html":{},"modules/S3Module.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{}}}],["providers.id",{"_index":1820,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["providers.type",{"_index":1819,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["providerstype",{"_index":1492,"title":{},"body":{"classes/Provider.html":{},"classes/ProviderInput.html":{},"miscellaneous/typealiases.html":{}}}],["pub",{"_index":1302,"title":{},"body":{"classes/PostsResolver.html":{}}}],["pub_sub",{"_index":459,"title":{},"body":{"classes/CommentsResolver.html":{},"classes/LikesResolver.html":{},"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pubclient",{"_index":1527,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["pubclient.duplicate",{"_index":1529,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["public",{"_index":255,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["publisher",{"_index":1289,"title":{},"body":{"classes/PostsResolver.html":{}}}],["publisher?.id",{"_index":1303,"title":{},"body":{"classes/PostsResolver.html":{}}}],["publishersubscriptions",{"_index":1290,"title":{"classes/PublisherSubscriptions.html":{}},"body":{"classes/PostsResolver.html":{},"classes/PublisherSubscriptions.html":{},"coverage.html":{}}}],["pubsub",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/LikesResolver.html":{},"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"classes/RequestsResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pubsub.asynciterator('requestadded",{"_index":1627,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["pubsub.publish('requestadded",{"_index":1624,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["pubsubmodule",{"_index":124,"title":{"modules/PubSubModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PubSubModule.html":{},"modules.html":{},"overview.html":{}}}],["pull",{"_index":1435,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["push",{"_index":609,"title":{},"body":{"injectables/ConversationsRepository.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{}}}],["query",{"_index":75,"title":{},"body":{"classes/AppGateway.html":{},"classes/AuthResolver.html":{},"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/FriendsResolver.html":{},"classes/MessagesResolver.html":{},"classes/PostsResolver.html":{},"classes/ProfilesResolver.html":{},"classes/RequestsResolver.html":{},"classes/UsersResolver.html":{}}}],["query(undefined",{"_index":452,"title":{},"body":{"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/FriendsResolver.html":{},"classes/MessagesResolver.html":{},"classes/PostsResolver.html":{},"classes/ProfilesResolver.html":{},"classes/RequestsResolver.html":{},"classes/UsersResolver.html":{}}}],["query?.session",{"_index":80,"title":{},"body":{"classes/AppGateway.html":{}}}],["queue",{"_index":550,"title":{},"body":{"modules/ConversationsModule.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsService.html":{},"modules/MessagesModule.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"modules/S3Module.html":{},"classes/S3Processor.html":{}}}],["queueaddfriend",{"_index":1475,"title":{},"body":{"injectables/ProfilesService.html":{}}}],["queueaddfriend(userid",{"_index":1479,"title":{},"body":{"injectables/ProfilesService.html":{}}}],["queuecreateconversation",{"_index":665,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["queuecreateconversation(infoconversation",{"_index":677,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["random",{"_index":1765,"title":{},"body":{"modules/UsersModule.html":{}}}],["random(+nowunix",{"_index":1774,"title":{},"body":{"modules/UsersModule.html":{}}}],["rc",{"_index":1545,"title":{},"body":{"classes/Request.html":{}}}],["readonly",{"_index":425,"title":{},"body":{"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["receive",{"_index":1881,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["receiver",{"_index":1030,"title":{},"body":{"injectables/MessagesGateway.html":{},"injectables/ProfilesRepository.html":{}}}],["receiver.id",{"_index":1039,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["receiverpacket",{"_index":1223,"title":{},"body":{"injectables/PostsGateway.html":{}}}],["receiverpacket.push(...((await",{"_index":1224,"title":{},"body":{"injectables/PostsGateway.html":{}}}],["redis",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"classes/ConversationsResolver.html":{},"classes/LikesResolver.html":{},"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["redis://${process.env.redis_host}:${process.env.port_redis",{"_index":1525,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["redisioadapter",{"_index":1506,"title":{"classes/RedisIoAdapter.html":{}},"body":{"classes/RedisIoAdapter.html":{},"coverage.html":{}}}],["redispubsub",{"_index":638,"title":{},"body":{"classes/ConversationsResolver.html":{},"classes/LikesResolver.html":{},"classes/PostsResolver.html":{},"modules/PubSubModule.html":{}}}],["redisstore",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["ref",{"_index":484,"title":{},"body":{"classes/Conversation.html":{}}}],["reflect",{"_index":1986,"title":{},"body":{"dependencies.html":{}}}],["refreshaccesstoken",{"_index":309,"title":{},"body":{"classes/AuthResolver.html":{}}}],["refreshaccesstoken(@args('userinput",{"_index":310,"title":{},"body":{"classes/AuthResolver.html":{}}}],["refreshaccesstoken(userinput",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"classes/User.html":{},"classes/UserInput.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["regex",{"_index":1416,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["register",{"_index":258,"title":{},"body":{"classes/AuthResolver.html":{},"modules/UsersModule.html":{}}}],["register(@args('createinput",{"_index":307,"title":{},"body":{"classes/AuthResolver.html":{}}}],["register(createinput",{"_index":272,"title":{},"body":{"classes/AuthResolver.html":{}}}],["registerresponse",{"_index":1534,"title":{"classes/RegisterResponse.html":{}},"body":{"classes/RegisterResponse.html":{},"coverage.html":{}}}],["reject",{"_index":1691,"title":{},"body":{"injectables/S3Service.html":{}}}],["reject(err",{"_index":1706,"title":{},"body":{"injectables/S3Service.html":{}}}],["rejectrequest",{"_index":1578,"title":{},"body":{"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{}}}],["rejectrequest(request",{"_index":1588,"title":{},"body":{"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{}}}],["remove",{"_index":90,"title":{},"body":{"classes/AppGateway.html":{}}}],["removedlist",{"_index":103,"title":{},"body":{"classes/AppGateway.html":{}}}],["removeoncomplete",{"_index":684,"title":{},"body":{"injectables/ConversationsService.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{}}}],["removeonfail",{"_index":685,"title":{},"body":{"injectables/ConversationsService.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{}}}],["req",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"injectables/HomeMiddleware.html":{}}}],["request",{"_index":864,"title":{"classes/Request.html":{}},"body":{"injectables/HomeMiddleware.html":{},"injectables/NotificationsGateway.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"coverage.html":{}}}],["request._id",{"_index":1564,"title":{},"body":{"injectables/RequestsGateway.html":{}}}],["request.name",{"_index":1573,"title":{},"body":{"modules/RequestsModule.html":{}}}],["request.type",{"_index":1149,"title":{},"body":{"injectables/NotificationsGateway.html":{}}}],["request.userreceive",{"_index":1145,"title":{},"body":{"injectables/NotificationsGateway.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{}}}],["request.userrequest",{"_index":1144,"title":{},"body":{"injectables/NotificationsGateway.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{}}}],["requestadded",{"_index":1616,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["requestdocument",{"_index":1549,"title":{},"body":{"classes/Request.html":{},"injectables/RequestsRepository.html":{},"miscellaneous/typealiases.html":{}}}],["requestinput",{"_index":760,"title":{},"body":{"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/RequestsResolver.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{}}}],["requestinput.createrequest",{"_index":1610,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["requestinput.inforequest",{"_index":1608,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["requestinput.retrieverequest",{"_index":1614,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["requestmodel",{"_index":1581,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["requestor",{"_index":1428,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["requests.repository",{"_index":1635,"title":{},"body":{"injectables/RequestsService.html":{}}}],["requests.schema",{"_index":1590,"title":{},"body":{"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{}}}],["requests.service",{"_index":1560,"title":{},"body":{"injectables/RequestsGateway.html":{},"classes/RequestsResolver.html":{}}}],["requestschema",{"_index":1550,"title":{},"body":{"classes/Request.html":{},"modules/RequestsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requestschema.index",{"_index":1552,"title":{},"body":{"classes/Request.html":{}}}],["requestsgateway",{"_index":1553,"title":{"injectables/RequestsGateway.html":{}},"body":{"injectables/RequestsGateway.html":{},"modules/RequestsModule.html":{},"coverage.html":{},"overview.html":{}}}],["requestsmodule",{"_index":125,"title":{"modules/RequestsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RequestsModule.html":{},"modules.html":{},"overview.html":{}}}],["requestsrepository",{"_index":1570,"title":{"injectables/RequestsRepository.html":{}},"body":{"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"injectables/RequestsService.html":{},"coverage.html":{},"overview.html":{}}}],["requestsresolver",{"_index":1571,"title":{"classes/RequestsResolver.html":{}},"body":{"modules/RequestsModule.html":{},"classes/RequestsResolver.html":{},"coverage.html":{},"overview.html":{}}}],["requestsservice",{"_index":1555,"title":{"injectables/RequestsService.html":{}},"body":{"injectables/RequestsGateway.html":{},"modules/RequestsModule.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"coverage.html":{},"overview.html":{}}}],["require",{"_index":1641,"title":{"injectables/Require.html":{}},"body":{"injectables/Require.html":{},"coverage.html":{}}}],["requireatleast",{"_index":1649,"title":{"injectables/RequireAtLeast.html":{}},"body":{"injectables/RequireAtLeast.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["required",{"_index":394,"title":{},"body":{"classes/Comment.html":{},"classes/Conversation.html":{},"classes/FileInfo.html":{},"classes/Like.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/Post.html":{},"classes/Request.html":{},"classes/User.html":{}}}],["res",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"injectables/HomeMiddleware.html":{}}}],["reset",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ConversationsModule.html":{},"modules/FriendsModule.html":{},"modules/LikesModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/PostsModule.html":{},"modules/ProfilesModule.html":{},"modules/RequestsModule.html":{},"modules/S3Module.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":1712,"title":{},"body":{"injectables/S3Service.html":{}}}],["resolve(buffer",{"_index":1697,"title":{},"body":{"injectables/S3Service.html":{}}}],["resolve(data.location",{"_index":1707,"title":{},"body":{"injectables/S3Service.html":{}}}],["resolvefield",{"_index":1472,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["resolver",{"_index":282,"title":{},"body":{"classes/AuthResolver.html":{},"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/FriendsResolver.html":{},"classes/LikesResolver.html":{},"classes/MessagesResolver.html":{},"classes/NotificationsResolver.html":{},"classes/PostsResolver.html":{},"classes/ProfilesResolver.html":{},"classes/RequestsResolver.html":{},"classes/UsersResolver.html":{}}}],["resolver(profile",{"_index":1453,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["resolvetype",{"_index":1333,"title":{},"body":{"classes/Profile.html":{},"miscellaneous/variables.html":{}}}],["response",{"_index":865,"title":{},"body":{"injectables/HomeMiddleware.html":{}}}],["result",{"_index":108,"title":{},"body":{"classes/AppGateway.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/ChangeNameConversation.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"classes/CreateConversation.html":{},"classes/ListFriendNotInConversation.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"injectables/RequestsService.html":{},"injectables/UsersRepository.html":{}}}],["result.friendid",{"_index":625,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["result.members",{"_index":540,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["result.save",{"_index":631,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/PostsRepository.html":{}}}],["result[0",{"_index":516,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{}}}],["result[1",{"_index":517,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["resultaggregate",{"_index":1598,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["resultaggregate[0",{"_index":1602,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["resultfiles",{"_index":1097,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["resultlike",{"_index":942,"title":{},"body":{"classes/LikesResolver.html":{}}}],["resultlike.deletedcount",{"_index":945,"title":{},"body":{"classes/LikesResolver.html":{}}}],["resultpost",{"_index":1293,"title":{},"body":{"classes/PostsResolver.html":{}}}],["resultpromise",{"_index":1295,"title":{},"body":{"classes/PostsResolver.html":{}}}],["resultpromisepost",{"_index":1297,"title":{},"body":{"classes/PostsResolver.html":{}}}],["resultpromiseprofile",{"_index":1298,"title":{},"body":{"classes/PostsResolver.html":{}}}],["results",{"_index":21,"title":{},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthGateway.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"modules/CommentsModule.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"modules/FriendsModule.html":{},"classes/FriendsProfile.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"modules/NotificationsModule.html":{},"classes/NotificationsResolver.html":{},"injectables/NotificationsService.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"injectables/ObjectIdPipe.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"modules/PubSubModule.html":{},"classes/PublisherSubscriptions.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/RetrieveRequest.html":{},"modules/S3Module.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resultupdate",{"_index":1595,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["resultupdate.modifiedcount",{"_index":1597,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["retrieverequest",{"_index":767,"title":{"classes/RetrieveRequest.html":{}},"body":{"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{},"coverage.html":{}}}],["retrieverequests",{"_index":1604,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["retrieverequests(info",{"_index":1613,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["return",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GraphQLExceptionFilter.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"injectables/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/ObjectIdPipe.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"modules/PubSubModule.html":{},"classes/RedisIoAdapter.html":{},"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["returndocument",{"_index":1426,"title":{},"body":{"injectables/ProfilesRepository.html":{},"injectables/UsersRepository.html":{}}}],["returnoriginal",{"_index":1826,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["returns",{"_index":48,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"injectables/ConversationsGateway.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"injectables/ObjectIdPipe.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["returntype",{"_index":1512,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["rimraf",{"_index":1989,"title":{},"body":{"dependencies.html":{}}}],["rq",{"_index":1547,"title":{},"body":{"classes/Request.html":{}}}],["rxjs",{"_index":1991,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":797,"title":{},"body":{"classes/FileInfo.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{}}}],["s3",{"_index":1663,"title":{},"body":{"classes/S3Processor.html":{},"injectables/S3Service.html":{}}}],["s3.service",{"_index":1656,"title":{},"body":{"modules/S3Module.html":{}}}],["s3.upload",{"_index":1702,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3module",{"_index":126,"title":{"modules/S3Module.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules/ProfilesModule.html":{},"modules/S3Module.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["s3processor",{"_index":1657,"title":{"classes/S3Processor.html":{}},"body":{"classes/S3Processor.html":{},"coverage.html":{}}}],["s3service",{"_index":1081,"title":{"injectables/S3Service.html":{}},"body":{"classes/MessagesResolver.html":{},"classes/ProfilesResolver.html":{},"modules/S3Module.html":{},"injectables/S3Service.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"overview.html":{}}}],["save",{"_index":427,"title":{},"body":{"classes/CommentsRepository.html":{},"classes/LikesRepository.html":{}}}],["schema",{"_index":387,"title":{},"body":{"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/Conversation.html":{},"classes/FileInfo.html":{},"classes/FriendProfile.html":{},"classes/Like.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/Post.html":{},"classes/Profile.html":{},"modules/ProfilesModule.html":{},"classes/Request.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schema.pre('save",{"_index":1367,"title":{},"body":{"modules/ProfilesModule.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":388,"title":{},"body":{"classes/Comment.html":{},"classes/Conversation.html":{},"classes/FileInfo.html":{},"classes/FriendProfile.html":{},"classes/Like.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/Post.html":{},"classes/Profile.html":{},"classes/Request.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(comment",{"_index":396,"title":{},"body":{"classes/Comment.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(conversation",{"_index":492,"title":{},"body":{"classes/Conversation.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(friendprofile",{"_index":814,"title":{},"body":{"classes/FriendProfile.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(like",{"_index":901,"title":{},"body":{"classes/Like.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(message",{"_index":805,"title":{},"body":{"classes/FileInfo.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(post",{"_index":1206,"title":{},"body":{"classes/Post.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(profile",{"_index":1335,"title":{},"body":{"classes/Profile.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(request",{"_index":1551,"title":{},"body":{"classes/Request.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1743,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["sdk",{"_index":1665,"title":{},"body":{"classes/S3Processor.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["sdk/clients/s3",{"_index":1684,"title":{},"body":{"injectables/S3Service.html":{}}}],["search",{"_index":704,"title":{"classes/Search.html":{}},"body":{"classes/Create.html":{},"classes/Friend.html":{},"classes/Obtain.html":{},"classes/Search.html":{},"classes/_Upload_.html":{},"coverage.html":{}}}],["searchinput",{"_index":1407,"title":{},"body":{"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{}}}],["searchinput.keyword",{"_index":1417,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["searchuser",{"_index":1390,"title":{},"body":{"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{}}}],["searchuser(searchinput",{"_index":1404,"title":{},"body":{"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{}}}],["seconds",{"_index":1771,"title":{},"body":{"modules/UsersModule.html":{}}}],["secret",{"_index":229,"title":{},"body":{"guards/AuthGuard.html":{}}}],["see",{"_index":2016,"title":{},"body":{"index.html":{}}}],["send",{"_index":1188,"title":{"classes/Send.html":{}},"body":{"classes/PaginationMessages.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"coverage.html":{}}}],["sender",{"_index":534,"title":{},"body":{"injectables/ConversationsGateway.html":{},"classes/FileInfo.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{}}}],["senderid",{"_index":1062,"title":{},"body":{"injectables/MessagesRepository.html":{},"injectables/MessagesService.html":{}}}],["sendersocketids",{"_index":524,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["sendersocketids.filter((socketid",{"_index":526,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["sendfiles",{"_index":1052,"title":{"classes/SendFiles.html":{}},"body":{"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/PaginationMessages.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"coverage.html":{}}}],["sendfiles(files",{"_index":1061,"title":{},"body":{"injectables/MessagesRepository.html":{},"injectables/MessagesService.html":{}}}],["sendmessage",{"_index":1053,"title":{},"body":{"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{}}}],["sendmessage(message",{"_index":1065,"title":{},"body":{"injectables/MessagesRepository.html":{}}}],["sendmessage(payload",{"_index":1086,"title":{},"body":{"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{}}}],["sendmultiplefiles",{"_index":1079,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["sendmultiplefiles(files",{"_index":1089,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["sent",{"_index":1565,"title":{},"body":{"injectables/RequestsGateway.html":{}}}],["server",{"_index":28,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AuthGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"classes/RedisIoAdapter.html":{},"injectables/RequestsGateway.html":{},"dependencies.html":{},"index.html":{}}}],["server.adapter(this.adapterconstructor",{"_index":1533,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["serveroptions",{"_index":1516,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["session",{"_index":1961,"title":{},"body":{"dependencies.html":{}}}],["shoud",{"_index":1740,"title":{},"body":{"classes/User.html":{}}}],["signaldata",{"_index":1021,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["size",{"_index":603,"title":{},"body":{"injectables/ConversationsRepository.html":{},"classes/PostsRepository.html":{}}}],["socket",{"_index":45,"title":{},"body":{"classes/AppGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["socket.io",{"_index":65,"title":{},"body":{"classes/AppGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"classes/RedisIoAdapter.html":{},"injectables/RequestsGateway.html":{},"dependencies.html":{}}}],["socket.io/redis",{"_index":1521,"title":{},"body":{"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["socketcaller",{"_index":1025,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["socketid",{"_index":91,"title":{},"body":{"classes/AppGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["softdeleteuser",{"_index":1789,"title":{},"body":{"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["softdeleteuser(@args('userinput",{"_index":1850,"title":{},"body":{"classes/UsersResolver.html":{}}}],["softdeleteuser(userinput",{"_index":1804,"title":{},"body":{"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["sort",{"_index":611,"title":{},"body":{"injectables/ConversationsRepository.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthGateway.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"modules/CommentsModule.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"modules/FriendsModule.html":{},"classes/FriendsProfile.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongoExceptionFilter.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"modules/NotificationsModule.html":{},"classes/NotificationsResolver.html":{},"injectables/NotificationsService.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"injectables/ObjectIdPipe.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"modules/PubSubModule.html":{},"classes/PublisherSubscriptions.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/RetrieveRequest.html":{},"modules/S3Module.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{}}}],["sparse",{"_index":1737,"title":{},"body":{"classes/User.html":{}}}],["src/.../app.module.ts",{"_index":2054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authorization.decorator.ts",{"_index":2052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../comments.schema.ts",{"_index":2037,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../conversations.schema.ts",{"_index":2038,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../friends.schema.ts",{"_index":2043,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../getexecutioncontext.decorator.ts",{"_index":2003,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../isnonce.decorator.ts",{"_index":2004,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../isobjectid.decorator.ts",{"_index":2005,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../likes.schema.ts",{"_index":2039,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2002,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../messages.schema.ts",{"_index":2044,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../payload.ts",{"_index":2045,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../posts.schema.ts",{"_index":2040,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../profiles.schema.ts",{"_index":2041,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../pubsub.module.ts",{"_index":2053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../requests.resolver.ts",{"_index":2055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../requests.schema.ts",{"_index":2047,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../s3.service.ts",{"_index":2042,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../upper.middleware.ts",{"_index":2056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../useroauth.ts",{"_index":2049,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../users.schema.ts",{"_index":2048,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users.type.ts",{"_index":2046,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../validation.filter.ts",{"_index":2057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.gateway.ts",{"_index":24,"title":{},"body":{"classes/AppGateway.html":{},"coverage.html":{}}}],["src/app.gateway.ts:15",{"_index":37,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.gateway.ts:17",{"_index":43,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.gateway.ts:19",{"_index":46,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.gateway.ts:45",{"_index":50,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.gateway.ts:61",{"_index":53,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.module.ts",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":203,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":205,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":206,"title":{},"body":{"injectables/AppService.html":{}}}],["src/authentication",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authentication/auth.gateway.ts",{"_index":211,"title":{},"body":{"injectables/AuthGateway.html":{},"coverage.html":{}}}],["src/authentication/auth.gateway.ts:7",{"_index":212,"title":{},"body":{"injectables/AuthGateway.html":{}}}],["src/authentication/auth.module.ts",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/authentication/auth.resolver.ts",{"_index":254,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{}}}],["src/authentication/auth.resolver.ts:10",{"_index":261,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/authentication/auth.resolver.ts:18",{"_index":266,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/authentication/auth.resolver.ts:31",{"_index":270,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/authentication/auth.resolver.ts:45",{"_index":275,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/authentication/auth.service.ts",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/authentication/auth.service.ts:38",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/authentication/auth.service.ts:6",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/authentication/auth.service.ts:9",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/authentication/dto/logininput.input.ts",{"_index":957,"title":{},"body":{"classes/LoginInput.html":{},"coverage.html":{}}}],["src/authentication/dto/logininput.input.ts:11",{"_index":961,"title":{},"body":{"classes/LoginInput.html":{}}}],["src/authentication/dto/logininput.input.ts:17",{"_index":960,"title":{},"body":{"classes/LoginInput.html":{}}}],["src/authentication/dto/logininput.input.ts:21",{"_index":959,"title":{},"body":{"classes/LoginInput.html":{}}}],["src/authentication/types/accesstokenresponse.ts",{"_index":6,"title":{},"body":{"classes/AccessTokenResponse.html":{},"coverage.html":{}}}],["src/authentication/types/accesstokenresponse.ts:6",{"_index":16,"title":{},"body":{"classes/AccessTokenResponse.html":{}}}],["src/authentication/types/loginresponse.ts",{"_index":962,"title":{},"body":{"classes/LoginResponse.html":{},"coverage.html":{}}}],["src/authentication/types/loginresponse.ts:10",{"_index":964,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/authentication/types/loginresponse.ts:7",{"_index":963,"title":{},"body":{"classes/LoginResponse.html":{}}}],["src/authentication/types/payload.ts",{"_index":2050,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/authentication/types/registerresponse.ts",{"_index":1535,"title":{},"body":{"classes/RegisterResponse.html":{},"coverage.html":{}}}],["src/authentication/types/registerresponse.ts:10",{"_index":1537,"title":{},"body":{"classes/RegisterResponse.html":{}}}],["src/authentication/types/registerresponse.ts:7",{"_index":1536,"title":{},"body":{"classes/RegisterResponse.html":{}}}],["src/comments",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{}}}],["src/comments/comments.module.ts",{"_index":401,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/comments/comments.repository.ts",{"_index":407,"title":{},"body":{"classes/CommentsRepository.html":{},"coverage.html":{}}}],["src/comments/comments.repository.ts:10",{"_index":417,"title":{},"body":{"classes/CommentsRepository.html":{}}}],["src/comments/comments.repository.ts:28",{"_index":419,"title":{},"body":{"classes/CommentsRepository.html":{}}}],["src/comments/comments.repository.ts:39",{"_index":421,"title":{},"body":{"classes/CommentsRepository.html":{}}}],["src/comments/comments.repository.ts:8",{"_index":413,"title":{},"body":{"classes/CommentsRepository.html":{}}}],["src/comments/comments.resolver.ts",{"_index":439,"title":{},"body":{"classes/CommentsResolver.html":{},"coverage.html":{}}}],["src/comments/comments.resolver.ts:14",{"_index":443,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["src/comments/comments.resolver.ts:28",{"_index":449,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["src/comments/comments.resolver.ts:56",{"_index":451,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["src/comments/comments.resolver.ts:67",{"_index":453,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["src/comments/comments.resolver.ts:75",{"_index":446,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["src/comments/comments.schema.ts",{"_index":364,"title":{},"body":{"classes/Comment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/comments/comments.schema.ts:21",{"_index":372,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.schema.ts:25",{"_index":383,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.schema.ts:29",{"_index":381,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.schema.ts:33",{"_index":384,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.schema.ts:37",{"_index":377,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.schema.ts:40",{"_index":374,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.schema.ts:43",{"_index":385,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.service.ts",{"_index":473,"title":{},"body":{"injectables/CommentsService.html":{},"coverage.html":{}}}],["src/comments/comments.service.ts:11",{"_index":476,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:15",{"_index":477,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:19",{"_index":478,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:5",{"_index":475,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/common/adapters/redis.adapter.ts",{"_index":1507,"title":{},"body":{"classes/RedisIoAdapter.html":{},"coverage.html":{}}}],["src/common/adapters/redis.adapter.ts:10",{"_index":1514,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/common/adapters/redis.adapter.ts:24",{"_index":1517,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/common/adapters/redis.adapter.ts:8",{"_index":1513,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/common/decorators/authorization.decorator.ts",{"_index":1904,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/getexecutioncontext.decorator.ts",{"_index":1905,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorators/isnonce.decorator.ts",{"_index":1907,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorators/isobjectid.decorator.ts",{"_index":1909,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/exceptions/graphql.exception.ts",{"_index":843,"title":{},"body":{"classes/GraphQLException.html":{},"coverage.html":{}}}],["src/common/exceptions/graphql.exception.ts:3",{"_index":848,"title":{},"body":{"classes/GraphQLException.html":{}}}],["src/common/filters/graphql.filter.ts",{"_index":851,"title":{},"body":{"classes/GraphQLExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filters/graphql.filter.ts:6",{"_index":854,"title":{},"body":{"classes/GraphQLExceptionFilter.html":{}}}],["src/common/filters/mongo.filter.ts",{"_index":1115,"title":{},"body":{"classes/MongoExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filters/mongo.filter.ts:6",{"_index":1116,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["src/common/filters/mongoose.filter.ts",{"_index":1121,"title":{},"body":{"classes/MongooseExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filters/mongoose.filter.ts:6",{"_index":1122,"title":{},"body":{"classes/MongooseExceptionFilter.html":{}}}],["src/common/filters/validation.filter.ts",{"_index":1875,"title":{},"body":{"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/filters/validation.filter.ts:13",{"_index":1877,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["src/common/graphql/types/deleteresult.ts",{"_index":775,"title":{},"body":{"classes/DeleteResult.html":{},"coverage.html":{}}}],["src/common/graphql/types/deleteresult.ts:6",{"_index":778,"title":{},"body":{"classes/DeleteResult.html":{}}}],["src/common/graphql/types/deleteresult.ts:9",{"_index":779,"title":{},"body":{"classes/DeleteResult.html":{}}}],["src/common/graphql/types/file.ts",{"_index":780,"title":{},"body":{"classes/File.html":{},"coverage.html":{}}}],["src/common/graphql/types/file.ts:12",{"_index":786,"title":{},"body":{"classes/File.html":{}}}],["src/common/graphql/types/file.ts:15",{"_index":789,"title":{},"body":{"classes/File.html":{}}}],["src/common/graphql/types/file.ts:6",{"_index":787,"title":{},"body":{"classes/File.html":{}}}],["src/common/graphql/types/file.ts:9",{"_index":788,"title":{},"body":{"classes/File.html":{}}}],["src/common/guards/auth.guard.ts",{"_index":216,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/common/guards/auth.guard.ts:7",{"_index":220,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/common/middlewares/home.middleware.ts",{"_index":861,"title":{},"body":{"injectables/HomeMiddleware.html":{},"coverage.html":{}}}],["src/common/middlewares/home.middleware.ts:6",{"_index":867,"title":{},"body":{"injectables/HomeMiddleware.html":{}}}],["src/common/middlewares/upper.middleware.ts",{"_index":1910,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/pipes/objectid.pipe.ts",{"_index":1173,"title":{},"body":{"injectables/ObjectIdPipe.html":{},"coverage.html":{}}}],["src/common/pipes/objectid.pipe.ts:6",{"_index":1176,"title":{},"body":{"injectables/ObjectIdPipe.html":{}}}],["src/common/pipes/require.pipe.ts",{"_index":1642,"title":{},"body":{"injectables/Require.html":{},"coverage.html":{}}}],["src/common/pipes/require.pipe.ts:5",{"_index":1645,"title":{},"body":{"injectables/Require.html":{}}}],["src/common/pipes/requireatleast.pipe.ts",{"_index":1650,"title":{},"body":{"injectables/RequireAtLeast.html":{},"coverage.html":{}}}],["src/common/pipes/requireatleast.pipe.ts:5",{"_index":1651,"title":{},"body":{"injectables/RequireAtLeast.html":{}}}],["src/common/validators/nonce.validator.ts",{"_index":873,"title":{},"body":{"classes/IsNonceConstraint.html":{},"coverage.html":{}}}],["src/common/validators/nonce.validator.ts:5",{"_index":879,"title":{},"body":{"classes/IsNonceConstraint.html":{}}}],["src/common/validators/nonce.validator.ts:9",{"_index":877,"title":{},"body":{"classes/IsNonceConstraint.html":{}}}],["src/common/validators/objectid.validator.ts",{"_index":883,"title":{},"body":{"classes/IsObjectIdConstraint.html":{},"coverage.html":{}}}],["src/common/validators/objectid.validator.ts:10",{"_index":884,"title":{},"body":{"classes/IsObjectIdConstraint.html":{}}}],["src/common/validators/objectid.validator.ts:6",{"_index":886,"title":{},"body":{"classes/IsObjectIdConstraint.html":{}}}],["src/conversations",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"classes/ChangeNameConversation.html":{},"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversation.html":{},"classes/ListFriendNotInConversation.html":{},"injectables/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/ProfilesService.html":{}}}],["src/conversations/conversations.gateway.ts",{"_index":494,"title":{},"body":{"injectables/ConversationsGateway.html":{},"coverage.html":{}}}],["src/conversations/conversations.gateway.ts:18",{"_index":498,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["src/conversations/conversations.gateway.ts:25",{"_index":505,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["src/conversations/conversations.gateway.ts:28",{"_index":501,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["src/conversations/conversations.gateway.ts:94",{"_index":504,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["src/conversations/conversations.module",{"_index":1364,"title":{},"body":{"modules/ProfilesModule.html":{}}}],["src/conversations/conversations.module.ts",{"_index":547,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["src/conversations/conversations.processor.ts",{"_index":553,"title":{},"body":{"classes/ConversationsProcessor.html":{},"coverage.html":{}}}],["src/conversations/conversations.processor.ts:10",{"_index":560,"title":{},"body":{"classes/ConversationsProcessor.html":{}}}],["src/conversations/conversations.processor.ts:6",{"_index":556,"title":{},"body":{"classes/ConversationsProcessor.html":{}}}],["src/conversations/conversations.repository.ts",{"_index":566,"title":{},"body":{"injectables/ConversationsRepository.html":{},"coverage.html":{}}}],["src/conversations/conversations.repository.ts:14",{"_index":582,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["src/conversations/conversations.repository.ts:148",{"_index":590,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["src/conversations/conversations.repository.ts:152",{"_index":596,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["src/conversations/conversations.repository.ts:18",{"_index":586,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["src/conversations/conversations.repository.ts:210",{"_index":577,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["src/conversations/conversations.repository.ts:230",{"_index":594,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["src/conversations/conversations.repository.ts:262",{"_index":580,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["src/conversations/conversations.repository.ts:30",{"_index":592,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["src/conversations/conversations.repository.ts:84",{"_index":588,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["src/conversations/conversations.repository.ts:9",{"_index":574,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["src/conversations/conversations.resolver.ts",{"_index":635,"title":{},"body":{"classes/ConversationsResolver.html":{},"coverage.html":{}}}],["src/conversations/conversations.resolver.ts:108",{"_index":650,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["src/conversations/conversations.resolver.ts:11",{"_index":639,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["src/conversations/conversations.resolver.ts:21",{"_index":644,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["src/conversations/conversations.resolver.ts:32",{"_index":648,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["src/conversations/conversations.resolver.ts:42",{"_index":646,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["src/conversations/conversations.resolver.ts:55",{"_index":649,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["src/conversations/conversations.resolver.ts:71",{"_index":641,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["src/conversations/conversations.resolver.ts:86",{"_index":645,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["src/conversations/conversations.resolver.ts:97",{"_index":642,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["src/conversations/conversations.schema.ts",{"_index":482,"title":{},"body":{"classes/Conversation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/conversations/conversations.schema.ts:17",{"_index":483,"title":{},"body":{"classes/Conversation.html":{}}}],["src/conversations/conversations.schema.ts:21",{"_index":488,"title":{},"body":{"classes/Conversation.html":{}}}],["src/conversations/conversations.schema.ts:25",{"_index":486,"title":{},"body":{"classes/Conversation.html":{}}}],["src/conversations/conversations.service.ts",{"_index":664,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{}}}],["src/conversations/conversations.service.ts:14",{"_index":670,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/conversations.service.ts:18",{"_index":671,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/conversations.service.ts:22",{"_index":678,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/conversations.service.ts:30",{"_index":674,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/conversations.service.ts:34",{"_index":672,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/conversations.service.ts:38",{"_index":673,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/conversations.service.ts:41",{"_index":676,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/conversations.service.ts:44",{"_index":668,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/conversations.service.ts:53",{"_index":675,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/conversations.service.ts:57",{"_index":669,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/conversations.service.ts:8",{"_index":667,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/dto/conversation.input.ts",{"_index":347,"title":{},"body":{"classes/ChangeNameConversation.html":{},"classes/CreateConversation.html":{},"classes/ListFriendNotInConversation.html":{},"coverage.html":{}}}],["src/conversations/dto/conversation.input.ts:12",{"_index":708,"title":{},"body":{"classes/CreateConversation.html":{}}}],["src/conversations/dto/conversation.input.ts:16",{"_index":710,"title":{},"body":{"classes/CreateConversation.html":{}}}],["src/conversations/dto/conversation.input.ts:22",{"_index":956,"title":{},"body":{"classes/ListFriendNotInConversation.html":{}}}],["src/friends",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/FriendsModule.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/Profile.html":{},"modules/ProfilesModule.html":{},"injectables/ProfilesRepository.html":{}}}],["src/friends/friends.module.ts",{"_index":819,"title":{},"body":{"modules/FriendsModule.html":{}}}],["src/friends/friends.resolver.ts",{"_index":825,"title":{},"body":{"classes/FriendsResolver.html":{},"coverage.html":{}}}],["src/friends/friends.resolver.ts:10",{"_index":828,"title":{},"body":{"classes/FriendsResolver.html":{}}}],["src/friends/friends.resolver.ts:14",{"_index":830,"title":{},"body":{"classes/FriendsResolver.html":{}}}],["src/friends/friends.schema.ts",{"_index":809,"title":{},"body":{"classes/FriendProfile.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/friends/friends.schema.ts:14",{"_index":811,"title":{},"body":{"classes/FriendProfile.html":{}}}],["src/friends/friends.service.ts",{"_index":833,"title":{},"body":{"injectables/FriendsService.html":{},"coverage.html":{}}}],["src/friends/friends.service.ts:6",{"_index":836,"title":{},"body":{"injectables/FriendsService.html":{}}}],["src/friends/friends.service.ts:9",{"_index":838,"title":{},"body":{"injectables/FriendsService.html":{}}}],["src/friends/types.ts",{"_index":822,"title":{},"body":{"classes/FriendsProfile.html":{},"coverage.html":{}}}],["src/likes",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{}}}],["src/likes/likes.module.ts",{"_index":908,"title":{},"body":{"modules/LikesModule.html":{}}}],["src/likes/likes.repository.ts",{"_index":912,"title":{},"body":{"classes/LikesRepository.html":{},"coverage.html":{}}}],["src/likes/likes.repository.ts:14",{"_index":919,"title":{},"body":{"classes/LikesRepository.html":{}}}],["src/likes/likes.repository.ts:26",{"_index":921,"title":{},"body":{"classes/LikesRepository.html":{}}}],["src/likes/likes.repository.ts:8",{"_index":916,"title":{},"body":{"classes/LikesRepository.html":{}}}],["src/likes/likes.resolver.ts",{"_index":927,"title":{},"body":{"classes/LikesResolver.html":{},"coverage.html":{}}}],["src/likes/likes.resolver.ts:15",{"_index":931,"title":{},"body":{"classes/LikesResolver.html":{}}}],["src/likes/likes.resolver.ts:30",{"_index":932,"title":{},"body":{"classes/LikesResolver.html":{}}}],["src/likes/likes.resolver.ts:48",{"_index":936,"title":{},"body":{"classes/LikesResolver.html":{}}}],["src/likes/likes.resolver.ts:67",{"_index":934,"title":{},"body":{"classes/LikesResolver.html":{}}}],["src/likes/likes.schema.ts",{"_index":889,"title":{},"body":{"classes/Like.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/likes/likes.schema.ts:18",{"_index":890,"title":{},"body":{"classes/Like.html":{}}}],["src/likes/likes.schema.ts:22",{"_index":894,"title":{},"body":{"classes/Like.html":{}}}],["src/likes/likes.schema.ts:26",{"_index":893,"title":{},"body":{"classes/Like.html":{}}}],["src/likes/likes.schema.ts:30",{"_index":892,"title":{},"body":{"classes/Like.html":{}}}],["src/likes/likes.schema.ts:33",{"_index":891,"title":{},"body":{"classes/Like.html":{}}}],["src/likes/likes.schema.ts:36",{"_index":895,"title":{},"body":{"classes/Like.html":{}}}],["src/likes/likes.service.ts",{"_index":947,"title":{},"body":{"injectables/LikesService.html":{},"coverage.html":{}}}],["src/likes/likes.service.ts:17",{"_index":951,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/likes/likes.service.ts:28",{"_index":952,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/likes/likes.service.ts:7",{"_index":949,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/main.ts",{"_index":1916,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/messages",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/MessagesModule.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{}}}],["src/messages/dto/messages.input.ts",{"_index":1184,"title":{},"body":{"classes/PaginationMessages.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"coverage.html":{}}}],["src/messages/dto/messages.input.ts:11",{"_index":1718,"title":{},"body":{"classes/Send.html":{}}}],["src/messages/dto/messages.input.ts:15",{"_index":1716,"title":{},"body":{"classes/Send.html":{}}}],["src/messages/dto/messages.input.ts:18",{"_index":1719,"title":{},"body":{"classes/Send.html":{}}}],["src/messages/dto/messages.input.ts:26",{"_index":1720,"title":{},"body":{"classes/SendFiles.html":{}}}],["src/messages/dto/messages.input.ts:29",{"_index":1721,"title":{},"body":{"classes/SendFiles.html":{}}}],["src/messages/dto/messages.input.ts:38",{"_index":1186,"title":{},"body":{"classes/PaginationMessages.html":{}}}],["src/messages/dto/messages.input.ts:41",{"_index":1187,"title":{},"body":{"classes/PaginationMessages.html":{}}}],["src/messages/messages.gateway.ts",{"_index":977,"title":{},"body":{"injectables/MessagesGateway.html":{},"coverage.html":{}}}],["src/messages/messages.gateway.ts:124",{"_index":988,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["src/messages/messages.gateway.ts:137",{"_index":991,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["src/messages/messages.gateway.ts:149",{"_index":994,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["src/messages/messages.gateway.ts:166",{"_index":1006,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["src/messages/messages.gateway.ts:17",{"_index":985,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["src/messages/messages.gateway.ts:22",{"_index":1007,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["src/messages/messages.gateway.ts:25",{"_index":1000,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["src/messages/messages.gateway.ts:50",{"_index":997,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["src/messages/messages.gateway.ts:97",{"_index":1003,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["src/messages/messages.module.ts",{"_index":1047,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/messages/messages.repository.ts",{"_index":1050,"title":{},"body":{"injectables/MessagesRepository.html":{},"coverage.html":{}}}],["src/messages/messages.repository.ts:15",{"_index":1066,"title":{},"body":{"injectables/MessagesRepository.html":{}}}],["src/messages/messages.repository.ts:26",{"_index":1059,"title":{},"body":{"injectables/MessagesRepository.html":{}}}],["src/messages/messages.repository.ts:85",{"_index":1064,"title":{},"body":{"injectables/MessagesRepository.html":{}}}],["src/messages/messages.repository.ts:9",{"_index":1055,"title":{},"body":{"injectables/MessagesRepository.html":{}}}],["src/messages/messages.resolver.ts",{"_index":1078,"title":{},"body":{"classes/MessagesResolver.html":{},"coverage.html":{}}}],["src/messages/messages.resolver.ts:12",{"_index":1082,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["src/messages/messages.resolver.ts:21",{"_index":1088,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["src/messages/messages.resolver.ts:33",{"_index":1085,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["src/messages/messages.resolver.ts:47",{"_index":1091,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["src/messages/messages.schema.ts",{"_index":791,"title":{},"body":{"classes/FileInfo.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/messages/messages.schema.ts:11",{"_index":793,"title":{},"body":{"classes/FileInfo.html":{}}}],["src/messages/messages.schema.ts:14",{"_index":792,"title":{},"body":{"classes/FileInfo.html":{}}}],["src/messages/messages.schema.ts:26",{"_index":965,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.schema.ts:30",{"_index":972,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.schema.ts:34",{"_index":967,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.schema.ts:38",{"_index":971,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.schema.ts:42",{"_index":970,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.schema.ts:46",{"_index":973,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.schema.ts:49",{"_index":968,"title":{},"body":{"classes/Message.html":{}}}],["src/messages/messages.schema.ts:58",{"_index":974,"title":{},"body":{"classes/MessagesConversation.html":{}}}],["src/messages/messages.schema.ts:61",{"_index":975,"title":{},"body":{"classes/MessagesConversation.html":{}}}],["src/messages/messages.service.ts",{"_index":1104,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/messages/messages.service.ts:17",{"_index":1107,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/messages/messages.service.ts:21",{"_index":1108,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/messages/messages.service.ts:5",{"_index":1106,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/messages/messages.service.ts:8",{"_index":1109,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/notifications",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"modules/NotificationsModule.html":{}}}],["src/notifications/notifications.gateway.ts",{"_index":1136,"title":{},"body":{"injectables/NotificationsGateway.html":{},"coverage.html":{}}}],["src/notifications/notifications.gateway.ts:15",{"_index":1138,"title":{},"body":{"injectables/NotificationsGateway.html":{}}}],["src/notifications/notifications.gateway.ts:17",{"_index":1142,"title":{},"body":{"injectables/NotificationsGateway.html":{}}}],["src/notifications/notifications.gateway.ts:20",{"_index":1141,"title":{},"body":{"injectables/NotificationsGateway.html":{}}}],["src/notifications/notifications.module.ts",{"_index":1155,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["src/notifications/notifications.resolver.ts",{"_index":1157,"title":{},"body":{"classes/NotificationsResolver.html":{},"coverage.html":{}}}],["src/notifications/notifications.service.ts",{"_index":1158,"title":{},"body":{"injectables/NotificationsService.html":{},"coverage.html":{}}}],["src/posts",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/Like.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdatePost.html":{}}}],["src/posts/dto/posts.input.ts",{"_index":729,"title":{},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PostDto.html":{},"classes/UpdatePost.html":{},"coverage.html":{}}}],["src/posts/dto/posts.input.ts:22",{"_index":1207,"title":{},"body":{"classes/PostDto.html":{}}}],["src/posts/dto/posts.input.ts:28",{"_index":1208,"title":{},"body":{"classes/PostDto.html":{}}}],["src/posts/dto/posts.input.ts:35",{"_index":1210,"title":{},"body":{"classes/PostDto.html":{}}}],["src/posts/dto/posts.input.ts:66",{"_index":841,"title":{},"body":{"classes/GetPosts.html":{}}}],["src/posts/posts.gateway.ts",{"_index":1212,"title":{},"body":{"injectables/PostsGateway.html":{},"coverage.html":{}}}],["src/posts/posts.gateway.ts:16",{"_index":1213,"title":{},"body":{"injectables/PostsGateway.html":{}}}],["src/posts/posts.gateway.ts:21",{"_index":1217,"title":{},"body":{"injectables/PostsGateway.html":{}}}],["src/posts/posts.gateway.ts:24",{"_index":1216,"title":{},"body":{"injectables/PostsGateway.html":{}}}],["src/posts/posts.module.ts",{"_index":1233,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.repository.ts",{"_index":1238,"title":{},"body":{"classes/PostsRepository.html":{},"coverage.html":{}}}],["src/posts/posts.repository.ts:11",{"_index":1244,"title":{},"body":{"classes/PostsRepository.html":{}}}],["src/posts/posts.repository.ts:17",{"_index":1247,"title":{},"body":{"classes/PostsRepository.html":{}}}],["src/posts/posts.repository.ts:21",{"_index":1253,"title":{},"body":{"classes/PostsRepository.html":{}}}],["src/posts/posts.repository.ts:237",{"_index":1250,"title":{},"body":{"classes/PostsRepository.html":{}}}],["src/posts/posts.repository.ts:8",{"_index":1240,"title":{},"body":{"classes/PostsRepository.html":{}}}],["src/posts/posts.resolver.ts",{"_index":1280,"title":{},"body":{"classes/PostsResolver.html":{},"coverage.html":{}}}],["src/posts/posts.resolver.ts:14",{"_index":1282,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.resolver.ts:25",{"_index":1284,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.resolver.ts:66",{"_index":1285,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.resolver.ts:77",{"_index":1287,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.resolver.ts:89",{"_index":1291,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.schema.ts",{"_index":1189,"title":{},"body":{"classes/Post.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/posts/posts.schema.ts:17",{"_index":1193,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.schema.ts:21",{"_index":1194,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.schema.ts:27",{"_index":1202,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.schema.ts:30",{"_index":1196,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.schema.ts:33",{"_index":1195,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.schema.ts:36",{"_index":1197,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.schema.ts:39",{"_index":1203,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.schema.ts:43",{"_index":1199,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.schema.ts:46",{"_index":1200,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.schema.ts:49",{"_index":1201,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.service.ts",{"_index":1305,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:11",{"_index":1308,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:15",{"_index":1309,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:19",{"_index":1311,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:23",{"_index":1310,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:6",{"_index":1307,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/profiles",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"modules/CommentsModule.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"modules/ConversationsModule.html":{},"classes/CreateConversation.html":{},"classes/FileInfo.html":{},"modules/FriendsModule.html":{},"classes/FriendsProfile.html":{},"injectables/FriendsService.html":{},"classes/Like.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"classes/Post.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"injectables/ProfilesGateway.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"modules/RequestsModule.html":{},"injectables/RequestsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/profiles/dto/profile.input.ts",{"_index":695,"title":{},"body":{"classes/Create.html":{},"classes/Friend.html":{},"classes/Obtain.html":{},"classes/Search.html":{},"classes/_Upload_.html":{},"coverage.html":{}}}],["src/profiles/dto/profile.input.ts:12",{"_index":696,"title":{},"body":{"classes/Create.html":{}}}],["src/profiles/dto/profile.input.ts:15",{"_index":699,"title":{},"body":{"classes/Create.html":{}}}],["src/profiles/dto/profile.input.ts:18",{"_index":698,"title":{},"body":{"classes/Create.html":{}}}],["src/profiles/dto/profile.input.ts:24",{"_index":1714,"title":{},"body":{"classes/Search.html":{}}}],["src/profiles/dto/profile.input.ts:31",{"_index":1182,"title":{},"body":{"classes/Obtain.html":{}}}],["src/profiles/dto/profile.input.ts:38",{"_index":1890,"title":{},"body":{"classes/_Upload_.html":{}}}],["src/profiles/dto/profile.input.ts:41",{"_index":1891,"title":{},"body":{"classes/_Upload_.html":{}}}],["src/profiles/dto/profile.input.ts:48",{"_index":807,"title":{},"body":{"classes/Friend.html":{}}}],["src/profiles/dto/profile.input.ts:50",{"_index":806,"title":{},"body":{"classes/Friend.html":{}}}],["src/profiles/dto/profile.input.ts:9",{"_index":697,"title":{},"body":{"classes/Create.html":{}}}],["src/profiles/profiles.gateway.ts",{"_index":1338,"title":{},"body":{"injectables/ProfilesGateway.html":{},"coverage.html":{}}}],["src/profiles/profiles.gateway.ts:15",{"_index":1341,"title":{},"body":{"injectables/ProfilesGateway.html":{}}}],["src/profiles/profiles.gateway.ts:20",{"_index":1348,"title":{},"body":{"injectables/ProfilesGateway.html":{}}}],["src/profiles/profiles.gateway.ts:23",{"_index":1344,"title":{},"body":{"injectables/ProfilesGateway.html":{}}}],["src/profiles/profiles.gateway.ts:49",{"_index":1347,"title":{},"body":{"injectables/ProfilesGateway.html":{}}}],["src/profiles/profiles.module.ts",{"_index":1363,"title":{},"body":{"modules/ProfilesModule.html":{}}}],["src/profiles/profiles.processor.ts",{"_index":1375,"title":{},"body":{"classes/ProfilesProcessor.html":{},"coverage.html":{}}}],["src/profiles/profiles.processor.ts:10",{"_index":1381,"title":{},"body":{"classes/ProfilesProcessor.html":{}}}],["src/profiles/profiles.processor.ts:16",{"_index":1379,"title":{},"body":{"classes/ProfilesProcessor.html":{}}}],["src/profiles/profiles.processor.ts:6",{"_index":1376,"title":{},"body":{"classes/ProfilesProcessor.html":{}}}],["src/profiles/profiles.repository.ts",{"_index":1386,"title":{},"body":{"injectables/ProfilesRepository.html":{},"coverage.html":{}}}],["src/profiles/profiles.repository.ts:11",{"_index":1400,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["src/profiles/profiles.repository.ts:116",{"_index":1409,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["src/profiles/profiles.repository.ts:15",{"_index":1406,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["src/profiles/profiles.repository.ts:21",{"_index":1403,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["src/profiles/profiles.repository.ts:8",{"_index":1394,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["src/profiles/profiles.repository.ts:83",{"_index":1401,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["src/profiles/profiles.repository.ts:92",{"_index":1411,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["src/profiles/profiles.repository.ts:95",{"_index":1397,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["src/profiles/profiles.resolver.ts",{"_index":1436,"title":{},"body":{"classes/ProfilesResolver.html":{},"coverage.html":{}}}],["src/profiles/profiles.resolver.ts:15",{"_index":1441,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["src/profiles/profiles.resolver.ts:24",{"_index":1442,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["src/profiles/profiles.resolver.ts:32",{"_index":1444,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["src/profiles/profiles.resolver.ts:44",{"_index":1443,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["src/profiles/profiles.resolver.ts:56",{"_index":1449,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["src/profiles/profiles.resolver.ts:85",{"_index":1447,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["src/profiles/profiles.schema.ts",{"_index":1316,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/profiles/profiles.schema.ts:20",{"_index":1324,"title":{},"body":{"classes/Profile.html":{}}}],["src/profiles/profiles.schema.ts:23",{"_index":1325,"title":{},"body":{"classes/Profile.html":{}}}],["src/profiles/profiles.schema.ts:27",{"_index":1321,"title":{},"body":{"classes/Profile.html":{}}}],["src/profiles/profiles.schema.ts:31",{"_index":1320,"title":{},"body":{"classes/Profile.html":{}}}],["src/profiles/profiles.schema.ts:35",{"_index":1326,"title":{},"body":{"classes/Profile.html":{}}}],["src/profiles/profiles.schema.ts:39",{"_index":1323,"title":{},"body":{"classes/Profile.html":{}}}],["src/profiles/profiles.service.ts",{"_index":1474,"title":{},"body":{"injectables/ProfilesService.html":{},"coverage.html":{}}}],["src/profiles/profiles.service.ts:15",{"_index":1481,"title":{},"body":{"injectables/ProfilesService.html":{}}}],["src/profiles/profiles.service.ts:18",{"_index":1478,"title":{},"body":{"injectables/ProfilesService.html":{}}}],["src/profiles/profiles.service.ts:21",{"_index":1483,"title":{},"body":{"injectables/ProfilesService.html":{}}}],["src/profiles/profiles.service.ts:24",{"_index":1477,"title":{},"body":{"injectables/ProfilesService.html":{}}}],["src/profiles/profiles.service.ts:27",{"_index":1482,"title":{},"body":{"injectables/ProfilesService.html":{}}}],["src/profiles/profiles.service.ts:31",{"_index":1480,"title":{},"body":{"injectables/ProfilesService.html":{}}}],["src/profiles/profiles.service.ts:8",{"_index":1476,"title":{},"body":{"injectables/ProfilesService.html":{}}}],["src/pubsub.input",{"_index":1292,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/pubsub.input.ts",{"_index":1504,"title":{},"body":{"classes/PublisherSubscriptions.html":{},"coverage.html":{}}}],["src/pubsub.input.ts:7",{"_index":1505,"title":{},"body":{"classes/PublisherSubscriptions.html":{}}}],["src/pubsub.module",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"classes/CommentsResolver.html":{},"classes/LikesResolver.html":{},"classes/PostsResolver.html":{}}}],["src/pubsub.module.ts",{"_index":1501,"title":{},"body":{"modules/PubSubModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/requests",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/RequestsModule.html":{},"injectables/RequestsRepository.html":{},"injectables/RequestsService.html":{}}}],["src/requests/dto/requests.input.ts",{"_index":751,"title":{},"body":{"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{},"coverage.html":{}}}],["src/requests/dto/requests.input.ts:12",{"_index":757,"title":{},"body":{"classes/CreateRequest.html":{}}}],["src/requests/dto/requests.input.ts:17",{"_index":755,"title":{},"body":{"classes/CreateRequest.html":{}}}],["src/requests/dto/requests.input.ts:26",{"_index":871,"title":{},"body":{"classes/InfoRequest.html":{}}}],["src/requests/dto/requests.input.ts:31",{"_index":870,"title":{},"body":{"classes/InfoRequest.html":{}}}],["src/requests/dto/requests.input.ts:39",{"_index":1724,"title":{},"body":{"classes/Status.html":{}}}],["src/requests/dto/requests.input.ts:43",{"_index":1725,"title":{},"body":{"classes/Status.html":{}}}],["src/requests/dto/requests.input.ts:47",{"_index":1723,"title":{},"body":{"classes/Status.html":{}}}],["src/requests/requests.gateway.ts",{"_index":1554,"title":{},"body":{"injectables/RequestsGateway.html":{},"coverage.html":{}}}],["src/requests/requests.gateway.ts:16",{"_index":1556,"title":{},"body":{"injectables/RequestsGateway.html":{}}}],["src/requests/requests.gateway.ts:22",{"_index":1559,"title":{},"body":{"injectables/RequestsGateway.html":{}}}],["src/requests/requests.gateway.ts:25",{"_index":1558,"title":{},"body":{"injectables/RequestsGateway.html":{}}}],["src/requests/requests.module.ts",{"_index":1572,"title":{},"body":{"modules/RequestsModule.html":{}}}],["src/requests/requests.repository.ts",{"_index":1574,"title":{},"body":{"injectables/RequestsRepository.html":{},"coverage.html":{}}}],["src/requests/requests.repository.ts:11",{"_index":1585,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["src/requests/requests.repository.ts:114",{"_index":1589,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["src/requests/requests.repository.ts:17",{"_index":1587,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["src/requests/requests.repository.ts:55",{"_index":1583,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["src/requests/requests.repository.ts:8",{"_index":1580,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["src/requests/requests.resolver.ts",{"_index":1603,"title":{},"body":{"classes/RequestsResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/requests/requests.resolver.ts:14",{"_index":1607,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["src/requests/requests.resolver.ts:22",{"_index":1615,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["src/requests/requests.resolver.ts:39",{"_index":1611,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["src/requests/requests.resolver.ts:60",{"_index":1609,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["src/requests/requests.resolver.ts:77",{"_index":1612,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["src/requests/requests.resolver.ts:94",{"_index":1617,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["src/requests/requests.schema.ts",{"_index":1538,"title":{},"body":{"classes/Request.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/requests/requests.schema.ts:15",{"_index":1539,"title":{},"body":{"classes/Request.html":{}}}],["src/requests/requests.schema.ts:19",{"_index":1548,"title":{},"body":{"classes/Request.html":{}}}],["src/requests/requests.schema.ts:23",{"_index":1546,"title":{},"body":{"classes/Request.html":{}}}],["src/requests/requests.schema.ts:27",{"_index":1541,"title":{},"body":{"classes/Request.html":{}}}],["src/requests/requests.schema.ts:31",{"_index":1544,"title":{},"body":{"classes/Request.html":{}}}],["src/requests/requests.schema.ts:35",{"_index":1543,"title":{},"body":{"classes/Request.html":{}}}],["src/requests/requests.service.ts",{"_index":1628,"title":{},"body":{"injectables/RequestsService.html":{},"coverage.html":{}}}],["src/requests/requests.service.ts:13",{"_index":1632,"title":{},"body":{"injectables/RequestsService.html":{}}}],["src/requests/requests.service.ts:17",{"_index":1633,"title":{},"body":{"injectables/RequestsService.html":{}}}],["src/requests/requests.service.ts:21",{"_index":1631,"title":{},"body":{"injectables/RequestsService.html":{}}}],["src/requests/requests.service.ts:32",{"_index":1634,"title":{},"body":{"injectables/RequestsService.html":{}}}],["src/requests/requests.service.ts:7",{"_index":1630,"title":{},"body":{"injectables/RequestsService.html":{}}}],["src/s3",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"classes/MessagesResolver.html":{},"modules/ProfilesModule.html":{},"classes/ProfilesResolver.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{}}}],["src/s3/s3.module.ts",{"_index":1655,"title":{},"body":{"modules/S3Module.html":{}}}],["src/s3/s3.processor.ts",{"_index":1658,"title":{},"body":{"classes/S3Processor.html":{},"coverage.html":{}}}],["src/s3/s3.processor.ts:8",{"_index":1662,"title":{},"body":{"classes/S3Processor.html":{}}}],["src/s3/s3.service.ts",{"_index":1672,"title":{},"body":{"injectables/S3Service.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/s3/s3.service.ts:10",{"_index":1680,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/s3/s3.service.ts:49",{"_index":1677,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/s3/s3.service.ts:67",{"_index":1682,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/schema.graphql",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["src/users",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/FriendsResolver.html":{},"classes/LikesResolver.html":{},"classes/LoginResponse.html":{},"classes/MessagesResolver.html":{},"classes/PostsResolver.html":{},"modules/ProfilesModule.html":{},"classes/RegisterResponse.html":{},"classes/User.html":{},"classes/UserInput.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["src/users/dto/create.input.ts",{"_index":711,"title":{},"body":{"classes/CreateInput.html":{},"coverage.html":{}}}],["src/users/dto/create.input.ts:12",{"_index":720,"title":{},"body":{"classes/CreateInput.html":{}}}],["src/users/dto/create.input.ts:18",{"_index":715,"title":{},"body":{"classes/CreateInput.html":{}}}],["src/users/dto/create.input.ts:24",{"_index":713,"title":{},"body":{"classes/CreateInput.html":{}}}],["src/users/dto/create.input.ts:27",{"_index":717,"title":{},"body":{"classes/CreateInput.html":{}}}],["src/users/dto/oauth.input.ts",{"_index":1163,"title":{},"body":{"classes/OAuthInput.html":{},"coverage.html":{}}}],["src/users/dto/oauth.input.ts:10",{"_index":1167,"title":{},"body":{"classes/OAuthInput.html":{}}}],["src/users/dto/oauth.input.ts:15",{"_index":1168,"title":{},"body":{"classes/OAuthInput.html":{}}}],["src/users/dto/oauth.input.ts:21",{"_index":1165,"title":{},"body":{"classes/OAuthInput.html":{}}}],["src/users/dto/oauth.input.ts:26",{"_index":1171,"title":{},"body":{"classes/OAuthInput.html":{}}}],["src/users/dto/oauth.input.ts:31",{"_index":1170,"title":{},"body":{"classes/OAuthInput.html":{}}}],["src/users/dto/user.input.ts",{"_index":1744,"title":{},"body":{"classes/UserInput.html":{},"coverage.html":{}}}],["src/users/dto/user.input.ts:15",{"_index":1746,"title":{},"body":{"classes/UserInput.html":{}}}],["src/users/dto/user.input.ts:21",{"_index":1756,"title":{},"body":{"classes/UserInput.html":{}}}],["src/users/dto/user.input.ts:27",{"_index":1751,"title":{},"body":{"classes/UserInput.html":{}}}],["src/users/dto/user.input.ts:33",{"_index":1748,"title":{},"body":{"classes/UserInput.html":{}}}],["src/users/dto/user.input.ts:39",{"_index":1753,"title":{},"body":{"classes/UserInput.html":{}}}],["src/users/types/useroauth.ts",{"_index":769,"title":{},"body":{"classes/Current.html":{},"classes/OAuthInfo.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/users/types/useroauth.ts:12",{"_index":1160,"title":{},"body":{"classes/OAuthInfo.html":{}}}],["src/users/types/useroauth.ts:18",{"_index":1162,"title":{},"body":{"classes/OAuthInfo.html":{}}}],["src/users/types/useroauth.ts:9",{"_index":1159,"title":{},"body":{"classes/OAuthInfo.html":{}}}],["src/users/users.module.ts",{"_index":1763,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.repository.ts",{"_index":1783,"title":{},"body":{"injectables/UsersRepository.html":{},"coverage.html":{}}}],["src/users/users.repository.ts:11",{"_index":1801,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/users/users.repository.ts:15",{"_index":1799,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/users/users.repository.ts:19",{"_index":1795,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/users/users.repository.ts:33",{"_index":1798,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/users/users.repository.ts:37",{"_index":1805,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/users/users.repository.ts:43",{"_index":1796,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/users/users.repository.ts:47",{"_index":1807,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/users/users.repository.ts:51",{"_index":1803,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/users/users.repository.ts:8",{"_index":1792,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/users/users.resolver.ts",{"_index":1831,"title":{},"body":{"classes/UsersResolver.html":{},"coverage.html":{}}}],["src/users/users.resolver.ts:13",{"_index":1833,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:20",{"_index":1840,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:28",{"_index":1841,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:36",{"_index":1838,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:44",{"_index":1837,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:52",{"_index":1842,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:60",{"_index":1836,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:69",{"_index":1835,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.schema.ts",{"_index":1726,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/users.schema.ts:18",{"_index":1727,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.schema.ts:23",{"_index":1738,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.schema.ts:27",{"_index":1733,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.schema.ts:31",{"_index":1732,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.schema.ts:35",{"_index":1735,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.schema.ts:39",{"_index":1734,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.schema.ts:43",{"_index":1730,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.schema.ts:46",{"_index":1728,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.schema.ts:49",{"_index":1736,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.service.ts",{"_index":1854,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:15",{"_index":1861,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:19",{"_index":1860,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":1857,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:35",{"_index":1859,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:39",{"_index":1863,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":1858,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:47",{"_index":1864,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":1862,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:8",{"_index":1856,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.type.ts",{"_index":1488,"title":{},"body":{"classes/Provider.html":{},"classes/ProviderInput.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/users/users.type.ts:13",{"_index":1489,"title":{},"body":{"classes/Provider.html":{}}}],["src/users/users.type.ts:15",{"_index":1490,"title":{},"body":{"classes/Provider.html":{}}}],["src/users/users.type.ts:22",{"_index":1498,"title":{},"body":{"classes/ProviderInput.html":{}}}],["src/users/users.type.ts:26",{"_index":1500,"title":{},"body":{"classes/ProviderInput.html":{}}}],["startcase",{"_index":1124,"title":{},"body":{"classes/MongooseExceptionFilter.html":{}}}],["startcase(object.keys(exception.keyvalue)[0",{"_index":1130,"title":{},"body":{"classes/MongooseExceptionFilter.html":{}}}],["started",{"_index":2013,"title":{"index.html":{}},"body":{}}],["startvalue",{"_index":1058,"title":{},"body":{"injectables/MessagesRepository.html":{},"injectables/MessagesService.html":{},"classes/PaginationMessages.html":{},"classes/Send.html":{},"classes/SendFiles.html":{}}}],["statements",{"_index":1895,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":763,"title":{"classes/Status.html":{}},"body":{"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{},"coverage.html":{}}}],["statuscode",{"_index":846,"title":{},"body":{"classes/GraphQLException.html":{}}}],["store",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["stream",{"_index":1678,"title":{},"body":{"injectables/S3Service.html":{}}}],["stream.on('data",{"_index":1692,"title":{},"body":{"injectables/S3Service.html":{}}}],["stream.on('end",{"_index":1695,"title":{},"body":{"injectables/S3Service.html":{}}}],["stream.on('error",{"_index":1698,"title":{},"body":{"injectables/S3Service.html":{}}}],["streamtostring",{"_index":1673,"title":{},"body":{"injectables/S3Service.html":{}}}],["streamtostring(stream",{"_index":1676,"title":{},"body":{"injectables/S3Service.html":{}}}],["string",{"_index":12,"title":{},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"injectables/AuthService.html":{},"classes/ChangeNameConversation.html":{},"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeletePost.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"injectables/FriendsService.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/GraphQLException.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"injectables/MessagesService.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"injectables/ObjectIdPipe.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/PublisherSubscriptions.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"classes/RetrieveRequest.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string})@field(undefined",{"_index":380,"title":{},"body":{"classes/Comment.html":{},"classes/Like.html":{}}}],["sub",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"classes/Current.html":{},"classes/OAuthInfo.html":{}}}],["subclient",{"_index":1528,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["subscribemessage",{"_index":55,"title":{},"body":{"classes/AppGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["subscribemessage('conversation.addmember",{"_index":500,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["subscribemessage('conversation.friendisonline",{"_index":503,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["subscribemessage('logout",{"_index":52,"title":{},"body":{"classes/AppGateway.html":{}}}],["subscribemessage('messages.accept_call",{"_index":987,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["subscribemessage('messages.call",{"_index":1002,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["subscribemessage('messages.reject_call",{"_index":990,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["subscribemessage('messages.self_reject",{"_index":993,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["subscribemessage('messages.send",{"_index":999,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["subscribemessage('messages.send_files",{"_index":996,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["subscribemessage('messages.stop_call",{"_index":1005,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["subscribemessage('post.add",{"_index":1215,"title":{},"body":{"injectables/PostsGateway.html":{}}}],["subscribemessage('publish.addfriend",{"_index":1343,"title":{},"body":{"injectables/ProfilesGateway.html":{}}}],["subscribemessage('subscribe/notifications.send_notification",{"_index":1140,"title":{},"body":{"injectables/NotificationsGateway.html":{}}}],["subscribemessage('subscribe/profiles.unfriend",{"_index":1346,"title":{},"body":{"injectables/ProfilesGateway.html":{}}}],["subscribemessage('subscribe/requests.send_request",{"_index":1557,"title":{},"body":{"injectables/RequestsGateway.html":{}}}],["subscriberequestadded",{"_index":1605,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["subscription",{"_index":458,"title":{},"body":{"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/LikesResolver.html":{},"classes/PostsResolver.html":{},"classes/RequestsResolver.html":{}}}],["subscription(undefined",{"_index":445,"title":{},"body":{"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/LikesResolver.html":{},"classes/PostsResolver.html":{},"classes/RequestsResolver.html":{}}}],["subscriptions",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/LikesResolver.html":{},"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"classes/RequestsResolver.html":{},"dependencies.html":{}}}],["success",{"_index":1023,"title":{},"body":{"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{}}}],["sum",{"_index":615,"title":{},"body":{"injectables/ConversationsRepository.html":{},"injectables/MessagesRepository.html":{},"injectables/ProfilesRepository.html":{}}}],["super(message",{"_index":849,"title":{},"body":{"classes/GraphQLException.html":{}}}],["super.createioserver(port",{"_index":1532,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["support",{"_index":2021,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":2022,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1125,"title":{},"body":{"classes/MongooseExceptionFilter.html":{}}}],["system",{"_index":289,"title":{},"body":{"classes/AuthResolver.html":{}}}],["t",{"_index":1644,"title":{},"body":{"injectables/Require.html":{},"injectables/RequireAtLeast.html":{}}}],["table",{"_index":1920,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1919,"title":{},"body":{"coverage.html":{}}}],["temp",{"_index":519,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["terser",{"_index":1995,"title":{},"body":{"dependencies.html":{}}}],["text",{"_index":368,"title":{},"body":{"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"injectables/MessagesRepository.html":{}}}],["this._id.tostring",{"_index":1780,"title":{},"body":{"modules/UsersModule.html":{}}}],["this.adapterconstructor",{"_index":1530,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["this.authservice.oauth(_oauthinput",{"_index":303,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.authservice.refreshaccesstoken(userinput",{"_index":312,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.authservice.validateuser(username",{"_index":298,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.cachemanager.del",{"_index":209,"title":{},"body":{"injectables/AppService.html":{}}}],["this.cachemanager.del('undefined",{"_index":82,"title":{},"body":{"classes/AppGateway.html":{}}}],["this.cachemanager.del(userid",{"_index":106,"title":{},"body":{"classes/AppGateway.html":{}}}],["this.cachemanager.get('list.profiles",{"_index":1455,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["this.cachemanager.get(caller.id",{"_index":1026,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["this.cachemanager.get(invitorid",{"_index":525,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["this.cachemanager.get(member",{"_index":520,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["this.cachemanager.get(member.id",{"_index":532,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["this.cachemanager.get(members[0].id",{"_index":541,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["this.cachemanager.get(p.id",{"_index":1226,"title":{},"body":{"injectables/PostsGateway.html":{}}}],["this.cachemanager.get(profile.id",{"_index":1225,"title":{},"body":{"injectables/PostsGateway.html":{}}}],["this.cachemanager.get(profileid",{"_index":523,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["this.cachemanager.get(receiver.id",{"_index":1040,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["this.cachemanager.get(sender.id",{"_index":533,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["this.cachemanager.get>(friendid",{"_index":1356,"title":{},"body":{"injectables/ProfilesGateway.html":{}}}],["this.cachemanager.get>(idpublisher",{"_index":86,"title":{},"body":{"classes/AppGateway.html":{}}}],["this.cachemanager.get>(userid",{"_index":102,"title":{},"body":{"classes/AppGateway.html":{}}}],["this.cachemanager.get>(userreceive",{"_index":1351,"title":{},"body":{"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["this.cachemanager.get>(userrequest.id",{"_index":1146,"title":{},"body":{"injectables/NotificationsGateway.html":{}}}],["this.cachemanager.reset",{"_index":208,"title":{},"body":{"injectables/AppService.html":{}}}],["this.cachemanager.set('list",{"_index":1460,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["this.cachemanager.set(idpublisher",{"_index":87,"title":{},"body":{"classes/AppGateway.html":{}}}],["this.cachemanager.set(userid",{"_index":107,"title":{},"body":{"classes/AppGateway.html":{}}}],["this.commentmodel",{"_index":426,"title":{},"body":{"classes/CommentsRepository.html":{}}}],["this.commentmodel.aggregate",{"_index":431,"title":{},"body":{"classes/CommentsRepository.html":{}}}],["this.commentmodel.findoneandupdate",{"_index":429,"title":{},"body":{"classes/CommentsRepository.html":{}}}],["this.commentsrepository.commentpost(userid",{"_index":479,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentsrepository.deletecomment(_id",{"_index":480,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentsrepository.getcomments(post",{"_index":481,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentsservice.commentpost(user._id.tostring",{"_index":463,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["this.commentsservice.deletecomment(id",{"_index":468,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["this.commentsservice.getcomments(post",{"_index":470,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["this.conversationmodel",{"_index":630,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["this.conversationmodel(infoconversation",{"_index":598,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["this.conversationmodel.aggregate",{"_index":600,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["this.conversationmodel.findone",{"_index":616,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["this.conversationmodel.findoneandupdate",{"_index":627,"title":{},"body":{"injectables/ConversationsRepository.html":{}}}],["this.conversationqueue.add",{"_index":683,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationsrepository.addmember(conversationid",{"_index":690,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationsrepository.changenameconversation(payload",{"_index":693,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationsrepository.createconversation",{"_index":1487,"title":{},"body":{"injectables/ProfilesService.html":{}}}],["this.conversationsrepository.createconversation(infoconversation",{"_index":681,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationsrepository.createconversation(job.data",{"_index":565,"title":{},"body":{"classes/ConversationsProcessor.html":{}}}],["this.conversationsrepository.getconversationbyfriend(profileid",{"_index":682,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationsrepository.getconversationbyid(conversationid",{"_index":687,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationsrepository.getconversationbyidnoref(conversationid",{"_index":688,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationsrepository.getconversationbyprofileid(profileid",{"_index":686,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationsrepository.getfriendinconversation(conversationid",{"_index":692,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationsrepository.getlistfriendnotinconversation(conversationid",{"_index":689,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationsservice.addmember(conversationid",{"_index":659,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["this.conversationsservice.changenameconversation(payload).then((result",{"_index":662,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["this.conversationsservice.createconversation(infoconversation",{"_index":653,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["this.conversationsservice.getconversationbyfriend(profileid",{"_index":661,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["this.conversationsservice.getconversationbyid(conversationid",{"_index":655,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["this.conversationsservice.getconversationbyidnoref(conversationid",{"_index":515,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["this.conversationsservice.getconversationbyprofileid(profileid",{"_index":654,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["this.conversationsservice.getfriendinconversation(conversation",{"_index":538,"title":{},"body":{"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{}}}],["this.conversationsservice.getlistfriendnotinconversation",{"_index":657,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["this.email.split",{"_index":1370,"title":{},"body":{"modules/ProfilesModule.html":{}}}],["this.friendsservice.getentirefriends(id",{"_index":832,"title":{},"body":{"classes/FriendsResolver.html":{}}}],["this.jwtservice.sign(payload",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.likemodel",{"_index":923,"title":{},"body":{"classes/LikesRepository.html":{}}}],["this.likemodel.deleteone",{"_index":926,"title":{},"body":{"classes/LikesRepository.html":{}}}],["this.likesrepository.likepost(user",{"_index":954,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.likesrepository.unlikepost(userid",{"_index":955,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.likesservice.likepost(user._id.tostring",{"_index":938,"title":{},"body":{"classes/LikesResolver.html":{}}}],["this.likesservice.unlikepost(user._id.tostring",{"_index":943,"title":{},"body":{"classes/LikesResolver.html":{}}}],["this.messagemodel",{"_index":1069,"title":{},"body":{"injectables/MessagesRepository.html":{}}}],["this.messagemodel.aggregate",{"_index":1071,"title":{},"body":{"injectables/MessagesRepository.html":{}}}],["this.messagesrepository.getmessagesbyconversationid(conversationid",{"_index":1112,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagesrepository.sendfiles(files",{"_index":1113,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagesrepository.sendmessage",{"_index":1110,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagesservice.getmessagesbyconversationid",{"_index":1094,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["this.messagesservice.sendfiles",{"_index":1101,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["this.messagesservice.sendmessage(payload",{"_index":1093,"title":{},"body":{"classes/MessagesResolver.html":{}}}],["this.name",{"_index":1373,"title":{},"body":{"modules/ProfilesModule.html":{}}}],["this.password",{"_index":1773,"title":{},"body":{"modules/UsersModule.html":{}}}],["this.postmodel(post",{"_index":1256,"title":{},"body":{"classes/PostsRepository.html":{}}}],["this.postmodel.aggregate>(pipelinestage",{"_index":1278,"title":{},"body":{"classes/PostsRepository.html":{}}}],["this.postmodel.findoneandupdate",{"_index":1260,"title":{},"body":{"classes/PostsRepository.html":{}}}],["this.postsrepository.createpost(post",{"_index":1312,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.deletepost(post",{"_index":1313,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.getpost(post",{"_index":1315,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.getposts(userid",{"_index":1314,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(_post",{"_index":1294,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.deletepost(post",{"_index":1300,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.getpost",{"_index":940,"title":{},"body":{"classes/LikesResolver.html":{},"injectables/LikesService.html":{}}}],["this.postsservice.getposts(user._id.tostring",{"_index":1301,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.profilemodel",{"_index":1427,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["this.profilemodel(createinput",{"_index":1413,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["this.profilemodel.aggregate",{"_index":1419,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["this.profilemodel.find",{"_index":1415,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["this.profilemodel.findone",{"_index":1424,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["this.profilemodel.findoneandupdate",{"_index":1425,"title":{},"body":{"injectables/ProfilesRepository.html":{}}}],["this.profilequeue.add",{"_index":1468,"title":{},"body":{"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{}}}],["this.profilesrepository.addfriend(userid",{"_index":1385,"title":{},"body":{"classes/ProfilesProcessor.html":{},"injectables/ProfilesService.html":{}}}],["this.profilesrepository.createprofile",{"_index":1868,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.profilesrepository.getentirefriends(id",{"_index":839,"title":{},"body":{"injectables/FriendsService.html":{}}}],["this.profilesrepository.getprofile(profileinput",{"_index":1485,"title":{},"body":{"injectables/ProfilesService.html":{}}}],["this.profilesrepository.searchuser(searchinput",{"_index":1484,"title":{},"body":{"injectables/ProfilesService.html":{}}}],["this.profilesrepository.unfriend(userid",{"_index":1486,"title":{},"body":{"injectables/ProfilesService.html":{}}}],["this.profilesrepository.updateavatar(url",{"_index":1384,"title":{},"body":{"classes/ProfilesProcessor.html":{},"injectables/ProfilesService.html":{}}}],["this.profilesservice.getprofile",{"_index":464,"title":{},"body":{"classes/CommentsResolver.html":{},"injectables/ConversationsGateway.html":{},"injectables/LikesService.html":{},"classes/PostsResolver.html":{},"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["this.profilesservice.getprofile(profileinput",{"_index":1464,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["this.profilesservice.queueaddfriend(userid",{"_index":1639,"title":{},"body":{"injectables/RequestsService.html":{}}}],["this.profilesservice.searchuser",{"_index":1457,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["this.profilesservice.searchuser(searchinput",{"_index":1459,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["this.profilesservice.unfriend(friend.userid",{"_index":1471,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["this.provider",{"_index":1369,"title":{},"body":{"modules/ProfilesModule.html":{}}}],["this.providers[0].id",{"_index":1779,"title":{},"body":{"modules/UsersModule.html":{}}}],["this.providers[0].type",{"_index":1778,"title":{},"body":{"modules/UsersModule.html":{}}}],["this.pubsub.asynciterator('commentadded",{"_index":472,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["this.pubsub.asynciterator('memberadded",{"_index":663,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["this.pubsub.asynciterator>(`newlike_${post",{"_index":946,"title":{},"body":{"classes/LikesResolver.html":{}}}],["this.pubsub.asynciterator>(`postadded.${pub",{"_index":1304,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.pubsub.publish('commentadded",{"_index":467,"title":{},"body":{"classes/CommentsResolver.html":{}}}],["this.pubsub.publish('memberadded",{"_index":660,"title":{},"body":{"classes/ConversationsResolver.html":{}}}],["this.pubsub.publish(`newlike_${post",{"_index":941,"title":{},"body":{"classes/LikesResolver.html":{}}}],["this.pubsub.publish(`postadded.${resultpromiseprofile.id",{"_index":1299,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.requestmodel.aggregate",{"_index":1593,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["this.requestmodel.create",{"_index":1592,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["this.requestmodel.deleteone",{"_index":1599,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["this.requestmodel.find",{"_index":1594,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["this.requestmodel.updateone(match",{"_index":1596,"title":{},"body":{"injectables/RequestsRepository.html":{}}}],["this.requestsrepository.acceptrequest(request",{"_index":1638,"title":{},"body":{"injectables/RequestsService.html":{}}}],["this.requestsrepository.addrequest(request",{"_index":1636,"title":{},"body":{"injectables/RequestsService.html":{}}}],["this.requestsrepository.getrequests(info",{"_index":1637,"title":{},"body":{"injectables/RequestsService.html":{}}}],["this.requestsrepository.rejectrequest(request",{"_index":1640,"title":{},"body":{"injectables/RequestsService.html":{}}}],["this.requestsservice.acceptrequest",{"_index":1625,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["this.requestsservice.addrequest",{"_index":1561,"title":{},"body":{"injectables/RequestsGateway.html":{},"classes/RequestsResolver.html":{}}}],["this.requestsservice.getrequests(info",{"_index":1622,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["this.requestsservice.rejectrequest",{"_index":1626,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["this.s3service.uploadimage(file",{"_index":1466,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["this.server.setmaxlisteners(200",{"_index":78,"title":{},"body":{"classes/AppGateway.html":{}}}],["this.server.sockets.sockets.get(socketid",{"_index":95,"title":{},"body":{"classes/AppGateway.html":{}}}],["this.server.to(listsocketid).emit('publish/conversation.addmember",{"_index":530,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["this.streamtostring(stream",{"_index":1709,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.usermodel",{"_index":1823,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.usermodel.create",{"_index":1811,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.usermodel.deletemany",{"_index":1815,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.usermodel.find",{"_index":1810,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.usermodel.findone",{"_index":1818,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.usermodel.findone(userinput",{"_index":1809,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.usermodel.findoneandupdate",{"_index":1816,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.usermodel.findoneandupdate(userinput",{"_index":1814,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.usermodel.remove(userinput",{"_index":1813,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.usersrepository.createuser(createinput",{"_index":1867,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.deleteentireuser",{"_index":1871,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.deleteuser(userinput",{"_index":1869,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.getlistusers",{"_index":1866,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.getuser(userinput",{"_index":1865,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.oauth(_oauthinput",{"_index":1873,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.softdeleteuser(userinput",{"_index":1870,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.updaterefreshtoken(userid",{"_index":1872,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createinput",{"_index":308,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["this.usersservice.deleteentireuser",{"_index":1852,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.usersservice.deleteuser(userinput",{"_index":1849,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.usersservice.getlistusers",{"_index":1847,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.usersservice.getuser",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuser(userinput",{"_index":1846,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.usersservice.oauth(_oauthinput",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.softdeleteuser(userinput",{"_index":1851,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.usersservice.updaterefreshtoken(user._id",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":241,"title":{},"body":{"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"injectables/ObjectIdPipe.html":{},"classes/ProfilesResolver.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"miscellaneous/variables.html":{}}}],["time",{"_index":1776,"title":{},"body":{"modules/UsersModule.html":{}}}],["timestamps",{"_index":393,"title":{},"body":{"classes/Comment.html":{},"classes/Conversation.html":{},"classes/FileInfo.html":{},"classes/Like.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/Post.html":{},"classes/Profile.html":{},"classes/Request.html":{},"classes/User.html":{}}}],["todo",{"_index":1879,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["token",{"_index":234,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{}}}],["toobject",{"_index":1830,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["toobjectid",{"_index":1265,"title":{},"body":{"classes/PostsRepository.html":{}}}],["tools/schema",{"_index":1924,"title":{},"body":{"dependencies.html":{}}}],["tostring",{"_index":1267,"title":{},"body":{"classes/PostsRepository.html":{}}}],["tounix",{"_index":1768,"title":{},"body":{"modules/UsersModule.html":{}}}],["tounix).tostring",{"_index":1775,"title":{},"body":{"modules/UsersModule.html":{}}}],["transform",{"_index":1174,"title":{},"body":{"injectables/ObjectIdPipe.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{}}}],["transform(payload",{"_index":1643,"title":{},"body":{"injectables/Require.html":{},"injectables/RequireAtLeast.html":{}}}],["transform(value",{"_index":1175,"title":{},"body":{"injectables/ObjectIdPipe.html":{}}}],["transformer",{"_index":1952,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":68,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/AuthGateway.html":{},"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"classes/Comment.html":{},"classes/CommentsResolver.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/DeletePost.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/FriendProfile.html":{},"classes/FriendsResolver.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"classes/LikesResolver.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/NotificationsGateway.html":{},"classes/OAuthInput.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"classes/RetrieveRequest.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/User.html":{},"classes/UserInput.html":{},"classes/UsersResolver.html":{}}}],["true})@field(undefined",{"_index":1542,"title":{},"body":{"classes/Request.html":{}}}],["true})@isoptional",{"_index":1497,"title":{},"body":{"classes/ProviderInput.html":{}}}],["true})@isstring()@isoptional",{"_index":756,"title":{},"body":{"classes/CreateRequest.html":{},"classes/InfoRequest.html":{}}}],["true})@length(6",{"_index":1750,"title":{},"body":{"classes/UserInput.html":{}}}],["true})@prop({required",{"_index":969,"title":{},"body":{"classes/Message.html":{},"classes/User.html":{}}}],["true})@prop({type",{"_index":487,"title":{},"body":{"classes/Conversation.html":{},"classes/Message.html":{},"classes/Post.html":{}}}],["true})@usefilters(mongooseexceptionfilter",{"_index":1834,"title":{},"body":{"classes/UsersResolver.html":{}}}],["try",{"_index":237,"title":{},"body":{"guards/AuthGuard.html":{}}}],["tslib",{"_index":1997,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":10,"title":{},"body":{"classes/AccessTokenResponse.html":{},"classes/AppGateway.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/Conversation.html":{},"injectables/ConversationsGateway.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/Create.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/DeleteResult.html":{},"classes/File.html":{},"classes/FileInfo.html":{},"classes/Friend.html":{},"classes/FriendProfile.html":{},"classes/FriendsResolver.html":{},"injectables/FriendsService.html":{},"classes/GetPosts.html":{},"classes/GraphQLException.html":{},"classes/GraphQLExceptionFilter.html":{},"injectables/HomeMiddleware.html":{},"classes/InfoRequest.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/Like.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/LoginResponse.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"injectables/MessagesGateway.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/MongooseExceptionFilter.html":{},"injectables/NotificationsGateway.html":{},"classes/OAuthInfo.html":{},"classes/OAuthInput.html":{},"injectables/ObjectIdPipe.html":{},"classes/Obtain.html":{},"classes/PaginationMessages.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"injectables/PostsGateway.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/Profile.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/PublisherSubscriptions.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterResponse.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"injectables/Require.html":{},"injectables/RequireAtLeast.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/User.html":{},"classes/UserInput.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"classes/_Upload_.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2035,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1467,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["types",{"_index":1332,"title":{},"body":{"classes/Profile.html":{},"injectables/S3Service.html":{},"classes/User.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["types.array",{"_index":1741,"title":{},"body":{"classes/User.html":{}}}],["unauthorizedexception",{"_index":222,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":84,"title":{},"body":{"classes/AppGateway.html":{},"classes/GetPosts.html":{},"classes/Post.html":{},"classes/Profile.html":{},"classes/User.html":{}}}],["undefined})@field(undefined",{"_index":1319,"title":{},"body":{"classes/Profile.html":{}}}],["unfriend",{"_index":1391,"title":{},"body":{"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{}}}],["unfriend(friend",{"_index":1445,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["unfriend(userid",{"_index":1408,"title":{},"body":{"injectables/ProfilesRepository.html":{},"injectables/ProfilesService.html":{}}}],["unionfriend",{"_index":1331,"title":{},"body":{"classes/Profile.html":{},"classes/ProfilesResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uniq",{"_index":508,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["uniq(listsocketid",{"_index":528,"title":{},"body":{"injectables/ConversationsGateway.html":{}}}],["unique",{"_index":903,"title":{},"body":{"classes/Like.html":{},"classes/Profile.html":{},"classes/Request.html":{},"classes/User.html":{},"dependencies.html":{}}}],["universe",{"_index":2015,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":267,"title":{},"body":{"classes/AuthResolver.html":{},"classes/CommentsRepository.html":{},"classes/CommentsResolver.html":{},"injectables/CommentsService.html":{},"classes/ConversationsProcessor.html":{},"injectables/ConversationsRepository.html":{},"classes/ConversationsResolver.html":{},"injectables/ConversationsService.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"injectables/MessagesRepository.html":{},"classes/MessagesResolver.html":{},"injectables/MessagesService.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"injectables/ProfilesService.html":{},"classes/RequestsResolver.html":{},"injectables/RequestsService.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/UsersResolver.html":{}}}],["unlicensed",{"_index":2033,"title":{},"body":{"properties.html":{}}}],["unlikepost",{"_index":914,"title":{},"body":{"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{}}}],["unlikepost(user",{"_index":935,"title":{},"body":{"classes/LikesResolver.html":{}}}],["unlikepost(userid",{"_index":920,"title":{},"body":{"classes/LikesRepository.html":{},"injectables/LikesService.html":{}}}],["unset",{"_index":1268,"title":{},"body":{"classes/PostsRepository.html":{}}}],["unwind",{"_index":437,"title":{},"body":{"classes/CommentsRepository.html":{},"injectables/ConversationsRepository.html":{},"injectables/MessagesRepository.html":{},"classes/PostsRepository.html":{},"injectables/ProfilesRepository.html":{},"injectables/RequestsRepository.html":{}}}],["updateavatar",{"_index":1392,"title":{},"body":{"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{}}}],["updateavatar(url",{"_index":1410,"title":{},"body":{"injectables/ProfilesRepository.html":{},"injectables/ProfilesService.html":{}}}],["updatedat",{"_index":369,"title":{},"body":{"classes/Comment.html":{},"classes/CommentsRepository.html":{},"classes/Conversation.html":{},"injectables/ConversationsRepository.html":{},"classes/FileInfo.html":{},"classes/Like.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/Post.html":{},"classes/PostsRepository.html":{},"classes/PostsResolver.html":{},"classes/Profile.html":{},"injectables/ProfilesRepository.html":{},"classes/Request.html":{},"classes/User.html":{}}}],["updatepost",{"_index":742,"title":{"classes/UpdatePost.html":{}},"body":{"classes/CreatePost.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InteractPost.html":{},"classes/PostDto.html":{},"classes/UpdatePost.html":{},"coverage.html":{}}}],["updaterefreshtoken",{"_index":1790,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updaterefreshtoken(userid",{"_index":1806,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updateresult",{"_index":423,"title":{},"body":{"classes/CommentsRepository.html":{},"injectables/ConversationsService.html":{},"classes/PostsRepository.html":{},"injectables/UsersService.html":{}}}],["upload",{"_index":702,"title":{},"body":{"classes/Create.html":{},"classes/Friend.html":{},"classes/MessagesResolver.html":{},"classes/Obtain.html":{},"classes/ProfilesResolver.html":{},"modules/S3Module.html":{},"classes/S3Processor.html":{},"injectables/S3Service.html":{},"classes/Search.html":{},"classes/_Upload_.html":{},"dependencies.html":{}}}],["uploadavatar",{"_index":1438,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["uploadavatar(file",{"_index":1448,"title":{},"body":{"classes/ProfilesResolver.html":{}}}],["uploadimage",{"_index":1674,"title":{},"body":{"injectables/S3Service.html":{}}}],["uploadimage(file",{"_index":1679,"title":{},"body":{"injectables/S3Service.html":{}}}],["uploadmultipleimage",{"_index":1675,"title":{},"body":{"injectables/S3Service.html":{}}}],["uploadmultipleimage(file",{"_index":1681,"title":{},"body":{"injectables/S3Service.html":{}}}],["uppermiddleware",{"_index":1911,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["url",{"_index":784,"title":{},"body":{"classes/File.html":{},"classes/FileInfo.html":{},"classes/Message.html":{},"classes/MessageOmit.html":{},"classes/MessagesConversation.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"classes/ProfilesResolver.html":{},"injectables/ProfilesService.html":{},"classes/RedisIoAdapter.html":{},"injectables/S3Service.html":{}}}],["use",{"_index":862,"title":{},"body":{"injectables/HomeMiddleware.html":{}}}],["use(req",{"_index":863,"title":{},"body":{"injectables/HomeMiddleware.html":{}}}],["usefactory",{"_index":406,"title":{},"body":{"modules/CommentsModule.html":{},"modules/ConversationsModule.html":{},"modules/LikesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/ProfilesModule.html":{},"modules/PubSubModule.html":{},"modules/RequestsModule.html":{},"modules/UsersModule.html":{}}}],["usefilters",{"_index":279,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["usefilters(mongooseexceptionfilter",{"_index":306,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UsersResolver.html":{}}}],["useguards",{"_index":457,"title":{},"body":{"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/FriendsResolver.html":{},"classes/LikesResolver.html":{},"classes/MessagesResolver.html":{},"classes/PostsResolver.html":{},"classes/ProfilesResolver.html":{},"classes/RequestsResolver.html":{},"classes/UsersResolver.html":{}}}],["useguards(authguard",{"_index":460,"title":{},"body":{"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/FriendsResolver.html":{},"classes/LikesResolver.html":{},"classes/MessagesResolver.html":{},"classes/PostsResolver.html":{},"classes/ProfilesResolver.html":{},"classes/RequestsResolver.html":{},"classes/UsersResolver.html":{}}}],["user",{"_index":283,"title":{"classes/User.html":{}},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/CreateRequest.html":{},"classes/Current.html":{},"classes/FriendsResolver.html":{},"classes/InfoRequest.html":{},"classes/LikesRepository.html":{},"classes/LikesResolver.html":{},"injectables/LikesService.html":{},"classes/LoginResponse.html":{},"classes/MessagesResolver.html":{},"classes/OAuthInfo.html":{},"classes/PostsResolver.html":{},"classes/RegisterResponse.html":{},"classes/RequestsResolver.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{},"classes/User.html":{},"classes/UserInput.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user._id",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"classes/PostsResolver.html":{}}}],["user._id.tostring",{"_index":465,"title":{},"body":{"classes/CommentsResolver.html":{},"classes/ConversationsResolver.html":{},"classes/MessagesResolver.html":{},"classes/PostsResolver.html":{},"classes/RequestsResolver.html":{},"injectables/UsersService.html":{}}}],["user.email",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":924,"title":{},"body":{"classes/LikesRepository.html":{}}}],["user.name",{"_index":1767,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.refreshtoken",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.save",{"_index":1828,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["user.sub",{"_index":831,"title":{},"body":{"classes/FriendsResolver.html":{}}}],["user.username",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.password",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_offline",{"_index":1028,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["useraction",{"_index":1037,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["useraction.id",{"_index":1038,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["userdocument",{"_index":1739,"title":{},"body":{"classes/User.html":{},"injectables/UsersRepository.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":101,"title":{},"body":{"classes/AppGateway.html":{},"classes/CommentsRepository.html":{},"injectables/CommentsService.html":{},"classes/Create.html":{},"classes/Friend.html":{},"classes/LikesRepository.html":{},"injectables/LikesService.html":{},"classes/Obtain.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/ProfilesGateway.html":{},"classes/ProfilesProcessor.html":{},"injectables/ProfilesRepository.html":{},"injectables/ProfilesService.html":{},"injectables/RequestsService.html":{},"classes/Search.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/_Upload_.html":{}}}],["userinput",{"_index":311,"title":{"classes/UserInput.html":{}},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserInput.html":{},"injectables/UsersRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usermodel",{"_index":1793,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["username",{"_index":291,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CreateInput.html":{},"classes/LoginInput.html":{},"modules/ProfilesModule.html":{},"classes/User.html":{},"classes/UserInput.html":{},"injectables/UsersRepository.html":{}}}],["username}${nowunix",{"_index":1374,"title":{},"body":{"modules/ProfilesModule.html":{}}}],["username}.${password}.${process.env.secret",{"_index":295,"title":{},"body":{"classes/AuthResolver.html":{}}}],["useroauth",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"classes/Current.html":{},"classes/OAuthInfo.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["userprovider",{"_index":1491,"title":{},"body":{"classes/Provider.html":{},"classes/ProviderInput.html":{},"miscellaneous/typealiases.html":{}}}],["userreceive",{"_index":752,"title":{},"body":{"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"injectables/NotificationsGateway.html":{},"injectables/ProfilesGateway.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{}}}],["userrequest",{"_index":753,"title":{},"body":{"classes/CreateRequest.html":{},"classes/InfoRequest.html":{},"injectables/NotificationsGateway.html":{},"injectables/ProfilesGateway.html":{},"classes/Request.html":{},"injectables/RequestsGateway.html":{},"injectables/RequestsRepository.html":{},"classes/RequestsResolver.html":{},"classes/RetrieveRequest.html":{},"classes/Status.html":{}}}],["userrequest.name",{"_index":1148,"title":{},"body":{"injectables/NotificationsGateway.html":{},"injectables/RequestsGateway.html":{}}}],["users.schema",{"_index":770,"title":{},"body":{"classes/Current.html":{},"classes/OAuthInfo.html":{}}}],["users.type",{"_index":725,"title":{},"body":{"classes/CreateInput.html":{}}}],["users/types/useroauth",{"_index":1618,"title":{},"body":{"classes/RequestsResolver.html":{}}}],["userschema",{"_index":1742,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersmodule",{"_index":127,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProfilesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1762,"title":{"injectables/UsersRepository.html":{}},"body":{"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersresolver",{"_index":1766,"title":{"classes/UsersResolver.html":{}},"body":{"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["usersservice",{"_index":260,"title":{"injectables/UsersService.html":{}},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["valid",{"_index":881,"title":{},"body":{"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{}}}],["validate",{"_index":876,"title":{},"body":{"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{}}}],["validate(nonce",{"_index":878,"title":{},"body":{"classes/IsNonceConstraint.html":{}}}],["validate(objectid",{"_index":885,"title":{},"body":{"classes/IsObjectIdConstraint.html":{}}}],["validatebeforesave",{"_index":1829,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["validateuser",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationerror",{"_index":1878,"title":{},"body":{"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationexceptionfilter",{"_index":1874,"title":{"classes/ValidationExceptionFilter.html":{}},"body":{"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["validationoptions",{"_index":2010,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":354,"title":{},"body":{"classes/ChangeNameConversation.html":{},"classes/CreateConversation.html":{},"classes/CreateInput.html":{},"classes/CreatePost.html":{},"classes/CreateRequest.html":{},"classes/DeletePost.html":{},"classes/GetPost.html":{},"classes/GetPosts.html":{},"classes/InfoRequest.html":{},"classes/InteractPost.html":{},"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{},"classes/ListFriendNotInConversation.html":{},"classes/LoginInput.html":{},"classes/OAuthInput.html":{},"classes/PaginationMessages.html":{},"classes/PostDto.html":{},"classes/Provider.html":{},"classes/ProviderInput.html":{},"classes/RetrieveRequest.html":{},"classes/Send.html":{},"classes/SendFiles.html":{},"classes/Status.html":{},"classes/UpdatePost.html":{},"classes/UserInput.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":880,"title":{},"body":{"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{}}}],["validatorconstraintinterface",{"_index":874,"title":{},"body":{"classes/IsNonceConstraint.html":{},"classes/IsObjectIdConstraint.html":{}}}],["validextfilepattern",{"_index":1008,"title":{},"body":{"injectables/MessagesGateway.html":{}}}],["validobjectid",{"_index":1178,"title":{},"body":{"injectables/ObjectIdPipe.html":{}}}],["value",{"_index":1060,"title":{},"body":{"injectables/MessagesRepository.html":{},"injectables/ObjectIdPipe.html":{},"classes/Profile.html":{},"miscellaneous/variables.html":{}}}],["value.tostring",{"_index":2067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value.touppercase",{"_index":2068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":1897,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2051,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":2030,"title":{},"body":{"properties.html":{}}}],["void",{"_index":207,"title":{},"body":{"injectables/AppService.html":{},"injectables/HomeMiddleware.html":{},"classes/LikesResolver.html":{},"classes/PostsResolver.html":{}}}],["warning",{"_index":1880,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["websocketgateway",{"_index":56,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AuthGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["websocketgateway(3005",{"_index":66,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AuthGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["websocketserver",{"_index":42,"title":{},"body":{"classes/AppGateway.html":{},"injectables/AuthGateway.html":{},"injectables/ConversationsGateway.html":{},"injectables/MessagesGateway.html":{},"injectables/NotificationsGateway.html":{},"injectables/PostsGateway.html":{},"injectables/ProfilesGateway.html":{},"injectables/RequestsGateway.html":{}}}],["without",{"_index":63,"title":{},"body":{"classes/AppGateway.html":{},"injectables/PostsGateway.html":{}}}],["without(listsocketid",{"_index":104,"title":{},"body":{"classes/AppGateway.html":{}}}],["without(receiverpacket",{"_index":1227,"title":{},"body":{"injectables/PostsGateway.html":{}}}],["ws",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["xx",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["yes",{"_index":1518,"title":{},"body":{"classes/RedisIoAdapter.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ConversationsModule.html":{},"modules/FriendsModule.html":{},"modules/LikesModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/PostsModule.html":{},"modules/ProfilesModule.html":{},"modules/RequestsModule.html":{},"modules/S3Module.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AccessTokenResponse.html":{"url":"classes/AccessTokenResponse.html","title":"class - AccessTokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccessTokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/types/AccessTokenResponse.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/types/AccessTokenResponse.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class AccessTokenResponse {\n  @Field()\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppGateway.html":{"url":"classes/AppGateway.html","title":"class - AppGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                    Async\n                                handleDisconnect\n                            \n                            \n                                    Async\n                                handleLogout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/app.gateway.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app.gateway.ts:17\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConnection(client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/app.gateway.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleDisconnect(client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/app.gateway.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleLogout\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleLogout(client: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('logout')\n                \n            \n\n            \n                \n                    Defined in src/app.gateway.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ConnectedSocket,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\n\nimport { CACHE_MANAGER, Inject } from '@nestjs/common';\nimport { Cache } from 'cache-manager';\nimport { isEmpty, without } from 'lodash';\nimport { Server, Socket } from 'socket.io';\n@WebSocketGateway(3005, { cors: true, maxHttpBufferSize: 1e8 })\nexport class AppGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}\n  @WebSocketServer() server: Server;\n\n  async handleConnection(@ConnectedSocket() client: Socket) {\n    const { query } = client.handshake;\n    client.setMaxListeners(200);\n    this.server.setMaxListeners(200);\n\n    const idPublisher: string = query?.session as string;\n    await this.cacheManager.del('undefined');\n\n    if (idPublisher !== null && idPublisher !== 'undefined') {\n      const listSocketId = await this.cacheManager.get>(idPublisher);\n\n      if (listSocketId === null) await this.cacheManager.set(idPublisher, [client.id]);\n      else {\n        // check and remove socketId invalid\n        const filterResult = listSocketId.filter(\n          (socketId) => this.server.sockets.sockets.get(socketId) !== undefined,\n        );\n\n        //persist socketId\n        if (!filterResult.includes(client.id)) {\n          filterResult.push(client.id);\n          await this.cacheManager.set(idPublisher, filterResult, 0);\n        }\n      }\n    }\n  }\n  async handleDisconnect(@ConnectedSocket() client: Socket) {\n    //\n    const { query } = client.handshake;\n    const userId = query?.session as string;\n\n    await this.cacheManager.del('undefined');\n    if (userId !== null && userId !== 'undefined') {\n      const listSocketId = await this.cacheManager.get>(userId);\n\n      const removedList = without(listSocketId, client.id);\n      if (isEmpty(removedList)) await this.cacheManager.del(userId);\n      else await this.cacheManager.set(userId, removedList, 0);\n    }\n  }\n\n  @SubscribeMessage('logout')\n  async handleLogout(client: any) {\n    const { query } = client.handshake;\n\n    const userId = query?.session;\n\n    const result = await this.cacheManager.del(userId);\n    await this.cacheManager.del(userId);\n\n    const listSocketId = await this.cacheManager.get>(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFriendsModule\n\nFriendsModule\n\nAppModule -->\n\nFriendsModule->AppModule\n\n\n\n\n\nLikesModule\n\nLikesModule\n\nAppModule -->\n\nLikesModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nProfilesModule\n\nProfilesModule\n\nAppModule -->\n\nProfilesModule->AppModule\n\n\n\n\n\nPubSubModule\n\nPubSubModule\n\nAppModule -->\n\nPubSubModule->AppModule\n\n\n\n\n\nRequestsModule\n\nRequestsModule\n\nAppModule -->\n\nRequestsModule->AppModule\n\n\n\n\n\nS3Module\n\nS3Module\n\nAppModule -->\n\nS3Module->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            ConversationsModule\n                        \n                        \n                            FriendsModule\n                        \n                        \n                            LikesModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            NotificationsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            ProfilesModule\n                        \n                        \n                            PubSubModule\n                        \n                        \n                            RequestsModule\n                        \n                        \n                            S3Module\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\nimport { BullModule } from '@nestjs/bull';\nimport { CacheModule, Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthModule } from '@src/authentication';\nimport { CommentsModule } from '@src/comments';\nimport { ConversationsModule } from '@src/conversations';\nimport { FriendsModule } from '@src/friends';\nimport { LikesModule } from '@src/likes';\nimport { MessagesModule } from '@src/messages';\nimport { NotificationsModule } from '@src/notifications';\nimport { PostsModule } from '@src/posts';\nimport { ProfilesModule } from '@src/profiles';\nimport { PubSubModule } from '@src/pubsub.module';\nimport { RequestsModule } from '@src/requests';\nimport { S3Module } from '@src/s3';\nimport { UsersModule } from '@src/users';\nimport * as redisStore from 'cache-manager-redis-store';\nimport { PubSub } from 'graphql-subscriptions';\nimport { join } from 'path';\nimport { DevtoolsModule } from '@nestjs/devtools-integration';\n\nconst pubSub = new PubSub();\n\n@Module({\n  imports: [\n    DevtoolsModule.register({\n      http: process.env.NODE_ENV !== 'production',\n    }),\n    CacheModule.register({ isGlobal: true, store: redisStore, host: 'redis', port: 6379 }),\n    BullModule.forRoot({\n      redis: {\n        host: 'redis',\n        port: 6379,\n      },\n    }),\n    MongooseModule.forRoot(process.env.MONGO_URL),\n    GraphQLModule.forRoot({\n      driver: ApolloDriver,\n      autoSchemaFile: join(process.cwd(), 'src/schema.graphql'),\n      playground: true,\n      csrfPrevention: false,\n      installSubscriptionHandlers: true,\n      subscriptions: {\n        'graphql-ws': {\n          path: '/graphql',\n        },\n        'subscriptions-transport-ws': {\n          path: '/graphql',\n          onConnect: (headers) => {\n            return { req: { headers: headers } };\n          },\n        },\n      },\n\n      cors: {\n        origin: '*',\n        credentials: true,\n      },\n      debug: process.env.NODE_ENV === 'development',\n      context: ({ req, res, connection }) => ({ req, res, connection }),\n    }),\n    PubSubModule,\n    S3Module,\n    UsersModule,\n    FriendsModule,\n    ProfilesModule,\n    AuthModule,\n    RequestsModule,\n    NotificationsModule,\n    ConversationsModule,\n    MessagesModule,\n    PostsModule,\n    CommentsModule,\n    LikesModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CACHE_MANAGER, Inject, Injectable, OnModuleInit } from '@nestjs/common';\nimport { Cache } from 'cache-manager';\n\n@Injectable()\nexport class AppService implements OnModuleInit {\n  constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}\n  onModuleInit() {\n    this.cacheManager.reset();\n    this.cacheManager.del('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthGateway.html":{"url":"injectables/AuthGateway.html","title":"injectable - AuthGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/auth.gateway.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/auth.gateway.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common';\nimport {WebSocketGateway, WebSocketServer} from '@nestjs/websockets';\n\n@WebSocketGateway(3005, {cors: true})\n@Injectable()\nexport class AuthGateway {\n\t@WebSocketServer() server;\n\t\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/auth.guard.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { decode } from 'next-auth/jwt';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise {\n    const newContext = GqlExecutionContext.create(context);\n\n    const secret = process.env.SECRET;\n\n    const ctx = newContext.getContext();\n\n    const { headers } = ctx?.req;\n\n    const token = (headers?.authorization || headers?.Authorization)?.replace('Bearer ', '');\n\n    try {\n      const result = await decode({ token, secret });\n\n      ctx.req.user = result;\n\n      return true;\n    } catch (error) {\n      throw new UnauthorizedException();\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthGateway\n\nAuthGateway\n\nAuthModule -->\n\nAuthGateway->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthGateway\n                        \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from '@src/users';\nimport { AuthGateway } from './auth.gateway';\nimport { AuthResolver } from './auth.resolver';\nimport { AuthService } from './auth.service';\n\n@Module({\n  imports: [UsersModule],\n  providers: [AuthService, AuthResolver, AuthGateway],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResolver.html":{"url":"classes/AuthResolver.html","title":"class - AuthResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/auth.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                OAuth\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/auth.resolver.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginInput: LoginInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'login', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/authentication/auth.resolver.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginInput\n                                    \n                                                LoginInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        OAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    OAuth(_OAuthInput: OAuthInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'OAuth', nullable: false})\n                \n            \n\n            \n                \n                    Defined in src/authentication/auth.resolver.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _OAuthInput\n                                    \n                                                OAuthInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(createInput: CreateInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'register', nullable: false})@UseFilters(MongooseExceptionFilter)\n                \n            \n\n            \n                \n                    Defined in src/authentication/auth.resolver.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInput\n                                    \n                                                CreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MongooseExceptionFilter } from '@common/filters';\nimport { BadRequestException, UseFilters } from '@nestjs/common';\nimport { Args, Mutation, Resolver } from '@nestjs/graphql';\nimport { CreateInput, OAuthInput, User, UsersService } from '@src/users';\nimport * as crypto from 'crypto';\nimport { AuthService } from './auth.service';\nimport { LoginInput } from './dto/loginInput.input';\n\n@Resolver()\nexport class AuthResolver {\n  constructor(private authService: AuthService, private usersService: UsersService) {}\n\n  // provider with account system\n  @Mutation(() => User, {\n    name: 'login',\n    nullable: true,\n  })\n  public async login(@Args('loginInput') loginInput: LoginInput) {\n    const { username, password, nonce } = loginInput;\n    const data = `${username}.${password}.${process.env.SECRET}`;\n    const hash = crypto.createHash('md5').update(data).digest('hex');\n    if (hash === nonce) return this.authService.validateUser(username, password);\n    throw new BadRequestException('Request nonce is invalid');\n  }\n\n  // login with provider\n  @Mutation(() => User, {\n    name: 'OAuth',\n    nullable: false,\n  })\n  public OAuth(@Args('OAuthInput') _OAuthInput: OAuthInput) {\n    const { id, provider, nonce } = _OAuthInput;\n    const data = `${id}.${provider}.${process.env.SECRET}`;\n    const hash = crypto.createHash('md5').update(data).digest('hex');\n\n    if (hash === nonce) return this.authService.OAuth(_OAuthInput);\n    else throw new BadRequestException('Error Not Found');\n  }\n\n  @Mutation(() => User, {\n    name: 'register',\n    nullable: false,\n  })\n  @UseFilters(MongooseExceptionFilter)\n  public async register(@Args('createInput') createInput: CreateInput) {\n    return await this.usersService.createUser(createInput);\n  }\n  // @Query(() => AccessTokenResponse, { name: 'refreshAccessToken', nullable: true })\n  // public refreshAccessToken(@Args('userInput') userInput: UserInput) {\n  //   return this.authService.refreshAccessToken(userInput);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                OAuth\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        OAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    OAuth(_OAuthInput: OAuthInput)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/auth.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _OAuthInput\n                                    \n                                                OAuthInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/auth.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { OAuthInput, User, UserOAuth, UsersService } from '@src/users';\nimport { compareSync } from 'bcrypt';\n\n@Injectable()\nexport class AuthService {\n  constructor(private usersService: UsersService) {}\n\n  async validateUser(username: string, password: string): Promise {\n    const user = await this.usersService.getUser({ username });\n\n    const isCorrect = compareSync(password, user?.password || '');\n    if (user && isCorrect) {\n      //\n\n      // const {\n      //   password: {},\n      //   ...result\n      // } = user;\n      return user;\n    } else {\n      return null;\n    }\n  }\n  // public login(user: Partial): LoginResponse {\n  //   const payload: Payload = {\n  //     _id: user._id,\n  //     username: user.username,\n  //     email: user.email,\n  //     sub: user._id,\n  //   };\n  //\n  //   const refreshToken = 'xx';\n  //   // this.usersService.updateRefreshToken(user._id, refreshToken);\n  //   return { user, refreshToken };\n  // }\n\n  public OAuth(_OAuthInput: OAuthInput): Promise {\n    return this.usersService.OAuth(_OAuthInput);\n  }\n  // public async refreshAccessToken(userInput: UserInput) {\n  //   const { _id, refreshToken } = userInput;\n  //   const user = await this.usersService.getUser({ _id });\n  //   const payload: Payload = {\n  //     _id: user._id,\n  //     username: user.username,\n  //     email: user.email,\n  //     sub: user._id,\n  //   };\n  //\n  //   if (user.refreshToken === refreshToken)\n  //     return {\n  //       accessToken: this.jwtService.sign(payload, {\n  //         expiresIn: process.env.TIME_EXPIRE_ACCESS_TOKEN,\n  //       }),\n  //     };\n  //   return null;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangeNameConversation.html":{"url":"classes/ChangeNameConversation.html","title":"class - ChangeNameConversation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangeNameConversation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversations/dto/conversation.input.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, InputType, ObjectType, PickType } from '@nestjs/graphql';\nimport { Conversation } from '@src/conversations';\n\nimport { Profile } from '@src/profiles';\nimport { IsOptional } from 'class-validator';\n\nexport namespace ConversationInput {\n  @ArgsType()\n  @InputType()\n  export class CreateConversation {\n    @Field(() => [String])\n    members: Array;\n\n    @Field(() => String)\n    @IsOptional()\n    name?: string;\n  }\n\n  @ObjectType()\n  export class ListFriendNotInConversation {\n    @Field(() => [Profile])\n    result: Profile[];\n  }\n\n  @ArgsType()\n  @InputType()\n  export class ChangeNameConversation extends PickType(\n    Conversation,\n    ['_id', 'name'] as const,\n    InputType,\n  ) {}\n}\n\nexport default ConversationInput;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Comment.html":{"url":"classes/Comment.html","title":"class - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comments.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                _id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                post\n                            \n                            \n                                profile\n                            \n                            \n                                text\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comments.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comments.schema.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comments.schema.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :     P\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: String})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comments.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profile\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PF\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: String})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comments.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: String})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comments.schema.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comments.schema.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Post } from '@src/posts';\nimport { Profile } from '@src/profiles';\nimport { ObjectId } from 'mongodb';\nimport mongoose from 'mongoose';\n\nexport type CommentDocument = Comment & mongoose.Document;\n@Schema({\n  timestamps: {\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt',\n  },\n})\n@ObjectType()\nexport class Comment | string = string,\n  P extends Post | Post | string = string,\n> {\n  @Field(() => ID)\n  _id?: ObjectId | string;\n\n  @Prop({ required: true, type: String })\n  @Field(() => Profile)\n  profile: PF;\n\n  @Prop({ required: true, type: String })\n  @Field(() => Post)\n  post: P;\n\n  @Prop({ required: true, type: String })\n  @Field(() => String)\n  text: string;\n\n  @Prop({ type: Date })\n  @Field(() => String)\n  deletedAt: Date;\n\n  @Field(() => String)\n  createdAt: Date;\n\n  @Field(() => String)\n  updatedAt: Date;\n}\n\nexport const CommentSchema = SchemaFactory.createForClass(Comment);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentsModule.html":{"url":"modules/CommentsModule.html","title":"module - CommentsModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\ncluster_CommentsModule_imports\n\n\n\n\nProfilesModule\n\nProfilesModule\n\n\n\nCommentsModule\n\nCommentsModule\n\nCommentsModule -->\n\nProfilesModule->CommentsModule\n\n\n\n\n\nCommentsService\n\nCommentsService\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/comments/comments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ProfilesModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ProfilesModule } from '@src/profiles';\nimport {\n  Comment,\n  CommentSchema,\n  CommentsRepository,\n  CommentsResolver,\n  CommentsService,\n} from '@src/comments';\n\n@Module({\n  imports: [\n    MongooseModule.forFeatureAsync([\n      {\n        name: Comment.name,\n        useFactory: () => CommentSchema,\n      },\n    ]),\n    ProfilesModule,\n  ],\n  providers: [CommentsService, CommentsResolver, CommentsRepository],\n})\nexport class CommentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentsRepository.html":{"url":"classes/CommentsRepository.html","title":"class - CommentsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comments.repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                commentPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/comments/comments.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        commentPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    commentPost(userId: string, postId: string, text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.repository.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.repository.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getComments(post: string)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.repository.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectModel } from '@nestjs/mongoose';\nimport { Post } from '@src/posts';\nimport { Profile } from '@src/profiles';\nimport { Comment, CommentDocument } from '@src/comments';\nimport { UpdateResult } from 'mongodb';\nimport { Model, Schema } from 'mongoose';\n\nexport class CommentsRepository {\n  constructor(@InjectModel(Comment.name) private readonly commentModel: Model) {}\n  async commentPost(userId: string, postId: string, text: string): Promise> {\n    const result = await new this.commentModel({\n      profile: userId,\n      post: postId,\n      text,\n    }).save();\n    const { profile, post, text: _text, _id, deletedAt, createdAt, updatedAt } = result;\n    return {\n      profile,\n      post,\n      text: _text,\n      _id,\n      deletedAt,\n      createdAt,\n      updatedAt,\n    };\n  }\n\n  async deleteComment(_id: string) {\n    return this.commentModel.findOneAndUpdate(\n      {\n        _id,\n      },\n      {\n        deletedAt: Date.now(),\n      },\n    );\n  }\n\n  async getComments(post: string) {\n    return this.commentModel.aggregate>>([\n      {\n        $match: {\n          post,\n        },\n      },\n      {\n        $lookup: {\n          from: 'profiles',\n          localField: 'profile',\n          foreignField: 'id',\n          as: 'profile',\n        },\n      },\n      {\n        $unwind: {\n          path: '$profile',\n          preserveNullAndEmptyArrays: false,\n        },\n      },\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentsResolver.html":{"url":"classes/CommentsResolver.html","title":"class - CommentsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comments.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                commentAdded\n                            \n                            \n                                    Async\n                                commentPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsService: CommentsService, profilesService: ProfilesService, pubSub: PubSub)\n                    \n                \n                        \n                            \n                                Defined in src/comments/comments.resolver.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsService\n                                                  \n                                                        \n                                                                        CommentsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profilesService\n                                                  \n                                                        \n                                                                        ProfilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pubSub\n                                                  \n                                                        \n                                                                    PubSub\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        commentAdded\n                        \n                    \n                \n            \n            \n                \n                    \n                    commentAdded(post: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Subscription(undefined, {name: 'commentAdded', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.resolver.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        commentPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    commentPost(user: Current, post: string, text: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'commentPost', nullable: false})\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.resolver.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(user: Current, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'deleteComment', nullable: false})\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.resolver.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getComments(post: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'getComments', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.resolver.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Authorization } from '@common/decorators';\nimport { AuthGuard } from '@common/guards';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { Args, ID, Mutation, Query, Resolver, Subscription } from '@nestjs/graphql';\nimport { Post } from '@src/posts';\nimport { Profile, ProfilesService } from '@src/profiles';\nimport { Comment, CommentsService } from '@src/comments';\nimport { PUB_SUB } from '@src/pubsub.module';\nimport { Current } from '@src/users';\nimport { PubSub } from 'graphql-subscriptions';\n\n@Resolver()\n@UseGuards(AuthGuard)\nexport class CommentsResolver {\n  /**\n   *\n   */\n  constructor(\n    private readonly commentsService: CommentsService,\n    private readonly profilesService: ProfilesService,\n    @Inject(PUB_SUB) private readonly pubSub: PubSub,\n  ) {}\n\n  @Mutation(() => Comment, {\n    name: 'commentPost',\n    nullable: false,\n  })\n  async commentPost(\n    @Authorization() user: Current,\n    @Args({ name: 'post', type: () => String }) post: string,\n    @Args({ name: 'text', type: () => String }) text: string,\n  ): Promise> {\n    const promises = [\n      this.commentsService.commentPost(user._id.toString(), post, text),\n      this.profilesService.getProfile({\n        id: user._id.toString(),\n      }),\n    ];\n    const [comment, profile] = await Promise.all(promises);\n    const result: Comment = {\n      ...comment,\n      profile: {\n        ...profile,\n      } as Profile,\n    } as Comment;\n    await this.pubSub.publish('commentAdded', {\n      commentAdded: result,\n    });\n    return result;\n  }\n\n  @Mutation(() => Comment, {\n    name: 'deleteComment',\n    nullable: false,\n  })\n  async deleteComment(\n    @Authorization() user: Current,\n    @Args({ name: 'id', type: () => ID }) id: string,\n  ) {\n    return this.commentsService.deleteComment(id);\n  }\n\n  @Query(() => [Comment], {\n    name: 'getComments',\n    nullable: true,\n  })\n  async getComments(@Args({ name: 'post', type: () => String }) post: string) {\n    return this.commentsService.getComments(post);\n  }\n\n  @Subscription(() => Post, {\n    name: 'commentAdded',\n    nullable: true,\n  })\n  async commentAdded(@Args({ name: 'post', type: () => String }) post: string) {\n    return this.pubSub.asyncIterator('commentAdded');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentsService.html":{"url":"injectables/CommentsService.html","title":"injectable - CommentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                commentPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: CommentsRepository)\n                    \n                \n                        \n                            \n                                Defined in src/comments/comments.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        CommentsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        commentPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    commentPost(userId: string, postId: string, text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getComments(post: string)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Comment, CommentsRepository } from '@src/comments';\n\n@Injectable()\nexport class CommentsService {\n  /**\n   *\n   */\n  constructor(private readonly commentsRepository: CommentsRepository) {}\n\n  async commentPost(userId: string, postId: string, text: string): Promise> {\n    return this.commentsRepository.commentPost(userId, postId, text);\n  }\n\n  async deleteComment(_id: string) {\n    return this.commentsRepository.deleteComment(_id);\n  }\n\n  async getComments(post: string) {\n    return this.commentsRepository.getComments(post);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Conversation.html":{"url":"classes/Conversation.html","title":"class - Conversation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Conversation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversations/conversations.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                _id\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/conversations.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string[] | Profile[] | Profile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: () => , ref: 'Friend'})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/conversations.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/conversations.schema.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Profile } from '@src/profiles';\nimport mongoose, { ObjectId } from 'mongoose';\n\nexport type ConversationDocument = Conversation & mongoose.Document;\n\n@Schema({\n  timestamps: {\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt',\n  },\n})\n@ObjectType()\nexport class Conversation {\n  @Field(() => ID, { nullable: false })\n  _id?: ObjectId;\n\n  @Field(() => String, { nullable: true })\n  @Prop({ type: String, required: false })\n  name: string;\n\n  @Prop({ required: true, type: () => [String], ref: 'Friend' })\n  @Field(() => [Profile])\n  members: string[] | Profile[] | Profile[];\n}\n\nexport const ConversationSchema = SchemaFactory.createForClass(Conversation);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationsGateway.html":{"url":"injectables/ConversationsGateway.html","title":"injectable - ConversationsGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationsGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversations/conversations.gateway.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMember\n                            \n                            \n                                    Async\n                                friendIsOnline\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache, profilesService: ProfilesService, conversationsService: ConversationsService)\n                    \n                \n                        \n                            \n                                Defined in src/conversations/conversations.gateway.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profilesService\n                                                  \n                                                        \n                                                                        ProfilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        conversationsService\n                                                  \n                                                        \n                                                                        ConversationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addMember(payload, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('conversation.addMember')\n                \n            \n\n            \n                \n                    Defined in src/conversations/conversations.gateway.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        friendIsOnline\n                        \n                    \n                \n            \n            \n                \n                    \n                    friendIsOnline(payload, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('conversation.friendIsOnline')\n                \n            \n\n            \n                \n                    Defined in src/conversations/conversations.gateway.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/conversations.gateway.ts:25\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { CACHE_MANAGER, forwardRef, Inject, Injectable } from '@nestjs/common';\nimport {\n  ConnectedSocket,\n  MessageBody,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\n\nimport { Conversation, ConversationsService } from '@src/conversations';\nimport { Profile, ProfilesService } from '@src/profiles';\nimport { Cache } from 'cache-manager';\nimport { isEmpty, uniq } from 'lodash';\nimport { Server, Socket } from 'socket.io';\n\n@WebSocketGateway(3005, { cors: true })\n@Injectable()\nexport class ConversationsGateway {\n  constructor(\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n\n    @Inject(forwardRef(() => ProfilesService)) private profilesService: ProfilesService,\n    private conversationsService: ConversationsService,\n  ) {}\n  @WebSocketServer() server: Server;\n\n  @SubscribeMessage('conversation.addMember')\n  async addMember(@MessageBody() payload, @ConnectedSocket() client: Socket) {\n    const { profileId, conversationId, invitorId } = payload;\n\n    if (profileId && conversationId && invitorId) {\n      //\n\n      const promises = [\n        this.conversationsService.getConversationByIdNoRef(conversationId),\n\n        this.profilesService.getProfile({\n          id: profileId,\n        }),\n      ];\n\n      const result = await Promise.all(promises);\n      const conversation: Conversation = (result[0] as Conversation) || null;\n      const profile: Profile = (result[1] as Profile) || null;\n      if (conversation && profile) {\n        let listSocketId = [];\n        const { members } = conversation;\n\n        for (const member of members) {\n          const temp = (await this.cacheManager.get(member as string)) || [];\n          listSocketId.push(...temp);\n        }\n\n        const profileSocketIds = (await this.cacheManager.get(profileId)) || [];\n        const senderSocketIds = (await this.cacheManager.get(invitorId)) || [];\n\n        // senderSocketIds = senderSocketIds.filter((socketId) => socketId !== client.id);\n\n        listSocketId.push(...senderSocketIds, ...profileSocketIds);\n        listSocketId = uniq(listSocketId);\n\n        if (!isEmpty(listSocketId)) {\n          this.server.to(listSocketId).emit('publish/conversation.addMember', {\n            conversation,\n            profile,\n            invitorId,\n          });\n        }\n      }\n    }\n\n    // if (!conversation.members) return;\n    //\n    // const { members } = conversation;\n    //\n    // const listSocketId = [];\n    // for (const member of members) {\n    //   const temp = (await this.cacheManager.get(member.id)) || [];\n    //   listSocketId.push(...temp);\n    // }\n    //\n    // let senderSocketIds = await this.cacheManager.get(sender.id);\n    //\n    // senderSocketIds = senderSocketIds.filter((socketId) => socketId !== client.id);\n    //\n    //\n    // listSocketId.push(...senderSocketIds);\n    // if (sender && !isEmpty(listSocketId)) {\n    //   client.to(listSocketId).emit('publish/messages.SEND', payload);\n    // }\n  }\n\n  @SubscribeMessage('conversation.friendIsOnline')\n  async friendIsOnline(@MessageBody() payload, @ConnectedSocket() client: Socket) {\n    const { conversation, caller } = payload;\n\n    const result = await this.conversationsService.getFriendInConversation(conversation, caller.id);\n    if (result) {\n      const members = result.members as Profile[];\n      const listSocketId = (await this.cacheManager.get(members[0].id)) || [];\n      client.emit('result.friendIsOnline', !isEmpty(listSocketId));\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConversationsModule.html":{"url":"modules/ConversationsModule.html","title":"module - ConversationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ConversationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_ConversationsModule_exports\n\n\n\n\nConversationsRepository \n\nConversationsRepository \n\n\n\nConversationsService \n\nConversationsService \n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsRepository  -->\n\nConversationsModule->ConversationsRepository \n\n\n\nConversationsService  -->\n\nConversationsModule->ConversationsService \n\n\n\n\n\nConversationsGateway\n\nConversationsGateway\n\nConversationsModule -->\n\nConversationsGateway->ConversationsModule\n\n\n\n\n\nConversationsRepository\n\nConversationsRepository\n\nConversationsModule -->\n\nConversationsRepository->ConversationsModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/conversations/conversations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConversationsGateway\n                        \n                        \n                            ConversationsRepository\n                        \n                        \n                            ConversationsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConversationsRepository\n                        \n                        \n                            ConversationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BullModule } from '@nestjs/bull';\nimport { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { MessagesModule } from '@src/messages';\nimport { ProfilesModule } from '@src/profiles';\nimport {\n  ConversationSchema,\n  Conversation,\n  ConversationsRepository,\n  ConversationsService,\n  ConversationsGateway,\n  ConversationsResolver,\n} from '@src/conversations';\n\n@Module({\n  imports: [\n    forwardRef(() => ProfilesModule),\n    forwardRef(() => MessagesModule),\n    BullModule.registerQueue({\n      name: 'conversation-queue',\n    }),\n\n    MongooseModule.forFeatureAsync([\n      {\n        name: Conversation.name,\n        useFactory: () => {\n          return ConversationSchema;\n        },\n      },\n    ]),\n  ],\n  providers: [\n    ConversationsService,\n    ConversationsResolver,\n    ConversationsRepository,\n    ConversationsGateway,\n  ],\n  exports: [ConversationsRepository, ConversationsService],\n})\nexport class ConversationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConversationsProcessor.html":{"url":"classes/ConversationsProcessor.html","title":"class - ConversationsProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConversationsProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversations/conversations.processor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleUpdateAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(conversationsRepository: ConversationsRepository)\n                    \n                \n                        \n                            \n                                Defined in src/conversations/conversations.processor.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        conversationsRepository\n                                                  \n                                                        \n                                                                        ConversationsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleUpdateAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleUpdateAvatar(job: Job)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Process('createConversation')\n                \n            \n\n            \n                \n                    Defined in src/conversations/conversations.processor.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Process, Processor } from '@nestjs/bull';\nimport { Job } from 'bull';\nimport { ConversationsRepository } from '@src/conversations';\n\n@Processor('conversation-queue')\nexport class ConversationsProcessor {\n  constructor(private readonly conversationsRepository: ConversationsRepository) {}\n\n  @Process('createConversation')\n  async handleUpdateAvatar(job: Job) {\n    return this.conversationsRepository.createConversation(job.data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationsRepository.html":{"url":"injectables/ConversationsRepository.html","title":"injectable - ConversationsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversations/conversations.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMember\n                            \n                            \n                                    Async\n                                changeNameConversation\n                            \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                getConversationByFriend\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                    Async\n                                getConversationByIdNoRef\n                            \n                            \n                                    Async\n                                getConversationByProfileId\n                            \n                            \n                                    Async\n                                getFriendInConversation\n                            \n                            \n                                    Async\n                                getListFriendNotInConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(conversationModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/conversations/conversations.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        conversationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addMember(conversationId: string, profileId: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.repository.ts:210\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changeNameConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeNameConversation(payload: ConversationInput.ChangeNameConversation)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.repository.ts:262\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ConversationInput.ChangeNameConversation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(infoConversation: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.repository.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    infoConversation\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationByFriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationByFriend(profileId: string, friendId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.repository.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    friendId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(conversationId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.repository.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationByIdNoRef\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationByIdNoRef(conversationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.repository.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationByProfileId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationByProfileId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.repository.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFriendInConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFriendInConversation(conversationId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.repository.ts:230\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getListFriendNotInConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    getListFriendNotInConversation(conversationId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.repository.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { isEmpty } from 'lodash';\nimport { ObjectId } from 'mongodb';\nimport { Model } from 'mongoose';\nimport { Conversation, ConversationDocument, ConversationInput } from '@src/conversations';\n\n@Injectable()\nexport class ConversationsRepository {\n  constructor(\n    @InjectModel(Conversation.name) private readonly conversationModel: Model,\n  ) {}\n\n  async createConversation(infoConversation: Partial) {\n    const conversation = new this.conversationModel(infoConversation);\n    return conversation.save();\n  }\n  async getConversationByFriend(profileId: string, friendId: string) {\n    const result = await this.conversationModel.aggregate([\n      {\n        $match: {\n          $or: [{ members: [profileId, friendId] }, { members: [friendId, profileId] }],\n          $expr: { $eq: [{ $size: '$members' }, 2] },\n        },\n      },\n    ]);\n    if (!isEmpty(result)) return result[0];\n    return null;\n  }\n  async getConversationByProfileId(id: string): Promise {\n    return this.conversationModel.aggregate([\n      {\n        $match: {\n          members: {\n            $in: [id],\n          },\n        },\n      },\n      {\n        $lookup: {\n          from: 'profiles',\n          localField: 'members',\n          foreignField: 'id',\n          as: 'members',\n        },\n      },\n      {\n        $unwind: {\n          path: '$members',\n          preserveNullAndEmptyArrays: true,\n        },\n      },\n      {\n        $match: {\n          'members.id': {\n            $nin: [id],\n          },\n        },\n      },\n      {\n        $group: {\n          _id: '$_id',\n          members: {\n            $push: '$members',\n          },\n          name: {\n            $first: '$name',\n          },\n          createdAt: {\n            $first: '$createdAt',\n          },\n          updatedAt: {\n            $first: '$updatedAt',\n          },\n        },\n      },\n      {\n        $sort: {\n          _id: 1,\n        },\n      },\n    ]);\n  }\n  async getConversationById(conversationId: string, profileId: string): Promise {\n    const result = await this.conversationModel.aggregate([\n      {\n        $match: {\n          _id: new ObjectId(conversationId),\n        },\n      },\n      {\n        $unwind: {\n          path: '$members',\n          preserveNullAndEmptyArrays: true,\n        },\n      },\n      {\n        $lookup: {\n          from: 'profiles',\n          localField: 'members',\n          foreignField: 'id',\n          as: 'members',\n        },\n      },\n      {\n        $unwind: {\n          path: '$members',\n          preserveNullAndEmptyArrays: true,\n        },\n      },\n      {\n        $match: {\n          'members.id': {\n            $nin: [profileId],\n          },\n        },\n      },\n      {\n        $group: {\n          _id: '$_id',\n          members: {\n            $push: '$members',\n          },\n          name: {\n            $first: '$name',\n          },\n          createdAt: {\n            $first: '$createdAt',\n          },\n          updatedAt: {\n            $first: '$updatedAt',\n          },\n          countMember: {\n            $sum: 1,\n          },\n        },\n      },\n      {\n        $sort: {\n          _id: 1,\n        },\n      },\n    ]);\n    if (!isEmpty(result)) return result[0];\n    return null;\n  }\n\n  async getConversationByIdNoRef(conversationId: string) {\n    return this.conversationModel.findOne({ _id: conversationId });\n  }\n\n  async getListFriendNotInConversation(\n    conversationId: string,\n    profileId: string,\n  ): Promise {\n    const result =\n      await this.conversationModel.aggregate([\n        {\n          $match: {\n            _id: new ObjectId(conversationId),\n          },\n        },\n        {\n          $lookup: {\n            from: 'profiles',\n            localField: 'members',\n            foreignField: 'id',\n            as: 'membersDetail',\n          },\n        },\n        {\n          $unwind: {\n            path: '$membersDetail',\n            preserveNullAndEmptyArrays: true,\n          },\n        },\n        {\n          $match: {\n            'membersDetail.id': profileId,\n          },\n        },\n        {\n          $project: {\n            result: {\n              $filter: {\n                input: '$membersDetail.friends',\n                as: 'friend',\n                cond: {\n                  $not: {\n                    $in: ['$$friend.friendId', '$members'],\n                  },\n                },\n              },\n            },\n          },\n        },\n        {\n          $lookup: {\n            from: 'profiles',\n            localField: 'result.friendId',\n            foreignField: 'id',\n            as: 'result',\n          },\n        },\n      ]);\n    if (!isEmpty(result)) return result[0];\n    return null;\n  }\n\n  async addMember(conversationId: string, profileId: string[]): Promise {\n    const conversation = await this.conversationModel.findOne({\n      _id: conversationId,\n    });\n    if (conversation.members.length > 2) {\n      return this.conversationModel.findOneAndUpdate(\n        {\n          _id: conversationId,\n        },\n        { $push: { members: { $each: profileId } } },\n      );\n    } else {\n      const oldMember = conversation.members;\n      const result = new this.conversationModel({\n        members: [...oldMember, ...profileId],\n      });\n      return result.save();\n    }\n  }\n\n  async getFriendInConversation(conversationId: string, profileId: string): Promise {\n    const result = await this.conversationModel.aggregate([\n      {\n        $match: {\n          _id: new ObjectId(conversationId),\n        },\n      },\n      {\n        $project: {\n          members: {\n            $filter: {\n              input: '$members',\n              as: 'members',\n              cond: {\n                $ne: ['$$members', profileId],\n              },\n            },\n          },\n        },\n      },\n      {\n        $lookup: {\n          from: 'profiles',\n          localField: 'members',\n          foreignField: 'id',\n          as: 'members',\n        },\n      },\n    ]);\n    if (!isEmpty(result)) return result[0];\n    return null;\n  }\n  async changeNameConversation(\n    payload: ConversationInput.ChangeNameConversation,\n  ): Promise {\n    return this.conversationModel.findOneAndUpdate(\n      {\n        _id: payload._id,\n      },\n      {\n        name: payload.name,\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConversationsResolver.html":{"url":"classes/ConversationsResolver.html","title":"class - ConversationsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConversationsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversations/conversations.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMember\n                            \n                            \n                                    Async\n                                changeNameConversation\n                            \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                getConversationByFriend\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                    Async\n                                getConversationByProfileId\n                            \n                            \n                                    Async\n                                getListFriendNotInConversation\n                            \n                            \n                                    Async\n                                memberAdded\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(conversationsService: ConversationsService, pubSub: RedisPubSub)\n                    \n                \n                        \n                            \n                                Defined in src/conversations/conversations.resolver.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        conversationsService\n                                                  \n                                                        \n                                                                        ConversationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pubSub\n                                                  \n                                                        \n                                                                    RedisPubSub\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addMember(conversationId: string, profileId: string[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'addMemberConversation', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/conversations/conversations.resolver.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changeNameConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeNameConversation(payload: ConversationInput.ChangeNameConversation)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'changeNameConversation', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/conversations/conversations.resolver.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ConversationInput.ChangeNameConversation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(infoConversation: ConversationInput.CreateConversation)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'createConversation', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/conversations/conversations.resolver.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    infoConversation\n                                    \n                                            ConversationInput.CreateConversation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationByFriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationByFriend(profileId: string, friendId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'getConversationByFriend', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/conversations/conversations.resolver.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    friendId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(conversationId: string, user: Current)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'getConversationById', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/conversations/conversations.resolver.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationByProfileId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationByProfileId(profileId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'getConversationByProfileId', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/conversations/conversations.resolver.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getListFriendNotInConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    getListFriendNotInConversation(conversationId: string, user: Current)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'getListFriendNotInConversation', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/conversations/conversations.resolver.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        memberAdded\n                        \n                    \n                \n            \n            \n                \n                    \n                    memberAdded()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Subscription(undefined, {name: 'memberAdded', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/conversations/conversations.resolver.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Authorization } from '@common/decorators';\nimport { AuthGuard } from '@common/guards';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { Args, Mutation, Query, Resolver, Subscription } from '@nestjs/graphql';\nimport { Current } from '@src/users';\nimport { Conversation, ConversationInput, ConversationsService } from '@src/conversations';\nimport { RedisPubSub } from 'graphql-redis-subscriptions';\n\n@Resolver()\n@UseGuards(AuthGuard)\nexport class ConversationsResolver {\n  constructor(\n    private readonly conversationsService: ConversationsService,\n    @Inject('PUBSUB') private readonly pubSub: RedisPubSub,\n  ) {}\n\n  @Mutation(() => Boolean, {\n    name: 'createConversation',\n    nullable: true,\n  })\n  async createConversation(\n    @Args({ name: 'infoConversation', type: () => ConversationInput.CreateConversation })\n    infoConversation: ConversationInput.CreateConversation,\n  ): Promise {\n    return this.conversationsService.createConversation(infoConversation);\n  }\n\n  @Query(() => [Conversation], {\n    name: 'getConversationByProfileId',\n    nullable: true,\n  })\n  async getConversationByProfileId(\n    @Args({ name: 'profileId', type: () => String }) profileId: string,\n  ) {\n    return this.conversationsService.getConversationByProfileId(profileId);\n  }\n\n  @Query(() => Conversation, {\n    name: 'getConversationById',\n    nullable: true,\n  })\n  async getConversationById(\n    @Args({ name: 'conversationId', type: () => String }) conversationId: string,\n\n    @Authorization()\n    user: Current,\n  ) {\n    return this.conversationsService.getConversationById(conversationId, user._id.toString());\n  }\n\n  @Query(() => ConversationInput.ListFriendNotInConversation, {\n    name: 'getListFriendNotInConversation',\n    nullable: true,\n  })\n  async getListFriendNotInConversation(\n    @Args({ name: 'conversationId', type: () => String }) conversationId: string,\n\n    @Authorization()\n    user: Current,\n  ) {\n    return this.conversationsService.getListFriendNotInConversation(\n      conversationId,\n      user._id.toString(),\n    );\n  }\n\n  @Mutation(() => Conversation, {\n    name: 'addMemberConversation',\n    nullable: true,\n  })\n  async addMember(\n    @Args({ name: 'conversationId', type: () => String }) conversationId: string,\n    @Args({ name: 'profileIds', type: () => [String] }) profileId: string[],\n  ) {\n    const result = await this.conversationsService.addMember(conversationId, profileId);\n\n    this.pubSub.publish('memberAdded', { memberAdded: result });\n\n    return result;\n  }\n\n  @Query(() => Conversation, {\n    name: 'getConversationByFriend',\n    nullable: true,\n  })\n  async getConversationByFriend(\n    @Args({ name: 'profileId', type: () => String }) profileId: string,\n    @Args({ name: 'friendId', type: () => String }) friendId: string,\n  ) {\n    return this.conversationsService.getConversationByFriend(profileId, friendId);\n  }\n\n  @Mutation(() => Conversation, {\n    name: 'changeNameConversation',\n    nullable: true,\n  })\n  async changeNameConversation(\n    @Args({ name: 'payload', type: () => ConversationInput.ChangeNameConversation })\n    payload: ConversationInput.ChangeNameConversation,\n  ) {\n    return this.conversationsService.changeNameConversation(payload).then((result) => result);\n  }\n\n  @Subscription(() => Conversation, {\n    name: 'memberAdded',\n    nullable: true,\n  })\n  async memberAdded() {\n    return this.pubSub.asyncIterator('memberAdded');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationsService.html":{"url":"injectables/ConversationsService.html","title":"injectable - ConversationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversations/conversations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMember\n                            \n                            \n                                    Async\n                                changeNameConversation\n                            \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                getConversationByFriend\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                    Async\n                                getConversationByIdNoRef\n                            \n                            \n                                    Async\n                                getConversationByProfileId\n                            \n                            \n                                    Async\n                                getFriendInConversation\n                            \n                            \n                                    Async\n                                getListFriendNotInConversation\n                            \n                            \n                                    Async\n                                queueCreateConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(conversationsRepository: ConversationsRepository, conversationQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/conversations/conversations.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        conversationsRepository\n                                                  \n                                                        \n                                                                        ConversationsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        conversationQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addMember(conversationId: string, profileId: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changeNameConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeNameConversation(payload: ConversationInput.ChangeNameConversation)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ConversationInput.ChangeNameConversation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(infoConversation: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    infoConversation\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationByFriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationByFriend(profileId, friendId)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profileId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    friendId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(conversationId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationByIdNoRef\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationByIdNoRef(conversationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationByProfileId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationByProfileId(profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFriendInConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFriendInConversation(conversationId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getListFriendNotInConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    getListFriendNotInConversation(conversationId: string, profileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        queueCreateConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    queueCreateConversation(infoConversation: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/conversations/conversations.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    infoConversation\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectQueue } from '@nestjs/bull';\nimport { Injectable } from '@nestjs/common';\nimport { Queue } from 'bull';\nimport { UpdateResult } from 'mongodb';\nimport { Conversation, ConversationInput, ConversationsRepository } from '@src/conversations';\n\n@Injectable()\nexport class ConversationsService {\n  constructor(\n    private readonly conversationsRepository: ConversationsRepository,\n    @InjectQueue('conversation-queue') private readonly conversationQueue: Queue,\n  ) {}\n\n  async createConversation(infoConversation: Partial) {\n    return this.conversationsRepository.createConversation(infoConversation);\n  }\n\n  async getConversationByFriend(profileId, friendId) {\n    return this.conversationsRepository.getConversationByFriend(profileId, friendId);\n  }\n\n  async queueCreateConversation(infoConversation: Partial) {\n    return this.conversationQueue.add(\n      'createConversation',\n      { ...infoConversation },\n      { removeOnComplete: true, removeOnFail: false },\n    );\n  }\n\n  async getConversationByProfileId(profileId: string): Promise {\n    return this.conversationsRepository.getConversationByProfileId(profileId);\n  }\n\n  async getConversationById(conversationId: string, profileId: string): Promise {\n    return this.conversationsRepository.getConversationById(conversationId, profileId);\n  }\n\n  async getConversationByIdNoRef(conversationId: string) {\n    return this.conversationsRepository.getConversationByIdNoRef(conversationId);\n  }\n  async getListFriendNotInConversation(conversationId: string, profileId: string) {\n    return this.conversationsRepository.getListFriendNotInConversation(conversationId, profileId);\n  }\n  async addMember(\n    conversationId: string,\n    profileId: string[],\n  ): Promise {\n    return this.conversationsRepository.addMember(conversationId, profileId);\n    // return {\n    //   modifiedCount: 1,\n    // };\n  }\n  async getFriendInConversation(conversationId: string, profileId: string): Promise {\n    return this.conversationsRepository.getFriendInConversation(conversationId, profileId);\n  }\n\n  async changeNameConversation(payload: ConversationInput.ChangeNameConversation) {\n    return this.conversationsRepository.changeNameConversation(payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Create.html":{"url":"classes/Create.html","title":"class - Create","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Create\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profiles/dto/profile.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                provider\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/dto/profile.input.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/dto/profile.input.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/dto/profile.input.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/dto/profile.input.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, InputType } from '@nestjs/graphql';\nimport { FileUpload, GraphQLUpload } from 'graphql-upload';\n\nexport namespace ProfileInput {\n  @ArgsType()\n  @InputType()\n  export class Create {\n    @Field()\n    id: string;\n\n    @Field()\n    email: string;\n\n    @Field()\n    provider: string;\n\n    @Field()\n    name: string;\n  }\n  @ArgsType()\n  @InputType()\n  export class Search {\n    @Field()\n    keyword: string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class Obtain {\n    @Field()\n    id: string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class _Upload_ {\n    @Field(() => GraphQLUpload)\n    file: FileUpload;\n\n    @Field(() => String)\n    id: string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class Friend {\n    @Field()\n    userId: string;\n    @Field()\n    friendId: string;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConversation.html":{"url":"classes/CreateConversation.html","title":"class - CreateConversation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConversation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversations/dto/conversation.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/dto/conversation.input.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/dto/conversation.input.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, InputType, ObjectType, PickType } from '@nestjs/graphql';\nimport { Conversation } from '@src/conversations';\n\nimport { Profile } from '@src/profiles';\nimport { IsOptional } from 'class-validator';\n\nexport namespace ConversationInput {\n  @ArgsType()\n  @InputType()\n  export class CreateConversation {\n    @Field(() => [String])\n    members: Array;\n\n    @Field(() => String)\n    @IsOptional()\n    name?: string;\n  }\n\n  @ObjectType()\n  export class ListFriendNotInConversation {\n    @Field(() => [Profile])\n    result: Profile[];\n  }\n\n  @ArgsType()\n  @InputType()\n  export class ChangeNameConversation extends PickType(\n    Conversation,\n    ['_id', 'name'] as const,\n    InputType,\n  ) {}\n}\n\nexport default ConversationInput;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInput.html":{"url":"classes/CreateInput.html","title":"class - CreateInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                provider\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEmail()@IsNotEmpty()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create.input.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Length(6)@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create.input.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProviderInput\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create.input.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(6, 15)@IsNotEmpty()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create.input.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, InputType } from '@nestjs/graphql';\nimport { IsEmail, IsNotEmpty, IsString, Length } from 'class-validator';\nimport { ProviderInput } from '../users.type';\n\n@ArgsType()\n@InputType()\nexport class CreateInput {\n  @IsString()\n  @Length(6, 15)\n  @IsNotEmpty()\n  @Field(() => String, { nullable: true })\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Length(6)\n  @Field(() => String, { nullable: true })\n  password: string;\n\n  @IsString()\n  @IsEmail()\n  @IsNotEmpty()\n  @Field(() => String, { nullable: true })\n  email: string;\n\n  @Field(() => ProviderInput)\n  provider: ProviderInput;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePost.html":{"url":"classes/CreatePost.html","title":"class - CreatePost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/posts.input.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObjectId } from '@decorators/IsObjectId.decorator';\nimport {\n  ArgsType,\n  Field,\n  InputType,\n  ObjectType,\n  OmitType,\n  PartialType,\n  PickType,\n} from '@nestjs/graphql';\n// import { Post } from '@src/posts';\nimport { IsOptional } from 'class-validator';\nimport { Post } from '@src/posts';\n\nexport namespace PostInput {\n  @ObjectType()\n  export class PostDto {\n    @Field(() => String, {\n      description: 'content of post',\n      nullable: false,\n    })\n    content: string;\n\n    @Field(() => Number, {\n      description: 'count like of post',\n      nullable: true,\n    })\n    countLike?: number;\n\n    @Field(() => String, {\n      description: 'profile of post',\n      nullable: false,\n    })\n    @IsObjectId()\n    profile: string;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class CreatePost extends OmitType(PartialType(PostDto, InputType), ['profile'] as const) {}\n\n  @InputType()\n  @ArgsType()\n  export class UpdatePost extends PartialType(PostDto, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class DeletePost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class GetPost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class InteractPost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class GetPosts {\n    @IsOptional()\n    @Field(() => String, {\n      nullable: true,\n      defaultValue: null,\n    })\n    _id: string;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRequest.html":{"url":"classes/CreateRequest.html","title":"class - CreateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/requests/dto/requests.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userReceive\n                            \n                            \n                                    Optional\n                                userRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userReceive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/requests/dto/requests.input.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userRequest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/requests/dto/requests.input.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, ID, InputType, IntersectionType } from '@nestjs/graphql';\nimport { IsBoolean, IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nnamespace RequestInput {\n  @InputType()\n  @ArgsType()\n  export class CreateRequest {\n    // NOTE: Optional: can be inject user from token\n    @Field(() => ID, { nullable: true })\n    @IsString()\n    @IsOptional()\n    userRequest?: string;\n\n    @Field(() => ID)\n    @IsString()\n    @IsNotEmpty()\n    userReceive: string;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class InfoRequest {\n    @Field(() => ID, { nullable: true })\n    @IsString()\n    @IsOptional()\n    userRequest?: string;\n\n    @Field(() => ID, { nullable: true })\n    @IsString()\n    @IsOptional()\n    userReceive?: string;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class Status {\n    @Field(() => Boolean)\n    @IsBoolean()\n    isPending: boolean;\n\n    @Field(() => Boolean)\n    @IsBoolean()\n    isReject: boolean;\n\n    @Field(() => Boolean)\n    @IsBoolean()\n    isAccept: boolean;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class RetrieveRequest extends IntersectionType(InfoRequest, Status) {}\n}\n\nexport default RequestInput;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Current.html":{"url":"classes/Current.html","title":"class - Current","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Current\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/types/UserOAuth.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, IntersectionType, ObjectType } from '@nestjs/graphql';\nimport { User } from '../users.schema';\n\nexport type UserOAuth = User & { provider: string; id: string };\n\n@ObjectType()\nclass OAuthInfo {\n  @Field()\n  name: string;\n\n  @Field()\n  picture: string;\n\n  @Field({\n    name: 'id',\n    description: 'id',\n  })\n  sub: string;\n}\n\n@ObjectType()\nexport class Current extends IntersectionType(User, OAuthInfo) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeletePost.html":{"url":"classes/DeletePost.html","title":"class - DeletePost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeletePost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/posts.input.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObjectId } from '@decorators/IsObjectId.decorator';\nimport {\n  ArgsType,\n  Field,\n  InputType,\n  ObjectType,\n  OmitType,\n  PartialType,\n  PickType,\n} from '@nestjs/graphql';\n// import { Post } from '@src/posts';\nimport { IsOptional } from 'class-validator';\nimport { Post } from '@src/posts';\n\nexport namespace PostInput {\n  @ObjectType()\n  export class PostDto {\n    @Field(() => String, {\n      description: 'content of post',\n      nullable: false,\n    })\n    content: string;\n\n    @Field(() => Number, {\n      description: 'count like of post',\n      nullable: true,\n    })\n    countLike?: number;\n\n    @Field(() => String, {\n      description: 'profile of post',\n      nullable: false,\n    })\n    @IsObjectId()\n    profile: string;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class CreatePost extends OmitType(PartialType(PostDto, InputType), ['profile'] as const) {}\n\n  @InputType()\n  @ArgsType()\n  export class UpdatePost extends PartialType(PostDto, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class DeletePost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class GetPost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class InteractPost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class GetPosts {\n    @IsOptional()\n    @Field(() => String, {\n      nullable: true,\n      defaultValue: null,\n    })\n    _id: string;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteResult.html":{"url":"classes/DeleteResult.html","title":"class - DeleteResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/graphql/types/DeleteResult.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                acknowledged\n                            \n                            \n                                deletedCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        acknowledged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/graphql/types/DeleteResult.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletedCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/graphql/types/DeleteResult.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class DeleteResult {\n  @Field()\n  acknowledged: boolean;\n\n  @Field()\n  deletedCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/File.html":{"url":"classes/File.html","title":"class - File","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  File\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/graphql/types/File.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                encoding\n                            \n                            \n                                filename\n                            \n                            \n                                mimetype\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        encoding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/graphql/types/File.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/graphql/types/File.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mimetype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/graphql/types/File.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/graphql/types/File.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class File {\n  @Field({ nullable: true })\n  filename: string;\n\n  @Field({ nullable: true })\n  mimetype: string;\n\n  @Field({ nullable: true })\n  encoding: string;\n\n  @Field({ nullable: true })\n  url: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileInfo.html":{"url":"classes/FileInfo.html","title":"class - FileInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                type\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/messages.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/messages.schema.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType, OmitType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { DynamicProfile, Profile } from '@src/profiles';\nimport mongoose, { ObjectId } from 'mongoose';\n\nexport type MessageDocument = Message & mongoose.Document;\n\n@ObjectType()\nexport class FileInfo {\n  @Field(() => String)\n  url: string;\n\n  @Field(() => String)\n  type: string;\n}\n\n@Schema({\n  timestamps: {\n    createdAt: 'createdAt',\n    updatedAt: false,\n  },\n})\n@ObjectType()\nexport class Message {\n  @Field(() => ID, { nullable: true })\n  _id?: ObjectId;\n\n  @Field(() => Profile, { nullable: false })\n  @Prop({ type: String, required: true })\n  sender: S;\n\n  @Field(() => ID, { nullable: false })\n  @Prop({ type: String, required: true })\n  conversation: string;\n\n  @Field(() => String, { nullable: true })\n  @Prop({ type: String, required: false })\n  message: string;\n\n  @Field(() => [FileInfo], { nullable: true })\n  @Prop({ required: false })\n  files: FileInfo[];\n\n  @Field(() => String, { nullable: false })\n  @Prop({ type: String, required: true })\n  type: string;\n\n  @Field(() => String)\n  createdAt: string;\n}\n\n@ObjectType()\nexport class MessageOmit extends OmitType(Message, ['conversation'] as const) {}\n\n@ObjectType()\nexport class MessagesConversation {\n  @Field(() => ID)\n  _id: string;\n\n  @Field(() => [MessageOmit])\n  messages: Omit;\n}\n\nexport const MessageSchema = SchemaFactory.createForClass(Message);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Friend.html":{"url":"classes/Friend.html","title":"class - Friend","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Friend\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profiles/dto/profile.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                friendId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        friendId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/dto/profile.input.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/dto/profile.input.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, InputType } from '@nestjs/graphql';\nimport { FileUpload, GraphQLUpload } from 'graphql-upload';\n\nexport namespace ProfileInput {\n  @ArgsType()\n  @InputType()\n  export class Create {\n    @Field()\n    id: string;\n\n    @Field()\n    email: string;\n\n    @Field()\n    provider: string;\n\n    @Field()\n    name: string;\n  }\n  @ArgsType()\n  @InputType()\n  export class Search {\n    @Field()\n    keyword: string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class Obtain {\n    @Field()\n    id: string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class _Upload_ {\n    @Field(() => GraphQLUpload)\n    file: FileUpload;\n\n    @Field(() => String)\n    id: string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class Friend {\n    @Field()\n    userId: string;\n    @Field()\n    friendId: string;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FriendProfile.html":{"url":"classes/FriendProfile.html","title":"class - FriendProfile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FriendProfile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/friends/friends.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                friendId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        friendId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/friends/friends.schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\n\nexport type FriendDocument = FriendProfile & mongoose.Document;\n\n@Schema()\n@ObjectType()\nexport class FriendProfile {\n  @Prop()\n  @Field(() => String, {\n    nullable: true,\n  })\n  friendId: string;\n}\n\nexport const FriendSchema = SchemaFactory.createForClass(FriendProfile);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FriendsModule.html":{"url":"modules/FriendsModule.html","title":"module - FriendsModule","body":"\n                   \n\n\n\n\n    Modules\n    FriendsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FriendsModule\n\n\n\ncluster_FriendsModule_imports\n\n\n\ncluster_FriendsModule_providers\n\n\n\n\nProfilesModule\n\nProfilesModule\n\n\n\nFriendsModule\n\nFriendsModule\n\nFriendsModule -->\n\nProfilesModule->FriendsModule\n\n\n\n\n\nFriendsService\n\nFriendsService\n\nFriendsModule -->\n\nFriendsService->FriendsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/friends/friends.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FriendsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ProfilesModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProfilesModule } from '@src/profiles';\nimport { FriendProfile, FriendsResolver, FriendsService } from '@src/friends';\n\n@Module({\n  providers: [FriendsService, FriendsResolver, FriendProfile],\n  imports: [ProfilesModule],\n})\nexport class FriendsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FriendsProfile.html":{"url":"classes/FriendsProfile.html","title":"class - FriendsProfile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FriendsProfile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/friends/types.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ObjectType, PickType } from '@nestjs/graphql';\nimport { Profile } from '@src/profiles';\n\n@ObjectType()\nexport class FriendsProfile extends PickType(Profile, ['friends'] as const, ObjectType) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FriendsResolver.html":{"url":"classes/FriendsResolver.html","title":"class - FriendsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FriendsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/friends/friends.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getEntireFriends\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(friendsService: FriendsService)\n                    \n                \n                        \n                            \n                                Defined in src/friends/friends.resolver.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        friendsService\n                                                  \n                                                        \n                                                                        FriendsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getEntireFriends\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntireFriends(user: Current)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/friends/friends.resolver.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Authorization } from '@common/decorators';\nimport { AuthGuard } from '@common/guards';\nimport { UseGuards } from '@nestjs/common';\nimport { Query, Resolver } from '@nestjs/graphql';\nimport { Current } from '@src/users';\nimport { FriendsProfile, FriendsService } from '@src/friends';\n\n@Resolver()\n@UseGuards(AuthGuard)\nexport class FriendsResolver {\n  constructor(private readonly friendsService: FriendsService) {}\n\n  @Query(() => FriendsProfile, { nullable: true })\n  async getEntireFriends(\n    @Authorization()\n    user: Current,\n  ): Promise {\n    const id = user.sub;\n    return this.friendsService.getEntireFriends(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FriendsService.html":{"url":"injectables/FriendsService.html","title":"injectable - FriendsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FriendsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/friends/friends.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getEntireFriends\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profilesRepository: ProfilesRepository)\n                    \n                \n                        \n                            \n                                Defined in src/friends/friends.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        profilesRepository\n                                                  \n                                                        \n                                                                        ProfilesRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getEntireFriends\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntireFriends(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/friends/friends.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ProfilesRepository } from '@src/profiles';\nimport { FriendsProfile } from '@src/friends';\n\n@Injectable()\nexport class FriendsService {\n  constructor(private readonly profilesRepository: ProfilesRepository) {}\n\n  async getEntireFriends(id: string): Promise {\n    return this.profilesRepository.getEntireFriends(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPost.html":{"url":"classes/GetPost.html","title":"class - GetPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/posts.input.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObjectId } from '@decorators/IsObjectId.decorator';\nimport {\n  ArgsType,\n  Field,\n  InputType,\n  ObjectType,\n  OmitType,\n  PartialType,\n  PickType,\n} from '@nestjs/graphql';\n// import { Post } from '@src/posts';\nimport { IsOptional } from 'class-validator';\nimport { Post } from '@src/posts';\n\nexport namespace PostInput {\n  @ObjectType()\n  export class PostDto {\n    @Field(() => String, {\n      description: 'content of post',\n      nullable: false,\n    })\n    content: string;\n\n    @Field(() => Number, {\n      description: 'count like of post',\n      nullable: true,\n    })\n    countLike?: number;\n\n    @Field(() => String, {\n      description: 'profile of post',\n      nullable: false,\n    })\n    @IsObjectId()\n    profile: string;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class CreatePost extends OmitType(PartialType(PostDto, InputType), ['profile'] as const) {}\n\n  @InputType()\n  @ArgsType()\n  export class UpdatePost extends PartialType(PostDto, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class DeletePost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class GetPost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class InteractPost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class GetPosts {\n    @IsOptional()\n    @Field(() => String, {\n      nullable: true,\n      defaultValue: null,\n    })\n    _id: string;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPosts.html":{"url":"classes/GetPosts.html","title":"class - GetPosts","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPosts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/posts.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Field(undefined, {nullable: true, defaultValue: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/posts.input.ts:66\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObjectId } from '@decorators/IsObjectId.decorator';\nimport {\n  ArgsType,\n  Field,\n  InputType,\n  ObjectType,\n  OmitType,\n  PartialType,\n  PickType,\n} from '@nestjs/graphql';\n// import { Post } from '@src/posts';\nimport { IsOptional } from 'class-validator';\nimport { Post } from '@src/posts';\n\nexport namespace PostInput {\n  @ObjectType()\n  export class PostDto {\n    @Field(() => String, {\n      description: 'content of post',\n      nullable: false,\n    })\n    content: string;\n\n    @Field(() => Number, {\n      description: 'count like of post',\n      nullable: true,\n    })\n    countLike?: number;\n\n    @Field(() => String, {\n      description: 'profile of post',\n      nullable: false,\n    })\n    @IsObjectId()\n    profile: string;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class CreatePost extends OmitType(PartialType(PostDto, InputType), ['profile'] as const) {}\n\n  @InputType()\n  @ArgsType()\n  export class UpdatePost extends PartialType(PostDto, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class DeletePost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class GetPost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class InteractPost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class GetPosts {\n    @IsOptional()\n    @Field(() => String, {\n      nullable: true,\n      defaultValue: null,\n    })\n    _id: string;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQLException.html":{"url":"classes/GraphQLException.html","title":"class - GraphQLException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQLException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/graphql.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, statusCode: HttpStatus)\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/graphql.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        HttpStatus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class GraphQLException extends HttpException {\n  /**\n   *\n   */\n\n  constructor(message: string, statusCode: HttpStatus) {\n    super(message, statusCode);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQLExceptionFilter.html":{"url":"classes/GraphQLExceptionFilter.html","title":"class - GraphQLExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQLExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/graphql.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLException\n            \n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: GraphQLException)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/graphql.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                GraphQLException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLException } from '@exceptions/graphql.exception';\nimport { Catch, ExceptionFilter } from '@nestjs/common';\n\n@Catch(GraphQLException)\nexport class GraphQLExceptionFilter extends GraphQLException implements ExceptionFilter {\n  catch(exception: GraphQLException) {\n    return new GraphQLException(exception.getResponse().toString(), exception.getStatus());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HomeMiddleware.html":{"url":"injectables/HomeMiddleware.html","title":"injectable - HomeMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HomeMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/home.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middlewares/home.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { NextFunction, Request, Response } from 'express';\n\n@Injectable()\nexport class HomeMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    \n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InfoRequest.html":{"url":"classes/InfoRequest.html","title":"class - InfoRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InfoRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/requests/dto/requests.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                userReceive\n                            \n                            \n                                    Optional\n                                userRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userReceive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/requests/dto/requests.input.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userRequest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/requests/dto/requests.input.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, ID, InputType, IntersectionType } from '@nestjs/graphql';\nimport { IsBoolean, IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nnamespace RequestInput {\n  @InputType()\n  @ArgsType()\n  export class CreateRequest {\n    // NOTE: Optional: can be inject user from token\n    @Field(() => ID, { nullable: true })\n    @IsString()\n    @IsOptional()\n    userRequest?: string;\n\n    @Field(() => ID)\n    @IsString()\n    @IsNotEmpty()\n    userReceive: string;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class InfoRequest {\n    @Field(() => ID, { nullable: true })\n    @IsString()\n    @IsOptional()\n    userRequest?: string;\n\n    @Field(() => ID, { nullable: true })\n    @IsString()\n    @IsOptional()\n    userReceive?: string;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class Status {\n    @Field(() => Boolean)\n    @IsBoolean()\n    isPending: boolean;\n\n    @Field(() => Boolean)\n    @IsBoolean()\n    isReject: boolean;\n\n    @Field(() => Boolean)\n    @IsBoolean()\n    isAccept: boolean;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class RetrieveRequest extends IntersectionType(InfoRequest, Status) {}\n}\n\nexport default RequestInput;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InteractPost.html":{"url":"classes/InteractPost.html","title":"class - InteractPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InteractPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/posts.input.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObjectId } from '@decorators/IsObjectId.decorator';\nimport {\n  ArgsType,\n  Field,\n  InputType,\n  ObjectType,\n  OmitType,\n  PartialType,\n  PickType,\n} from '@nestjs/graphql';\n// import { Post } from '@src/posts';\nimport { IsOptional } from 'class-validator';\nimport { Post } from '@src/posts';\n\nexport namespace PostInput {\n  @ObjectType()\n  export class PostDto {\n    @Field(() => String, {\n      description: 'content of post',\n      nullable: false,\n    })\n    content: string;\n\n    @Field(() => Number, {\n      description: 'count like of post',\n      nullable: true,\n    })\n    countLike?: number;\n\n    @Field(() => String, {\n      description: 'profile of post',\n      nullable: false,\n    })\n    @IsObjectId()\n    profile: string;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class CreatePost extends OmitType(PartialType(PostDto, InputType), ['profile'] as const) {}\n\n  @InputType()\n  @ArgsType()\n  export class UpdatePost extends PartialType(PostDto, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class DeletePost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class GetPost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class InteractPost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class GetPosts {\n    @IsOptional()\n    @Field(() => String, {\n      nullable: true,\n      defaultValue: null,\n    })\n    _id: string;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IsNonceConstraint.html":{"url":"classes/IsNonceConstraint.html","title":"class - IsNonceConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsNonceConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/validators/Nonce.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/common/validators/Nonce.validator.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(nonce: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/validators/Nonce.validator.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nonce\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ValidatorConstraint, ValidatorConstraintInterface } from 'class-validator';\n\n@ValidatorConstraint({ async: true })\nexport class IsNonceConstraint implements ValidatorConstraintInterface {\n  validate(nonce: string) {\n    return true;\n  }\n\n  defaultMessage(): string {\n    return 'Id is not valid';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IsObjectIdConstraint.html":{"url":"classes/IsObjectIdConstraint.html","title":"class - IsObjectIdConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsObjectIdConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/validators/ObjectId.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/common/validators/ObjectId.validator.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(objectId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/validators/ObjectId.validator.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    objectId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ValidatorConstraint, ValidatorConstraintInterface } from 'class-validator';\nimport { isValidObjectId } from 'mongoose';\n\n@ValidatorConstraint({ async: true })\nexport class IsObjectIdConstraint implements ValidatorConstraintInterface {\n  validate(objectId: string) {\n    return isValidObjectId(objectId);\n  }\n\n  defaultMessage(): string {\n    return 'Id is not valid';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Like.html":{"url":"classes/Like.html","title":"class - Like","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Like\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/likes/likes.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                _id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                post\n                            \n                            \n                                profile\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/likes/likes.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/likes/likes.schema.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/likes/likes.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :     P\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: String})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/likes/likes.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profile\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PF\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: String})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/likes/likes.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/likes/likes.schema.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { DynamicPost, Post } from '@src/posts';\nimport { DynamicProfile, Profile } from '@src/profiles';\nimport { ObjectId } from 'mongodb';\nimport { Document } from 'mongoose';\n\nexport type LikeDocument = Like & Document;\n@Schema({\n  timestamps: {\n    createdAt: 'createdAt',\n    updatedAt: 'createdAt',\n  },\n})\n@ObjectType()\nexport class Like {\n  @Field(() => ID)\n  _id?: ObjectId | string;\n\n  @Prop({ required: true, type: String })\n  @Field(() => Profile)\n  profile: PF;\n\n  @Prop({ required: true, type: String })\n  @Field(() => Post)\n  post: P;\n\n  @Prop({ type: Date })\n  @Field(() => String)\n  deletedAt: Date;\n\n  @Field(() => String)\n  createdAt: Date;\n\n  @Field(() => String)\n  updatedAt: Date;\n}\n\nexport type DynamicLike = Like | Like | string;\nexport const LikeSchema = SchemaFactory.createForClass(Like);\nLikeSchema.index({ profile: 1, post: 1 }, { unique: true });\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LikesModule.html":{"url":"modules/LikesModule.html","title":"module - LikesModule","body":"\n                   \n\n\n\n\n    Modules\n    LikesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LikesModule\n\n\n\ncluster_LikesModule_imports\n\n\n\ncluster_LikesModule_providers\n\n\n\n\nPostsModule\n\nPostsModule\n\n\n\nLikesModule\n\nLikesModule\n\nLikesModule -->\n\nPostsModule->LikesModule\n\n\n\n\n\nProfilesModule\n\nProfilesModule\n\nLikesModule -->\n\nProfilesModule->LikesModule\n\n\n\n\n\nLikesService\n\nLikesService\n\nLikesModule -->\n\nLikesService->LikesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/likes/likes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LikesService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PostsModule\n                        \n                        \n                            ProfilesModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ProfilesModule } from '@src/profiles';\nimport { PostsModule } from '@src/posts';\nimport { Like, LikeSchema, LikesRepository, LikesResolver, LikesService } from '@src/likes';\n\n@Module({\n  imports: [\n    ProfilesModule,\n    PostsModule,\n    MongooseModule.forFeatureAsync([\n      {\n        name: Like.name,\n        useFactory: () => {\n          return LikeSchema;\n        },\n      },\n    ]),\n  ],\n  providers: [LikesResolver, LikesService, LikesRepository],\n})\nexport class LikesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LikesRepository.html":{"url":"classes/LikesRepository.html","title":"class - LikesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LikesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/likes/likes.repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                likePost\n                            \n                            \n                                    Async\n                                unlikePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(likeModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/likes/likes.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        likeModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        likePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    likePost(user: Profile, post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/likes/likes.repository.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                            Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unlikePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    unlikePost(userId: string, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/likes/likes.repository.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectModel } from '@nestjs/mongoose';\nimport { LikeDocument, Like } from '@src/likes';\nimport { Post } from '@src/posts';\nimport { Profile } from '@src/profiles';\nimport { DeleteResult } from 'mongodb';\nimport { Model } from 'mongoose';\n\nexport class LikesRepository {\n  /**\n   *\n   */\n  constructor(@InjectModel(Like.name) private readonly likeModel: Model) {}\n\n  async likePost(user: Profile, post: Post): Promise>> {\n    const document: Like = await new this.likeModel({\n      profile: user.id,\n      post: post._id.toString(),\n    }).save();\n    return {\n      ...document,\n      profile: user,\n      post: post,\n    };\n  }\n\n  async unlikePost(userId: string, postId: string): Promise {\n    return this.likeModel.deleteOne({\n      profile: userId,\n      post: postId,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LikesResolver.html":{"url":"classes/LikesResolver.html","title":"class - LikesResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LikesResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/likes/likes.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                likePost\n                            \n                            \n                                    Async\n                                newLike\n                            \n                            \n                                    Async\n                                unlikePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(likesService: LikesService, postsService: PostsService, pubSub: RedisPubSub)\n                    \n                \n                        \n                            \n                                Defined in src/likes/likes.resolver.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        likesService\n                                                  \n                                                        \n                                                                        LikesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pubSub\n                                                  \n                                                        \n                                                                    RedisPubSub\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        likePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    likePost(user: Current, post: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'likePost', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/likes/likes.resolver.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        newLike\n                        \n                    \n                \n            \n            \n                \n                    \n                    newLike(user: Current, post: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Subscription(undefined, {name: 'newLike', nullable: false})\n                \n            \n\n            \n                \n                    Defined in src/likes/likes.resolver.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unlikePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    unlikePost(user: Current, post: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'unlikePost', nullable: false})\n                \n            \n\n            \n                \n                    Defined in src/likes/likes.resolver.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Authorization } from '@common/decorators';\nimport { AuthGuard } from '@common/guards';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { Args, Mutation, Resolver, Subscription } from '@nestjs/graphql';\nimport { Post, PostsService } from '@src/posts';\nimport { Profile } from '@src/profiles';\nimport { PUB_SUB } from '@src/pubsub.module';\n\nimport { Like, LikesService } from '@src/likes';\nimport { Current } from '@src/users';\nimport { RedisPubSub } from 'graphql-redis-subscriptions';\n\n@Resolver()\n@UseGuards(AuthGuard)\nexport class LikesResolver {\n  /**\n   *\n   */\n  constructor(\n    private readonly likesService: LikesService,\n    private readonly postsService: PostsService,\n\n    @Inject(PUB_SUB) private readonly pubSub: RedisPubSub,\n  ) {}\n\n  @Mutation(() => Like, {\n    name: 'likePost',\n    nullable: true,\n  })\n  async likePost(\n    @Authorization() user: Current,\n    @Args({ name: 'post', type: () => String })\n    post: string,\n  ): Promise>> {\n    const likeResult = await this.likesService.likePost(user._id.toString(), post);\n    const postResult = await this.postsService.getPost({ _id: post });\n\n    this.pubSub.publish(`newLike_${post}`, {\n      [`newLike`]: postResult,\n    });\n    return likeResult;\n  }\n\n  @Mutation(() => Number, {\n    name: 'unlikePost',\n    nullable: false,\n  })\n  async unlikePost(\n    @Authorization() user: Current,\n    @Args({ name: 'post', type: () => String }) post: string,\n  ) {\n    const resultLike = await this.likesService.unlikePost(user._id.toString(), post);\n    const postResult = await this.postsService.getPost({ _id: post });\n\n    void this.pubSub.publish(`newLike_${post}`, {\n      [`newLike`]: postResult,\n    });\n    // console.log(postResult);\n\n    return resultLike.deletedCount;\n  }\n\n  @Subscription(() => Post, {\n    name: 'newLike',\n    nullable: false,\n  })\n  async newLike(\n    @Authorization() user: Current,\n    @Args({ name: 'post', type: () => String }) post: string,\n  ) {\n    return this.pubSub.asyncIterator>(`newLike_${post}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LikesService.html":{"url":"injectables/LikesService.html","title":"injectable - LikesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LikesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/likes/likes.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                likePost\n                            \n                            \n                                    Async\n                                unlikePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(likesRepository: LikesRepository, profilesService: ProfilesService, postsService: PostsService)\n                    \n                \n                        \n                            \n                                Defined in src/likes/likes.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        likesRepository\n                                                  \n                                                        \n                                                                        LikesRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profilesService\n                                                  \n                                                        \n                                                                        ProfilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        likePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    likePost(userId: string, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/likes/likes.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unlikePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    unlikePost(userId: string, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/likes/likes.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PostsService } from '@src/posts';\nimport { ProfilesService } from '@src/profiles';\nimport { LikesRepository } from '@src/likes';\n\n@Injectable()\nexport class LikesService {\n  /**\n   *\n   */\n  constructor(\n    private readonly likesRepository: LikesRepository,\n    private readonly profilesService: ProfilesService,\n    private readonly postsService: PostsService,\n  ) {}\n\n  async likePost(userId: string, postId: string) {\n    const [user, post] = await Promise.all([\n      this.profilesService.getProfile({\n        id: userId,\n      }),\n      this.postsService.getPost({ _id: postId }),\n    ]);\n    if (user && post) return this.likesRepository.likePost(user, post);\n    return null;\n  }\n\n  async unlikePost(userId: string, postId: string) {\n    return this.likesRepository.unlikePost(userId, postId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ListFriendNotInConversation.html":{"url":"classes/ListFriendNotInConversation.html","title":"class - ListFriendNotInConversation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ListFriendNotInConversation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversations/dto/conversation.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                result\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Profile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/dto/conversation.input.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, InputType, ObjectType, PickType } from '@nestjs/graphql';\nimport { Conversation } from '@src/conversations';\n\nimport { Profile } from '@src/profiles';\nimport { IsOptional } from 'class-validator';\n\nexport namespace ConversationInput {\n  @ArgsType()\n  @InputType()\n  export class CreateConversation {\n    @Field(() => [String])\n    members: Array;\n\n    @Field(() => String)\n    @IsOptional()\n    name?: string;\n  }\n\n  @ObjectType()\n  export class ListFriendNotInConversation {\n    @Field(() => [Profile])\n    result: Profile[];\n  }\n\n  @ArgsType()\n  @InputType()\n  export class ChangeNameConversation extends PickType(\n    Conversation,\n    ['_id', 'name'] as const,\n    InputType,\n  ) {}\n}\n\nexport default ConversationInput;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginInput.html":{"url":"classes/LoginInput.html","title":"class - LoginInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/loginInput.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nonce\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/loginInput.input.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Length(6)@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/loginInput.input.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(6, 15)@IsNotEmpty()@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/loginInput.input.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, InputType } from '@nestjs/graphql';\nimport { IsNotEmpty, IsString, Length } from 'class-validator';\n\n@ArgsType()\n@InputType()\nexport class LoginInput {\n  @IsString()\n  @Length(6, 15)\n  @IsNotEmpty()\n  @Field(() => String)\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Length(6)\n  @Field(() => String)\n  password: string;\n\n  @IsNotEmpty()\n  @Field(() => String)\n  nonce: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponse.html":{"url":"classes/LoginResponse.html","title":"class - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/types/LoginResponse.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                refreshToken\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/types/LoginResponse.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/types/LoginResponse.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\nimport { User } from '@src/users';\n\n@ObjectType()\nexport class LoginResponse {\n  @Field()\n  refreshToken: string;\n\n  @Field(() => User)\n  user: Partial;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Message.html":{"url":"classes/Message.html","title":"class - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                _id\n                            \n                            \n                                conversation\n                            \n                            \n                                createdAt\n                            \n                            \n                                files\n                            \n                            \n                                message\n                            \n                            \n                                sender\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/messages.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        conversation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/messages.schema.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/messages.schema.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FileInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/messages.schema.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/messages.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sender\n                        \n                    \n                \n            \n                \n                    \n                        Type :     S\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/messages.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/messages.schema.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType, OmitType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { DynamicProfile, Profile } from '@src/profiles';\nimport mongoose, { ObjectId } from 'mongoose';\n\nexport type MessageDocument = Message & mongoose.Document;\n\n@ObjectType()\nexport class FileInfo {\n  @Field(() => String)\n  url: string;\n\n  @Field(() => String)\n  type: string;\n}\n\n@Schema({\n  timestamps: {\n    createdAt: 'createdAt',\n    updatedAt: false,\n  },\n})\n@ObjectType()\nexport class Message {\n  @Field(() => ID, { nullable: true })\n  _id?: ObjectId;\n\n  @Field(() => Profile, { nullable: false })\n  @Prop({ type: String, required: true })\n  sender: S;\n\n  @Field(() => ID, { nullable: false })\n  @Prop({ type: String, required: true })\n  conversation: string;\n\n  @Field(() => String, { nullable: true })\n  @Prop({ type: String, required: false })\n  message: string;\n\n  @Field(() => [FileInfo], { nullable: true })\n  @Prop({ required: false })\n  files: FileInfo[];\n\n  @Field(() => String, { nullable: false })\n  @Prop({ type: String, required: true })\n  type: string;\n\n  @Field(() => String)\n  createdAt: string;\n}\n\n@ObjectType()\nexport class MessageOmit extends OmitType(Message, ['conversation'] as const) {}\n\n@ObjectType()\nexport class MessagesConversation {\n  @Field(() => ID)\n  _id: string;\n\n  @Field(() => [MessageOmit])\n  messages: Omit;\n}\n\nexport const MessageSchema = SchemaFactory.createForClass(Message);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessageOmit.html":{"url":"classes/MessageOmit.html","title":"class - MessageOmit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessageOmit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.schema.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType, OmitType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { DynamicProfile, Profile } from '@src/profiles';\nimport mongoose, { ObjectId } from 'mongoose';\n\nexport type MessageDocument = Message & mongoose.Document;\n\n@ObjectType()\nexport class FileInfo {\n  @Field(() => String)\n  url: string;\n\n  @Field(() => String)\n  type: string;\n}\n\n@Schema({\n  timestamps: {\n    createdAt: 'createdAt',\n    updatedAt: false,\n  },\n})\n@ObjectType()\nexport class Message {\n  @Field(() => ID, { nullable: true })\n  _id?: ObjectId;\n\n  @Field(() => Profile, { nullable: false })\n  @Prop({ type: String, required: true })\n  sender: S;\n\n  @Field(() => ID, { nullable: false })\n  @Prop({ type: String, required: true })\n  conversation: string;\n\n  @Field(() => String, { nullable: true })\n  @Prop({ type: String, required: false })\n  message: string;\n\n  @Field(() => [FileInfo], { nullable: true })\n  @Prop({ required: false })\n  files: FileInfo[];\n\n  @Field(() => String, { nullable: false })\n  @Prop({ type: String, required: true })\n  type: string;\n\n  @Field(() => String)\n  createdAt: string;\n}\n\n@ObjectType()\nexport class MessageOmit extends OmitType(Message, ['conversation'] as const) {}\n\n@ObjectType()\nexport class MessagesConversation {\n  @Field(() => ID)\n  _id: string;\n\n  @Field(() => [MessageOmit])\n  messages: Omit;\n}\n\nexport const MessageSchema = SchemaFactory.createForClass(Message);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessagesConversation.html":{"url":"classes/MessagesConversation.html","title":"class - MessagesConversation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessagesConversation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                messages\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/messages.schema.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Omit\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/messages.schema.ts:61\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType, OmitType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { DynamicProfile, Profile } from '@src/profiles';\nimport mongoose, { ObjectId } from 'mongoose';\n\nexport type MessageDocument = Message & mongoose.Document;\n\n@ObjectType()\nexport class FileInfo {\n  @Field(() => String)\n  url: string;\n\n  @Field(() => String)\n  type: string;\n}\n\n@Schema({\n  timestamps: {\n    createdAt: 'createdAt',\n    updatedAt: false,\n  },\n})\n@ObjectType()\nexport class Message {\n  @Field(() => ID, { nullable: true })\n  _id?: ObjectId;\n\n  @Field(() => Profile, { nullable: false })\n  @Prop({ type: String, required: true })\n  sender: S;\n\n  @Field(() => ID, { nullable: false })\n  @Prop({ type: String, required: true })\n  conversation: string;\n\n  @Field(() => String, { nullable: true })\n  @Prop({ type: String, required: false })\n  message: string;\n\n  @Field(() => [FileInfo], { nullable: true })\n  @Prop({ required: false })\n  files: FileInfo[];\n\n  @Field(() => String, { nullable: false })\n  @Prop({ type: String, required: true })\n  type: string;\n\n  @Field(() => String)\n  createdAt: string;\n}\n\n@ObjectType()\nexport class MessageOmit extends OmitType(Message, ['conversation'] as const) {}\n\n@ObjectType()\nexport class MessagesConversation {\n  @Field(() => ID)\n  _id: string;\n\n  @Field(() => [MessageOmit])\n  messages: Omit;\n}\n\nexport const MessageSchema = SchemaFactory.createForClass(Message);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesGateway.html":{"url":"injectables/MessagesGateway.html","title":"injectable - MessagesGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.gateway.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleAcceptCall\n                            \n                            \n                                    Async\n                                handleRejectCall\n                            \n                            \n                                    Async\n                                handleSelfReject\n                            \n                            \n                                    Async\n                                handleSendFiles\n                            \n                            \n                                    Async\n                                handleSendMessage\n                            \n                            \n                                    Async\n                                handleStartCall\n                            \n                            \n                                    Async\n                                handleStopCall\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache, conversationsService: ConversationsService)\n                    \n                \n                        \n                            \n                                Defined in src/messages/messages.gateway.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        conversationsService\n                                                  \n                                                        \n                                                                        ConversationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleAcceptCall\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleAcceptCall(payload, client)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('messages.ACCEPT_CALL')\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.gateway.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleRejectCall\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRejectCall(payload, client)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('messages.REJECT_CALL')\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.gateway.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleSelfReject\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleSelfReject(payload, client)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('messages.SELF_REJECT')\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.gateway.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleSendFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleSendFiles(payload: any, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('messages.SEND_FILES')\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.gateway.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleSendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleSendMessage(payload: any, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('messages.SEND')\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.gateway.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleStartCall\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleStartCall(payload, client)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('messages.CALL')\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.gateway.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleStopCall\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleStopCall(payload, client)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('messages.STOP_CALL')\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.gateway.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/messages.gateway.ts:22\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { CACHE_MANAGER, Inject, Injectable } from '@nestjs/common';\nimport {\n  ConnectedSocket,\n  MessageBody,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { ConversationsService } from '@src/conversations';\nimport { Profile } from '@src/profiles';\nimport { Cache } from 'cache-manager';\nimport { isEmpty } from 'lodash';\nimport { Server, Socket } from 'socket.io';\n\n@WebSocketGateway(3005, { cors: true, maxHttpBufferSize: 1e8 })\n@Injectable()\nexport class MessagesGateway {\n  constructor(\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n    private readonly conversationsService: ConversationsService,\n  ) {}\n  @WebSocketServer() server: Server;\n\n  @SubscribeMessage('messages.SEND')\n  async handleSendMessage(\n    @MessageBody() payload: any,\n    @ConnectedSocket() client: Socket,\n  ): Promise {\n    const { sender, conversation, message } = payload;\n    if (!conversation.members) return;\n\n    const { members } = conversation;\n\n    const listSocketId = [];\n    for (const member of members) {\n      const temp = (await this.cacheManager.get(member.id)) || [];\n      listSocketId.push(...temp);\n    }\n\n    let senderSocketIds = await this.cacheManager.get(sender.id);\n\n    senderSocketIds = senderSocketIds.filter((socketId) => socketId !== client.id);\n\n    listSocketId.push(...senderSocketIds);\n    if (sender && !isEmpty(listSocketId)) {\n      client.to(listSocketId).emit('publish/messages.SEND', payload);\n    }\n  }\n  @SubscribeMessage('messages.SEND_FILES')\n  async handleSendFiles(\n    @MessageBody() payload: any,\n    @ConnectedSocket() client: Socket,\n  ): Promise {\n    \n    const validExtFilePattern =\n      /^(((image)\\/(png|jpg|jpeg|webp))|((text)\\/(plain))|((application)\\/(pdf)))$/g;\n\n    const { sender, conversation, message } = payload;\n    if (!conversation.members) return;\n\n    const { members } = conversation;\n\n    const listSocketId = [];\n    for (const member of members) {\n      const temp = (await this.cacheManager.get(member.id)) || [];\n      listSocketId.push(...temp);\n    }\n\n    let senderSocketIds = await this.cacheManager.get(sender.id);\n\n    senderSocketIds = senderSocketIds.filter((socketId) => socketId !== client.id);\n    listSocketId.push(...senderSocketIds);\n    if (sender && !isEmpty(listSocketId)) {\n      const files = payload.files.map((info) => {\n        const type: string = info.type;\n        if (!isEmpty(type.match(validExtFilePattern))) {\n          const buffer = Buffer.from(info.file, 'base64');\n\n          const base64 = buffer.toString('base64');\n          return {\n            file: info.file,\n            type: info.type,\n          };\n        }\n      });\n\n      // \n      const newPayload = {\n        ...payload,\n        files: [...files],\n      };\n\n      client.to(listSocketId).emit('publish/messages.SEND_FILES', newPayload);\n    }\n  }\n  @SubscribeMessage('messages.CALL')\n  async handleStartCall(@MessageBody() payload, @ConnectedSocket() client) {\n    const { caller, conversation, signalData } = payload;\n    const result = await this.conversationsService.getFriendInConversation(conversation, caller.id);\n    if (result) {\n      const members = result.members as Profile[];\n      const listSocketId = [];\n\n      // for (const member of members) {\n      const temp = (await this.cacheManager.get(members[0].id)) || [];\n      listSocketId.push(...temp);\n      // }\n      if (!isEmpty(listSocketId)) {\n        // client.emit('call.success', 'success');\n        client.to(listSocketId).emit('messages.INCOMING_CALL', {\n          caller,\n          conversation,\n          signalData,\n        });\n      } else {\n        // const socketCaller = await this.cacheManager.get(caller.id);\n\n        client.emit('messages.USER_OFFLINE', 'USER_OFFLINE');\n      }\n    }\n  }\n\n  @SubscribeMessage('messages.ACCEPT_CALL')\n  async handleAcceptCall(@MessageBody() payload, @ConnectedSocket() client) {\n    const { caller, receiver, signalData } = payload;\n\n    const listSocketId = (await this.cacheManager.get(caller.id)) || [];\n\n    client.to(listSocketId).emit('receiver.ACCEPT_CALL', {\n      caller,\n      receiver,\n      signalData,\n    });\n  }\n\n  @SubscribeMessage('messages.REJECT_CALL')\n  async handleRejectCall(@MessageBody() payload, @ConnectedSocket() client) {\n    const { caller, receiver } = payload;\n\n    const listSocketId = (await this.cacheManager.get(caller.id)) || [];\n\n    client.to(listSocketId).emit('receiver.REJECT_CALL', {\n      caller,\n      receiver,\n    });\n  }\n\n  @SubscribeMessage('messages.SELF_REJECT')\n  async handleSelfReject(@MessageBody() payload, @ConnectedSocket() client) {\n    const { caller, conversation } = payload;\n    const result = await this.conversationsService.getFriendInConversation(conversation, caller.id);\n    const members = result.members as Profile[];\n    const listSocketId = [];\n\n    for (const member of members) {\n      const temp = (await this.cacheManager.get(member.id)) || [];\n      listSocketId.push(...temp);\n    }\n    client.to(listSocketId).emit('messages.SELF_REJECT', {\n      caller,\n      conversation,\n    });\n  }\n\n  @SubscribeMessage('messages.STOP_CALL')\n  async handleStopCall(@MessageBody() payload, @ConnectedSocket() client) {\n    const { userAction, caller, receiver } = payload;\n    \n\n    \n    let listSocketId = [];\n\n    if (userAction.id === receiver.id) {\n      listSocketId = await this.cacheManager.get(caller.id);\n    } else {\n      listSocketId = await this.cacheManager.get(receiver.id);\n    }\n\n    client.to(listSocketId).emit('messages.STOP_CALL', {\n      caller,\n      receiver,\n      userAction,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_imports\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nS3Module\n\nS3Module\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nS3Module->MessagesModule\n\n\n\n\n\nMessagesGateway\n\nMessagesGateway\n\nMessagesModule -->\n\nMessagesGateway->MessagesModule\n\n\n\n\n\nMessagesRepository\n\nMessagesRepository\n\nMessagesModule -->\n\nMessagesRepository->MessagesModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesGateway\n                        \n                        \n                            MessagesRepository\n                        \n                        \n                            MessagesService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            S3Module\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BullModule } from '@nestjs/bull';\nimport { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConversationsModule } from '@src/conversations';\nimport { S3Module } from '@src/s3';\nimport {\n  Message,\n  MessageSchema,\n  MessagesGateway,\n  MessagesRepository,\n  MessagesResolver,\n  MessagesService,\n} from '@src/messages';\n\n@Module({\n  providers: [MessagesService, MessagesResolver, MessagesRepository, MessagesGateway],\n  imports: [\n    BullModule.registerQueue({\n      name: 'message-queue',\n    }),\n    forwardRef(() => ConversationsModule),\n    MongooseModule.forFeatureAsync([\n      {\n        name: Message.name,\n        useFactory: () => {\n          return MessageSchema;\n        },\n      },\n    ]),\n    S3Module,\n  ],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesRepository.html":{"url":"injectables/MessagesRepository.html","title":"injectable - MessagesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getMessagesByConversationId\n                            \n                            \n                                    Async\n                                sendFiles\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messageModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/messages/messages.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messageModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMessagesByConversationId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessagesByConversationId(conversationId: string, startValue: null)\n                \n            \n\n\n            \n                \n                    Defined in src/messages/messages.repository.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startValue\n                                    \n                                            null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendFiles(files: string[], senderId: string, conversationId: string, now: any)\n                \n            \n\n\n            \n                \n                    Defined in src/messages/messages.repository.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    now\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(message: string, conversationId: string, now, senderId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/messages/messages.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    now\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { MessageDocument, MessagesConversation, Message } from '@src/messages';\nimport { isEmpty } from 'lodash';\nimport { ObjectId } from 'mongodb';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class MessagesRepository {\n  /**\n   *\n   */\n  constructor(@InjectModel(Message.name) private readonly messageModel: Model) {}\n\n  async sendMessage(message: string, conversationId: string, now, senderId: string) {\n    const newMessage = new this.messageModel({\n      sender: senderId,\n      conversation: conversationId,\n      createdAt: now,\n      type: 'text',\n      message,\n    });\n    return newMessage.save();\n  }\n\n  async getMessagesByConversationId(conversationId: string, startValue = null) {\n    const result = await this.messageModel.aggregate([\n      {\n        $match: {\n          conversation: conversationId,\n          _id: { $lt: new ObjectId(startValue) },\n        },\n      },\n      {\n        $limit: 10,\n      },\n      {\n        $lookup: {\n          from: 'profiles',\n          localField: 'sender',\n          foreignField: 'id',\n          as: 'sender',\n        },\n      },\n      {\n        $unwind: {\n          path: '$sender',\n          preserveNullAndEmptyArrays: true,\n        },\n      },\n      {\n        $sort: {\n          _id: -1,\n        },\n      },\n\n      {\n        $sort: {\n          _id: 1,\n        },\n      },\n      {\n        $group: {\n          _id: '$conversation',\n          messages: {\n            $push: {\n              _id: '$_id',\n              message: '$message',\n              sender: '$sender',\n              createdAt: '$createdAt',\n              files: '$files',\n              type: '$type',\n            },\n          },\n          countMessage: {\n            $sum: 1,\n          },\n        },\n      },\n    ]);\n    if (!isEmpty(result)) return result[0];\n    return null;\n  }\n\n  async sendFiles(files: string[], senderId: string, conversationId: string, now: any) {\n    const newMessage = new this.messageModel({\n      type: 'image',\n      sender: senderId,\n      conversation: conversationId,\n      createdAt: now,\n      files,\n    });\n    return newMessage.save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessagesResolver.html":{"url":"classes/MessagesResolver.html","title":"class - MessagesResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessagesResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getMessagesByConversationId\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                            \n                                    Async\n                                sendMultipleFiles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesService: MessagesService, s3Service: S3Service)\n                    \n                \n                        \n                            \n                                Defined in src/messages/messages.resolver.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesService\n                                                  \n                                                        \n                                                                        MessagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        s3Service\n                                                  \n                                                        \n                                                                        S3Service\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMessagesByConversationId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessagesByConversationId(payload: MessageInput.PaginationMessages)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'getMessagesByConversationId', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.resolver.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            MessageInput.PaginationMessages\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(payload: MessageInput.Send, user: Current)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'sendMessage', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.resolver.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            MessageInput.Send\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMultipleFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMultipleFiles(files: Promise[], payload: MessageInput.SendFiles, user: Current)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'sendFiles', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.resolver.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                                Promise[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            MessageInput.SendFiles\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Authorization } from '@common/decorators';\nimport { AuthGuard } from '@common/guards';\nimport { UseGuards } from '@nestjs/common';\nimport { Args, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { S3Service } from '@src/s3';\nimport { Current } from '@src/users';\nimport { Message, MessageInput, MessagesConversation, MessagesService } from '@src/messages';\nimport { FileUpload, GraphQLUpload } from 'graphql-upload';\n\n@Resolver()\n@UseGuards(AuthGuard)\nexport class MessagesResolver {\n  constructor(\n    private readonly messagesService: MessagesService,\n    private readonly s3Service: S3Service,\n  ) {}\n  @Mutation(() => Message, {\n    name: 'sendMessage',\n    nullable: true,\n  })\n  async sendMessage(\n    @Args({ name: 'payload', type: () => MessageInput.Send }) payload: MessageInput.Send,\n    @Authorization()\n    user: Current,\n  ): Promise {\n    return this.messagesService.sendMessage(payload, user._id.toString());\n  }\n\n  @Query(() => MessagesConversation, {\n    name: 'getMessagesByConversationId',\n    nullable: true,\n  })\n  async getMessagesByConversationId(\n    @Args({ name: 'payload', type: () => MessageInput.PaginationMessages })\n    payload: MessageInput.PaginationMessages,\n  ) {\n    return this.messagesService.getMessagesByConversationId(\n      payload.conversationId,\n      payload.startValue,\n    );\n  }\n\n  @Mutation(() => Message, {\n    name: 'sendFiles',\n    nullable: true,\n  })\n  async sendMultipleFiles(\n    @Args({ name: 'files', type: () => [GraphQLUpload] }) files: Promise[],\n    @Args({ name: 'payload', type: () => MessageInput.SendFiles }) payload: MessageInput.SendFiles,\n    @Authorization()\n    user: Current,\n  ) {\n    const resultFiles = await Promise.all(files);\n    const aPromises = [];\n    for (const file of resultFiles) {\n      aPromises.push(this.s3Service.uploadMultipleImage(file));\n    }\n    return this.messagesService.sendFiles(\n      await Promise.all(aPromises),\n      user._id.toString(),\n      payload.conversationId,\n      payload.now,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getMessagesByConversationId\n                            \n                            \n                                    Async\n                                sendFiles\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesRepository: MessagesRepository)\n                    \n                \n                        \n                            \n                                Defined in src/messages/messages.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesRepository\n                                                  \n                                                        \n                                                                        MessagesRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMessagesByConversationId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessagesByConversationId(conversationId: string, startValue: string)\n                \n            \n\n\n            \n                \n                    Defined in src/messages/messages.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    startValue\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendFiles(files: string[], senderId: string, conversationId: string, now: any)\n                \n            \n\n\n            \n                \n                    Defined in src/messages/messages.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    now\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(payload: MessageInput.Send, senderId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/messages/messages.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            MessageInput.Send\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { MessagesRepository, MessageInput } from '@src/messages';\n\n@Injectable()\nexport class MessagesService {\n  constructor(private readonly messagesRepository: MessagesRepository) {}\n\n  async sendMessage(payload: MessageInput.Send, senderId: string) {\n    return this.messagesRepository.sendMessage(\n      payload.message,\n      payload.conversationId,\n      payload.now,\n      senderId,\n    );\n  }\n\n  async getMessagesByConversationId(conversationId: string, startValue: string) {\n    return this.messagesRepository.getMessagesByConversationId(conversationId, startValue);\n  }\n\n  async sendFiles(files: string[], senderId: string, conversationId: string, now: any) {\n    return this.messagesRepository.sendFiles(files, senderId, conversationId, now);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MongoExceptionFilter.html":{"url":"classes/MongoExceptionFilter.html","title":"class - MongoExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MongoExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/mongo.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch()\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/mongo.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Catch, ExceptionFilter } from '@nestjs/common';\nimport { MongoError, MongoServerError } from 'mongodb';\n\n@Catch(MongoError, MongoServerError)\nexport class MongoExceptionFilter implements ExceptionFilter {\n  catch() {\n    return new Error('Kec');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MongooseExceptionFilter.html":{"url":"classes/MongooseExceptionFilter.html","title":"class - MongooseExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MongooseExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/mongoose.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/mongoose.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Catch, ConflictException, ExceptionFilter } from '@nestjs/common';\n\nimport { startCase } from 'lodash';\n@Catch()\nexport class MongooseExceptionFilter implements ExceptionFilter {\n  catch(exception: any) {\n    switch (exception.code) {\n      case 11000:\n        const key = startCase(Object.keys(exception.keyValue)[0]);\n        return new ConflictException(`${key} already exist`);\n      default:\n        return new ConflictException(exception?.response?.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationsGateway.html":{"url":"injectables/NotificationsGateway.html","title":"injectable - NotificationsGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationsGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notifications.gateway.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleSendNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/notifications/notifications.gateway.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleSendNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleSendNotification(payload: any, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('subscribe/notifications.SEND_NOTIFICATION')\n                \n            \n\n            \n                \n                    Defined in src/notifications/notifications.gateway.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notifications/notifications.gateway.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { CACHE_MANAGER, Inject, Injectable } from '@nestjs/common';\nimport {\n    ConnectedSocket,\n    MessageBody,\n    SubscribeMessage,\n    WebSocketGateway,\n    WebSocketServer,\n} from '@nestjs/websockets';\n\nimport { Cache } from 'cache-manager';\nimport { Server, Socket } from 'socket.io';\n\n@WebSocketGateway(3005, { cors: true })\n@Injectable()\nexport class NotificationsGateway {\n  constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}\n  @WebSocketServer() server: Server;\n\n  @SubscribeMessage('subscribe/notifications.SEND_NOTIFICATION')\n  async handleSendNotification(\n    @MessageBody() payload: any,\n    @ConnectedSocket() client: Socket,\n  ): Promise {\n    const request = payload.request;\n    const userRequest = request.userRequest;\n    const userReceive = request.userReceive;\n    const listSocketId = await this.cacheManager.get>(userRequest.id);\n\n    if (userRequest && userReceive) {\n      if (listSocketId) {\n        client.to(listSocketId).emit('publish/notifications.SEND_NOTIFICATION', {\n          userRequest,\n          userReceive,\n          message: `${userRequest.name} has already ${request.type} request add friend`,\n          type: `${request.type === 'accepted' ? 'success' : 'error'}`,\n        });\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationsModule.html":{"url":"modules/NotificationsModule.html","title":"module - NotificationsModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_providers\n\n\n\n\nNotificationsGateway\n\nNotificationsGateway\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nNotificationsModule -->\n\nNotificationsGateway->NotificationsModule\n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/notifications/notifications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationsGateway\n                        \n                        \n                            NotificationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport {\n  NotificationsGateway,\n  NotificationsResolver,\n  NotificationsService,\n} from '@src/notifications';\n\n@Module({\n  providers: [NotificationsService, NotificationsResolver, NotificationsGateway],\n})\nexport class NotificationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationsResolver.html":{"url":"classes/NotificationsResolver.html","title":"class - NotificationsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notifications.resolver.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Resolver } from '@nestjs/graphql';\n\n@Resolver()\nexport class NotificationsResolver {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationsService.html":{"url":"injectables/NotificationsService.html","title":"injectable - NotificationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notifications.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class NotificationsService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OAuthInfo.html":{"url":"classes/OAuthInfo.html","title":"class - OAuthInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OAuthInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/types/UserOAuth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                picture\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/types/UserOAuth.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/types/UserOAuth.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({name: 'id', description: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/types/UserOAuth.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, IntersectionType, ObjectType } from '@nestjs/graphql';\nimport { User } from '../users.schema';\n\nexport type UserOAuth = User & { provider: string; id: string };\n\n@ObjectType()\nclass OAuthInfo {\n  @Field()\n  name: string;\n\n  @Field()\n  picture: string;\n\n  @Field({\n    name: 'id',\n    description: 'id',\n  })\n  sub: string;\n}\n\n@ObjectType()\nexport class Current extends IntersectionType(User, OAuthInfo) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OAuthInput.html":{"url":"classes/OAuthInput.html","title":"class - OAuthInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OAuthInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/oauth.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                nonce\n                            \n                            \n                                provider\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/oauth.input.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/oauth.input.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/oauth.input.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/oauth.input.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/oauth.input.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, InputType } from '@nestjs/graphql';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\n@ArgsType()\n@InputType()\nexport class OAuthInput {\n  @IsString()\n  @IsNotEmpty()\n  @Field(() => String, { nullable: true })\n  id: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Field(() => String, { nullable: true })\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  @Field(() => String, { nullable: true })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Field(() => String, { nullable: true })\n  provider: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @Field(() => String, { nullable: true })\n  nonce: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ObjectIdPipe.html":{"url":"injectables/ObjectIdPipe.html","title":"injectable - ObjectIdPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ObjectIdPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/ObjectId.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/ObjectId.pipe.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ObjectId\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, PipeTransform } from '@nestjs/common';\nimport { ObjectId } from 'mongodb';\n\n@Injectable()\nexport class ObjectIdPipe implements PipeTransform {\n  transform(value: string): ObjectId {\n    const validObjectId = ObjectId.isValid(value);\n    if (!validObjectId) throw new BadRequestException('Invalid ObjectId');\n    return new ObjectId(value);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Obtain.html":{"url":"classes/Obtain.html","title":"class - Obtain","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Obtain\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profiles/dto/profile.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/dto/profile.input.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, InputType } from '@nestjs/graphql';\nimport { FileUpload, GraphQLUpload } from 'graphql-upload';\n\nexport namespace ProfileInput {\n  @ArgsType()\n  @InputType()\n  export class Create {\n    @Field()\n    id: string;\n\n    @Field()\n    email: string;\n\n    @Field()\n    provider: string;\n\n    @Field()\n    name: string;\n  }\n  @ArgsType()\n  @InputType()\n  export class Search {\n    @Field()\n    keyword: string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class Obtain {\n    @Field()\n    id: string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class _Upload_ {\n    @Field(() => GraphQLUpload)\n    file: FileUpload;\n\n    @Field(() => String)\n    id: string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class Friend {\n    @Field()\n    userId: string;\n    @Field()\n    friendId: string;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationMessages.html":{"url":"classes/PaginationMessages.html","title":"class - PaginationMessages","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationMessages\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/dto/messages.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversationId\n                            \n                            \n                                startValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsString()@IsObjectId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dto/messages.input.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dto/messages.input.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObjectId } from '@decorators/IsObjectId.decorator';\nimport { ArgsType, Field, ID, InputType } from '@nestjs/graphql';\nimport { IsString } from 'class-validator';\n\nexport namespace MessageInput {\n  @ArgsType()\n  @InputType()\n  export class Send {\n    @Field()\n    @IsString()\n    message: string;\n\n    @Field(() => ID)\n    @IsObjectId()\n    conversationId: string;\n\n    @Field(() => Number)\n    now: number | string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class SendFiles {\n    @Field(() => ID)\n    @IsObjectId()\n    conversationId: string;\n\n    @Field(() => Number)\n    now: number | string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class PaginationMessages {\n    @Field()\n    @IsString()\n    @IsObjectId()\n    conversationId: string;\n\n    @Field(() => ID, { nullable: true })\n    startValue: any;\n  }\n}\n\nexport default MessageInput;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                _id\n                            \n                            \n                                content\n                            \n                            \n                                countComment\n                            \n                            \n                                countLike\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                isLiked\n                            \n                            \n                                likes\n                            \n                            \n                                profile\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countComment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.schema.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countLike\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.schema.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@Prop({type: Date, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.schema.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLiked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.schema.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Profile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.schema.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profile\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PF\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.schema.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { DynamicProfile, Profile } from '@src/profiles';\nimport mongoose, { ObjectId } from 'mongoose';\n\nexport type PostDocument = Post & mongoose.Document;\n\n@ObjectType()\n@Schema({\n  timestamps: {\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt',\n  },\n})\nexport class Post {\n  @Field(() => ID, { nullable: true })\n  _id?: ObjectId | string;\n\n  @Field(() => String, { nullable: true })\n  @Prop({ type: String, required: true })\n  content: string;\n\n  @Field(() => Profile, {\n    nullable: false,\n  })\n  @Prop({ type: String, required: true })\n  profile: PF;\n\n  @Field(() => Number)\n  countLike: number;\n\n  @Field(() => Number)\n  countComment: number;\n\n  @Field(() => String)\n  createdAt: string;\n\n  @Field(() => String)\n  updatedAt: string;\n\n  @Field(() => String)\n  @Prop({ type: Date, default: null })\n  deletedAt: string;\n\n  @Field(() => Boolean)\n  isLiked: boolean;\n\n  @Field(() => [Profile])\n  likes: Profile[];\n}\n\nexport type DynamicPost = Post | Post | string;\n\nexport const PostSchema = SchemaFactory.createForClass(Post);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDto.html":{"url":"classes/PostDto.html","title":"class - PostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/posts.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                    Optional\n                                countLike\n                            \n                            \n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {description: 'content of post', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/posts.input.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        countLike\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {description: 'count like of post', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/posts.input.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {description: 'profile of post', nullable: false})@IsObjectId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/posts.input.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObjectId } from '@decorators/IsObjectId.decorator';\nimport {\n  ArgsType,\n  Field,\n  InputType,\n  ObjectType,\n  OmitType,\n  PartialType,\n  PickType,\n} from '@nestjs/graphql';\n// import { Post } from '@src/posts';\nimport { IsOptional } from 'class-validator';\nimport { Post } from '@src/posts';\n\nexport namespace PostInput {\n  @ObjectType()\n  export class PostDto {\n    @Field(() => String, {\n      description: 'content of post',\n      nullable: false,\n    })\n    content: string;\n\n    @Field(() => Number, {\n      description: 'count like of post',\n      nullable: true,\n    })\n    countLike?: number;\n\n    @Field(() => String, {\n      description: 'profile of post',\n      nullable: false,\n    })\n    @IsObjectId()\n    profile: string;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class CreatePost extends OmitType(PartialType(PostDto, InputType), ['profile'] as const) {}\n\n  @InputType()\n  @ArgsType()\n  export class UpdatePost extends PartialType(PostDto, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class DeletePost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class GetPost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class InteractPost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class GetPosts {\n    @IsOptional()\n    @Field(() => String, {\n      nullable: true,\n      defaultValue: null,\n    })\n    _id: string;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsGateway.html":{"url":"injectables/PostsGateway.html","title":"injectable - PostsGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.gateway.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleSendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache, postsService: PostsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.gateway.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleSendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleSendMessage(payload: literal type, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('post.ADD')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.gateway.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.gateway.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { CACHE_MANAGER, Inject, Injectable } from '@nestjs/common';\nimport {\n  ConnectedSocket,\n  MessageBody,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { Cache } from 'cache-manager';\nimport { without } from 'lodash';\nimport { Server, Socket } from 'socket.io';\nimport { PostsService } from '@src/posts';\n\n@WebSocketGateway(3005, { cors: true, maxHttpBufferSize: 1e8 })\n@Injectable()\nexport class PostsGateway {\n  constructor(\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n    private readonly postsService: PostsService,\n  ) {}\n  @WebSocketServer() server: Server;\n\n  @SubscribeMessage('post.ADD')\n  async handleSendMessage(\n    @MessageBody() payload: { postAdded },\n    @ConnectedSocket() client: Socket,\n  ): Promise {\n    const post = payload.postAdded;\n\n    if (post?.profile) {\n      const profile = post.profile;\n      const friends = profile.friends;\n\n      const receiverPacket = [];\n      receiverPacket.push(...((await this.cacheManager.get(profile.id)) || []));\n\n      for (const p of friends) {\n        receiverPacket.push(...((await this.cacheManager.get(p.id)) || []));\n      }\n      without(receiverPacket, null);\n\n      client.to(receiverPacket).emit('post.ADD', post);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nProfilesModule\n\nProfilesModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nProfilesModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsGateway\n\nPostsGateway\n\nPostsModule -->\n\nPostsGateway->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsGateway\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ProfilesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { ProfilesModule } from '@profiles/profiles.module';\nimport {\n  Post,\n  PostSchema,\n  PostsGateway,\n  PostsRepository,\n  PostsResolver,\n  PostsService,\n} from '@src/posts';\n\n@Module({\n  imports: [\n    ProfilesModule,\n    MongooseModule.forFeatureAsync([\n      {\n        name: Post.name,\n        useFactory: () => {\n          return PostSchema;\n        },\n      },\n    ]),\n  ],\n  providers: [PostsResolver, PostsService, PostsRepository, PostsGateway],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostsRepository.html":{"url":"classes/PostsRepository.html","title":"class - PostsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getPost\n                            \n                            \n                                    Async\n                                getPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: PostInput.CreatePost)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                            PostInput.CreatePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(post: PostInput.DeletePost)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.repository.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                            PostInput.DeletePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPost(post: PostInput.GetPost)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.repository.ts:237\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                            PostInput.GetPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPosts(userId: string, payload: PostInput.GetPosts)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.repository.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            PostInput.GetPosts\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectModel } from '@nestjs/mongoose';\nimport { PostDocument, PostInput, Post } from '@src/posts';\nimport { Profile } from '@src/profiles';\nimport { isEmpty } from 'lodash';\nimport { ObjectId, UpdateResult } from 'mongodb';\nimport { Model, PipelineStage } from 'mongoose';\n\nexport class PostsRepository {\n  constructor(@InjectModel(Post.name) private readonly postModel: Model) {}\n\n  async createPost(post: PostInput.CreatePost): Promise> {\n    const result = new this.postModel(post);\n    const _post = await result.save();\n    return _post.toObject({ getters: true });\n  }\n\n  async deletePost(post: PostInput.DeletePost): Promise {\n    return this.postModel.findOneAndUpdate({ _id: post._id }, { deletedAt: Date.now().toString() });\n  }\n\n  async getPosts(userId: string, payload: PostInput.GetPosts): Promise[]> {\n    let $match = null;\n    let pipelineStage: PipelineStage[] = [\n      {\n        $limit: 10,\n      },\n      {\n        $lookup: {\n          from: 'profiles',\n          localField: 'profile',\n          foreignField: 'id',\n          as: 'profile',\n        },\n      },\n      {\n        $unwind: {\n          path: '$profile',\n          preserveNullAndEmptyArrays: true,\n        },\n      },\n      {\n        $lookup: {\n          from: 'likes',\n          let: {\n            id: '$_id',\n          },\n          pipeline: [\n            {\n              $addFields: {\n                _post: {\n                  $toObjectId: '$post',\n                },\n              },\n            },\n            {\n              $addFields: {\n                _deletedAt: {\n                  $toString: '$deletedAt',\n                },\n              },\n            },\n            {\n              $match: {\n                $expr: {\n                  $and: [\n                    {\n                      $eq: ['$_post', '$$id'],\n                    },\n                    {\n                      $eq: ['$_deletedAt', null],\n                    },\n                  ],\n                },\n              },\n            },\n          ],\n          as: 'likes',\n        },\n      },\n      {\n        $unset: ['likes._post', 'likes._deletedAt'],\n      },\n      {\n        $lookup: {\n          from: 'comments',\n          let: {\n            id: '$_id',\n          },\n          pipeline: [\n            {\n              $addFields: {\n                _post: {\n                  $toObjectId: '$post',\n                },\n              },\n            },\n            {\n              $addFields: {\n                _deletedAt: {\n                  $toString: '$deletedAt',\n                },\n              },\n            },\n            {\n              $match: {\n                $expr: {\n                  $and: [\n                    {\n                      $eq: ['$_post', '$$id'],\n                    },\n                    {\n                      $eq: ['$_deletedAt', null],\n                    },\n                  ],\n                },\n              },\n            },\n          ],\n          as: 'comments',\n        },\n      },\n      {\n        $unset: ['comments._post', 'comments._deletedAt'],\n      },\n      {\n        $addFields: {\n          countLike: {\n            $size: '$likes',\n          },\n          countComment: {\n            $size: '$comments',\n          },\n          isLiked: {\n            $cond: {\n              if: {\n                $eq: [\n                  {\n                    $size: {\n                      $filter: {\n                        input: '$likes',\n                        as: 'like',\n                        cond: {\n                          $eq: ['$$like.profile', userId],\n                        },\n                      },\n                    },\n                  },\n                  1,\n                ],\n              },\n              then: true,\n              else: false,\n            },\n          },\n        },\n      },\n      {\n        $unwind: {\n          path: '$likes',\n          preserveNullAndEmptyArrays: true,\n        },\n      },\n      {\n        $lookup: {\n          from: 'profiles',\n          localField: 'likes.profile',\n          foreignField: 'id',\n          as: 'likes.profile',\n        },\n      },\n      {\n        $unwind: {\n          path: '$likes.profile',\n          preserveNullAndEmptyArrays: true,\n        },\n      },\n      {\n        $group: {\n          _id: '$_id',\n          profile: {\n            $first: '$profile',\n          },\n          likes: {\n            $push: '$likes',\n          },\n          content: {\n            $first: '$content',\n          },\n          deletedAt: {\n            $first: '$deletedAt',\n          },\n          createdAt: {\n            $first: '$createdAt',\n          },\n          updatedAt: {\n            $first: '$updatedAt',\n          },\n          countLike: {\n            $first: '$countLike',\n          },\n          countComment: {\n            $first: '$countComment',\n          },\n          isLiked: {\n            $first: '$isLiked',\n          },\n        },\n      },\n      {\n        $sort: {\n          _id: -1,\n        },\n      },\n    ];\n    $match = payload?._id\n      ? {\n          _id: { $lt: new ObjectId(payload._id) },\n        }\n      : {};\n    pipelineStage = [\n      {\n        $sort: {\n          _id: -1,\n        },\n      },\n      {\n        $match: {\n          ...$match,\n        },\n      },\n      ...pipelineStage,\n    ];\n\n    return this.postModel.aggregate>(pipelineStage);\n  }\n\n  async getPost(post: PostInput.GetPost): Promise> {\n    const pipelineStage: PipelineStage[] = [\n      {\n        $match: {\n          _id: new ObjectId(post._id as string),\n        },\n      },\n      {\n        $lookup: {\n          from: 'profiles',\n          foreignField: 'id',\n          localField: 'profile',\n          as: 'profile',\n        },\n      },\n      {\n        $unwind: {\n          path: '$profile',\n          preserveNullAndEmptyArrays: false,\n        },\n      },\n      {\n        $lookup: {\n          from: 'likes',\n          let: {\n            id: '$_id',\n          },\n          pipeline: [\n            {\n              $addFields: {\n                _post: {\n                  $toObjectId: '$post',\n                },\n              },\n            },\n            {\n              $addFields: {\n                _deletedAt: {\n                  $toString: '$deletedAt',\n                },\n              },\n            },\n            {\n              $match: {\n                $expr: {\n                  $and: [\n                    {\n                      $eq: ['$_post', '$$id'],\n                    },\n                    {\n                      $eq: ['$_deletedAt', null],\n                    },\n                  ],\n                },\n              },\n            },\n          ],\n          as: 'likes',\n        },\n      },\n      {\n        $unset: ['likes._post', 'likes._deletedAt'],\n      },\n\n      {\n        $addFields: {\n          countLike: { $size: '$likes' },\n        },\n      },\n    ];\n\n    const result = await this.postModel.aggregate>(pipelineStage);\n\n    if (!isEmpty(result)) return result[0];\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostsResolver.html":{"url":"classes/PostsResolver.html","title":"class - PostsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getPosts\n                            \n                            \n                                    Async\n                                postAdded\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsService: PostsService, profilesService: ProfilesService, pubSub: RedisPubSub)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.resolver.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profilesService\n                                                  \n                                                        \n                                                                        ProfilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pubSub\n                                                  \n                                                        \n                                                                    RedisPubSub\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(user: Current, post: PostInput.CreatePost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'createPost', nullable: false})\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.resolver.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                            PostInput.CreatePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(post: PostInput.DeletePost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'deletePost', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.resolver.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                            PostInput.DeletePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPosts(payload: PostInput.GetPosts, user: Current)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'getPosts', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.resolver.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            PostInput.GetPosts\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postAdded\n                        \n                    \n                \n            \n            \n                \n                    \n                    postAdded(user: Current, publisher: PublisherSubscriptions)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Subscription(undefined, {name: 'postAdded'})\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.resolver.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    publisher\n                                    \n                                                PublisherSubscriptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Authorization } from '@common/decorators';\nimport { AuthGuard } from '@common/guards';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { Args, Mutation, Query, Resolver, Subscription } from '@nestjs/graphql';\nimport { Profile, ProfilesService } from '@src/profiles';\nimport { PublisherSubscriptions } from '@src/pubsub.input';\nimport { Post, PostInput, PostsService } from '@src/posts';\nimport { PUB_SUB } from '@src/pubsub.module';\nimport { Current } from '@src/users';\nimport { RedisPubSub } from 'graphql-redis-subscriptions';\n\n@Resolver(() => Post)\n@UseGuards(AuthGuard)\nexport class PostsResolver {\n  constructor(\n    private readonly postsService: PostsService,\n    private readonly profilesService: ProfilesService,\n    @Inject(PUB_SUB) private readonly pubSub: RedisPubSub,\n  ) {}\n\n  @Mutation(() => Post, {\n    name: 'createPost',\n    nullable: false,\n  })\n  async createPost(\n    @Authorization()\n    user: Current,\n    @Args({ name: 'post', type: () => PostInput.CreatePost }) post: PostInput.CreatePost,\n  ) {\n    const _post = {\n      ...post,\n      profile: user._id.toString(),\n    };\n\n    const resultPost = this.postsService.createPost(_post);\n    const profile = this.profilesService.getProfile({\n      id: user._id.toString(),\n    });\n\n    const resultPromise = await Promise.all([resultPost, profile]);\n\n    const [resultPromisePost, resultPromiseProfile] = resultPromise;\n    if (resultPromisePost && resultPromiseProfile) {\n      const { _id, content, createdAt, deletedAt, updatedAt } = resultPromisePost;\n      const result = {\n        _id,\n        content,\n        deletedAt,\n        createdAt,\n        updatedAt,\n        profile: resultPromiseProfile,\n      };\n\n      await this.pubSub.publish(`postAdded.${resultPromiseProfile.id}`, {\n        [`postAdded`]: result,\n      });\n\n      return result;\n    }\n  }\n\n  @Mutation(() => Post, {\n    name: 'deletePost',\n    nullable: true,\n  })\n  async deletePost(\n    @Args({ name: 'post', type: () => PostInput.DeletePost })\n    post: PostInput.DeletePost,\n  ) {\n    void this.postsService.deletePost(post);\n  }\n\n  @Query(() => [Post], {\n    name: 'getPosts',\n    nullable: true,\n  })\n  async getPosts(\n    @Args({ name: 'payload', nullable: true, defaultValue: null, type: () => PostInput.GetPosts })\n    payload: PostInput.GetPosts,\n    @Authorization()\n    user: Current,\n  ) {\n    return this.postsService.getPosts(user._id.toString(), payload);\n  }\n\n  @Subscription(() => Post, {\n    name: 'postAdded',\n  })\n  async postAdded(\n    @Authorization()\n    user: Current,\n    @Args({ name: 'publisher', type: () => PublisherSubscriptions, nullable: true })\n    publisher: PublisherSubscriptions,\n  ) {\n    const pub = publisher?.id || user._id;\n\n    if (pub) {\n      return this.pubSub.asyncIterator>(`postAdded.${pub}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getPost\n                            \n                            \n                                    Async\n                                getPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: PostsRepository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        PostsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: PostInput.CreatePost)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                            PostInput.CreatePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(post: PostInput.DeletePost)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                            PostInput.DeletePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPost(post: PostInput.GetPost)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                            PostInput.GetPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPosts(userId: string, payload: PostInput.GetPosts)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            PostInput.GetPosts\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Post, PostInput, PostsRepository } from '@src/posts';\nimport { Profile } from '@src/profiles';\n\n@Injectable()\nexport class PostsService {\n  /**\n   *\n   */\n  constructor(private readonly postsRepository: PostsRepository) {}\n  async createPost(post: PostInput.CreatePost) {\n    return this.postsRepository.createPost(post);\n  }\n\n  async deletePost(post: PostInput.DeletePost) {\n    return this.postsRepository.deletePost(post);\n  }\n\n  async getPosts(userId: string, payload: PostInput.GetPosts) {\n    return this.postsRepository.getPosts(userId, payload);\n  }\n\n  async getPost(post: PostInput.GetPost): Promise> {\n    return this.postsRepository.getPost(post);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profiles/profiles.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                email\n                            \n                            \n                                friends\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                provider\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/profiles.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/profiles.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        friends\n                        \n                    \n                \n            \n                \n                    \n                        Type :     F\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined, type: undefined})@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/profiles.schema.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/profiles.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/profiles.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/profiles.schema.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { createUnionType, Field, ObjectType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport { FriendProfile } from '../friends/friends.schema';\n// import { FriendProfile } from '@src/friends';\n\nexport type ProfileDocument = Profile & mongoose.Document;\n\n@Schema({\n\ttimestamps: {\n\t\tcreatedAt: 'createdAt',\n\t\tupdatedAt: 'updatedAt',\n\t}\n})\n\n@ObjectType()\nexport class Profile {\n\t@Prop()\n\t@Field(() => String)\n\tid: string;\n\t@Prop()\n\t@Field(() => String)\n\tname: string;\n\t\n\t@Prop()\n\t@Field(() => String)\n\temail: string;\n\t\n\t@Prop({default: `${process.env.DEFAULT_AVATAR}`})\n\t@Field(() => String)\n\tavatar: string;\n\t\n\t@Prop()\n\t@Field(() => String, {nullable: true})\n\tprovider: string;\n\t\n\t@Prop({default: [], type: Array})\n\t@Field(() => [UnionFriend], {nullable: true})\n\tfriends: F;\n\t\n}\n\nexport const UnionFriend = createUnionType({\n\tname: 'UnionFriend',\n\ttypes: () => [Profile, FriendProfile] as const,\n\tresolveType: (value) => {\n\t\tif (\"_id\" in value) {\n\t\t\treturn Profile\n\t\t}\n\t\tif (\"friendId\" in value) {\n\t\t\treturn FriendProfile\n\t\t}\n\t\t\n\t}\n});\n\nexport type DynamicProfile = Profile | Profile | string;\nexport const ProfileSchema= SchemaFactory.createForClass(Profile);\n\nProfileSchema.index({email: 1, provider: 1}, {unique: true});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfilesGateway.html":{"url":"injectables/ProfilesGateway.html","title":"injectable - ProfilesGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfilesGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profiles/profiles.gateway.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleAddFriend\n                            \n                            \n                                    Async\n                                handleUnfriend\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache, profilesService: ProfilesService)\n                    \n                \n                        \n                            \n                                Defined in src/profiles/profiles.gateway.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profilesService\n                                                  \n                                                        \n                                                                        ProfilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleAddFriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleAddFriend(payload: any, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('publish.addFriend')\n                \n            \n\n            \n                \n                    Defined in src/profiles/profiles.gateway.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleUnfriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleUnfriend(payload: any, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('subscribe/profiles.unfriend')\n                \n            \n\n            \n                \n                    Defined in src/profiles/profiles.gateway.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/profiles.gateway.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { CACHE_MANAGER, Inject, Injectable } from '@nestjs/common';\nimport {\n  ConnectedSocket,\n  MessageBody,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { Cache } from 'cache-manager';\nimport { Server, Socket } from 'socket.io';\nimport { ProfilesService } from '@src/profiles';\n\n@WebSocketGateway(3005, { cors: true })\n@Injectable()\nexport class ProfilesGateway {\n  constructor(\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n    private readonly profilesService: ProfilesService,\n  ) {}\n  @WebSocketServer() server: Server;\n\n  @SubscribeMessage('publish.addFriend')\n  async handleAddFriend(\n    @MessageBody() payload: any,\n    @ConnectedSocket() client: Socket,\n  ): Promise {\n    const userRequest = payload?.userId;\n    const userReceive = payload?.friendId;\n    const listSocketId = await this.cacheManager.get>(userReceive);\n\n    if (userRequest && userReceive) {\n      if (listSocketId) {\n        const profile = await this.profilesService.getProfile({\n          id: userRequest,\n        });\n\n        client.to(listSocketId).emit('subscribe.addFriend', {\n          userRequest: {\n            id: profile.id,\n            name: profile.name,\n          },\n          userReceive: payload.friendId,\n        });\n      }\n    }\n  }\n\n  @SubscribeMessage('subscribe/profiles.unfriend')\n  async handleUnfriend(\n    @MessageBody() payload: any,\n    @ConnectedSocket() client: Socket,\n  ): Promise {\n    const { userId, friendId } = payload;\n    const listSocketId = await this.cacheManager.get>(friendId);\n\n    if (userId && friendId) {\n      if (listSocketId) {\n        client.to(listSocketId).emit('publish/profiles.unfriend', {\n          userId: friendId,\n          friendId: userId,\n        });\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfilesModule.html":{"url":"modules/ProfilesModule.html","title":"module - ProfilesModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProfilesModule\n\n\n\ncluster_ProfilesModule_imports\n\n\n\ncluster_ProfilesModule_exports\n\n\n\ncluster_ProfilesModule_providers\n\n\n\n\nS3Module\n\nS3Module\n\n\n\nProfilesModule\n\nProfilesModule\n\nProfilesModule -->\n\nS3Module->ProfilesModule\n\n\n\n\n\nProfilesRepository \n\nProfilesRepository \n\nProfilesRepository  -->\n\nProfilesModule->ProfilesRepository \n\n\n\n\n\nProfilesResolver \n\nProfilesResolver \n\nProfilesResolver  -->\n\nProfilesModule->ProfilesResolver \n\n\n\n\n\nProfilesService \n\nProfilesService \n\nProfilesService  -->\n\nProfilesModule->ProfilesService \n\n\n\n\n\nProfilesGateway\n\nProfilesGateway\n\nProfilesModule -->\n\nProfilesGateway->ProfilesModule\n\n\n\n\n\nProfilesRepository\n\nProfilesRepository\n\nProfilesModule -->\n\nProfilesRepository->ProfilesModule\n\n\n\n\n\nProfilesService\n\nProfilesService\n\nProfilesModule -->\n\nProfilesService->ProfilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/profiles/profiles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfilesGateway\n                        \n                        \n                            ProfilesRepository\n                        \n                        \n                            ProfilesService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            S3Module\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProfilesRepository\n                        \n                        \n                            ProfilesResolver\n                        \n                        \n                            ProfilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BullModule } from '@nestjs/bull';\nimport { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConversationsModule } from '@src/conversations/conversations.module';\nimport { S3Module } from '@src/s3';\nimport { UsersModule } from '@src/users';\nimport * as moment from 'moment';\n\nimport { FriendsModule } from '@src/friends';\nimport {\n  Profile,\n  ProfileSchema,\n  ProfilesGateway,\n  ProfilesProcessor,\n  ProfilesRepository,\n  ProfilesResolver,\n  ProfilesService,\n} from '@src/profiles';\n\n@Module({\n  providers: [\n    ProfilesResolver,\n    ProfilesService,\n    ProfilesRepository,\n    ProfilesProcessor,\n    ProfilesGateway,\n  ],\n  imports: [\n    forwardRef(() => UsersModule),\n    S3Module,\n    forwardRef(() => ConversationsModule),\n    BullModule.registerQueue({\n      name: 'profile-queue',\n    }),\n    MongooseModule.forFeatureAsync([\n      {\n        name: Profile.name,\n        useFactory: () => {\n          const schema = ProfileSchema;\n          schema.pre('save', function () {\n            if (this.provider === 'credentials') {\n              const [username] = this.email.split('@');\n              const nowUnix = moment().format('x');\n              this.name = `${username}${nowUnix}`;\n            }\n          });\n\n          return schema;\n        },\n      },\n    ]),\n  ],\n  exports: [ProfilesService, ProfilesRepository, ProfilesResolver],\n})\nexport class ProfilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfilesProcessor.html":{"url":"classes/ProfilesProcessor.html","title":"class - ProfilesProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfilesProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profiles/profiles.processor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleAddFriend\n                            \n                            \n                                    Async\n                                handleUpdateAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profilesRepository: ProfilesRepository)\n                    \n                \n                        \n                            \n                                Defined in src/profiles/profiles.processor.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        profilesRepository\n                                                  \n                                                        \n                                                                        ProfilesRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleAddFriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleAddFriend(job: Job)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Process('addFriend')\n                \n            \n\n            \n                \n                    Defined in src/profiles/profiles.processor.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleUpdateAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleUpdateAvatar(job: Job)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Process('updateAvatar')\n                \n            \n\n            \n                \n                    Defined in src/profiles/profiles.processor.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Process, Processor } from '@nestjs/bull';\nimport { Job } from 'bull';\nimport { ProfilesRepository } from '@src/profiles';\n\n@Processor('profile-queue')\nexport class ProfilesProcessor {\n  constructor(private readonly profilesRepository: ProfilesRepository) {}\n\n  @Process('updateAvatar')\n  async handleUpdateAvatar(job: Job) {\n    const { url, id } = job.data;\n    return this.profilesRepository.updateAvatar(url, id);\n  }\n\n  @Process('addFriend')\n  async handleAddFriend(job: Job) {\n    const { userId, friendId } = job.data;\n    return this.profilesRepository.addFriend(userId, friendId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfilesRepository.html":{"url":"injectables/ProfilesRepository.html","title":"injectable - ProfilesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfilesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profiles/profiles.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addFriend\n                            \n                            \n                                createProfile\n                            \n                            \n                                    Async\n                                getEntireFriends\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                searchUser\n                            \n                            \n                                    Async\n                                unFriend\n                            \n                            \n                                    Async\n                                updateAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profileModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/profiles/profiles.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        profileModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addFriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFriend(userId: string, friendId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profiles/profiles.repository.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    friendId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createProfile\n                        \n                    \n                \n            \n            \n                \ncreateProfile(createInput: ProfileInput.Create)\n                \n            \n\n\n            \n                \n                    Defined in src/profiles/profiles.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInput\n                                    \n                                            ProfileInput.Create\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getEntireFriends\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntireFriends(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profiles/profiles.repository.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(profileInput: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/profiles/profiles.repository.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profileInput\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchUser(searchInput: ProfileInput.Search)\n                \n            \n\n\n            \n                \n                    Defined in src/profiles/profiles.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchInput\n                                    \n                                            ProfileInput.Search\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unFriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    unFriend(userId: string, friendId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profiles/profiles.repository.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    friendId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAvatar(url: string, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profiles/profiles.repository.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FriendsProfile } from '@src/friends';\nimport { ProfileDocument, ProfileInput, Profile } from '@src/profiles';\nimport { isEmpty } from 'lodash';\nimport { Model } from 'mongoose';\n@Injectable()\nexport class ProfilesRepository {\n  constructor(@InjectModel(Profile.name) private readonly profileModel: Model) {}\n\n  createProfile(createInput: ProfileInput.Create): Promise {\n    const profile = new this.profileModel(createInput);\n    return profile.save();\n  }\n  async searchUser(searchInput: ProfileInput.Search): Promise {\n    return this.profileModel.find({\n      name: { $regex: `.*${searchInput.keyword}.*`, $options: 'i' },\n    });\n  }\n\n  async getProfile(profileInput: Partial): Promise {\n    const { id } = profileInput;\n    const profile = await this.profileModel.aggregate([\n      {\n        $match: {\n          id,\n        },\n      },\n      {\n        $unwind: {\n          path: '$friends',\n          preserveNullAndEmptyArrays: true,\n        },\n      },\n      {\n        $lookup: {\n          from: 'profiles',\n          localField: 'friends.friendId',\n          foreignField: 'id',\n          as: 'friends',\n        },\n      },\n      {\n        $unwind: {\n          path: '$friends',\n          preserveNullAndEmptyArrays: true,\n        },\n      },\n      {\n        $group: {\n          _id: '$_id',\n          id: {\n            $first: '$id',\n          },\n          name: {\n            $first: '$name',\n          },\n          email: {\n            $first: '$email',\n          },\n          avatar: {\n            $first: '$avatar',\n          },\n          provider: {\n            $first: '$provider',\n          },\n          updatedAt: {\n            $first: '$updatedAt',\n          },\n          friends: {\n            $push: '$friends',\n          },\n          countFriend: {\n            $sum: 1,\n          },\n        },\n      },\n    ]);\n    if (!isEmpty(profile)) return profile[0];\n    return null;\n  }\n\n  async getEntireFriends(id: string): Promise {\n    return this.profileModel.findOne(\n      { id },\n      {\n        friends: 1,\n        _id: 0,\n      },\n    );\n  }\n  async updateAvatar(url: string, id: string) {\n    return this.profileModel.findOneAndUpdate({ id }, { avatar: url }, { returnDocument: 'after' });\n  }\n  async addFriend(userId: string, friendId: string) {\n    const model = this.profileModel;\n    const requestor = (async () => {\n      return model.updateOne(\n        { id: userId },\n        {\n          $push: { friends: { friendId } },\n        },\n      );\n    })();\n    const receiver = (() => {\n      return model.updateOne(\n        { id: friendId },\n        {\n          $push: { friends: { friendId: userId } },\n        },\n      );\n    })();\n    const [_receiver, _requestor] = await Promise.all([receiver, requestor]);\n    return _receiver.modifiedCount && _requestor.modifiedCount;\n  }\n  async unFriend(userId: string, friendId: string) {\n    const model = this.profileModel;\n    const requestor = (async () => {\n      return model.updateOne(\n        { id: userId },\n        {\n          $pull: { friends: { friendId } },\n        },\n      );\n    })();\n    const receiver = (() => {\n      return model.updateOne(\n        { id: friendId },\n        {\n          $pull: { friends: { friendId: userId } },\n        },\n      );\n    })();\n    const [_receiver, _requestor] = await Promise.all([receiver, requestor]);\n    return _receiver.modifiedCount && _requestor.modifiedCount;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfilesResolver.html":{"url":"classes/ProfilesResolver.html","title":"class - ProfilesResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfilesResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profiles/profiles.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getEntireProfile\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                searchUser\n                            \n                            \n                                    Async\n                                unfriend\n                            \n                            \n                                    Async\n                                uploadAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profilesService: ProfilesService, s3Service: S3Service, profileQueue: Queue, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/profiles/profiles.resolver.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        profilesService\n                                                  \n                                                        \n                                                                        ProfilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        s3Service\n                                                  \n                                                        \n                                                                        S3Service\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getEntireProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntireProfile()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/profiles/profiles.resolver.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(profileInput: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/profiles/profiles.resolver.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profileInput\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchUser(searchInput: ProfileInput.Search)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/profiles/profiles.resolver.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchInput\n                                    \n                                            ProfileInput.Search\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfriend(friend: ProfileInput.Friend)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'unfriend', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/profiles/profiles.resolver.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    friend\n                                    \n                                            ProfileInput.Friend\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: FileUpload, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'uploadAvatar', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/profiles/profiles.resolver.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                                FileUpload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { GraphQLException } from '@common/exceptions';\nimport { AuthGuard } from '@common/guards';\nimport { File } from '@common/graphql';\nimport { InjectQueue } from '@nestjs/bull';\nimport { CACHE_MANAGER, HttpStatus, Inject, NotFoundException, UseGuards } from '@nestjs/common';\nimport { Args, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { S3Service } from '@src/s3';\nimport { Profile, ProfileInput, ProfilesService } from '@src/profiles';\nimport { Queue } from 'bull';\nimport { Cache } from 'cache-manager';\nimport { FileUpload, GraphQLUpload } from 'graphql-upload';\n\n@Resolver(Profile)\n@UseGuards(AuthGuard)\nexport class ProfilesResolver {\n  constructor(\n    private readonly profilesService: ProfilesService,\n    private readonly s3Service: S3Service,\n    @InjectQueue('profile-queue') private readonly profileQueue: Queue,\n    @Inject(CACHE_MANAGER) private readonly cacheManager: Cache,\n  ) {}\n\n  @Query(() => [Profile])\n  async getEntireProfile(): Promise {\n    const result = await this.cacheManager.get('list.profiles');\n    if (result) return JSON.parse(result);\n\n    return this.profilesService.searchUser({ keyword: '' });\n  }\n\n  @Query(() => [Profile])\n  async searchUser(\n    @Args({ name: 'searchInput', type: () => ProfileInput.Search })\n    searchInput: ProfileInput.Search,\n  ): Promise {\n    const result = await this.cacheManager.get('list.profiles');\n    if (result) return JSON.parse(result);\n    const list = await this.profilesService.searchUser(searchInput);\n    await this.cacheManager.set('list-profile', JSON.stringify(list), 60);\n    return list;\n  }\n\n  @Query(() => Profile)\n  async getProfile(\n    @Args({ name: 'profileInput', type: () => ProfileInput.Obtain }) profileInput: Partial,\n  ): Promise {\n    return this.profilesService.getProfile(profileInput);\n\n    //\n  }\n\n  @Mutation(() => File, {\n    name: 'uploadAvatar',\n    nullable: true,\n  })\n  async uploadAvatar(\n    @Args({ name: 'file', type: () => GraphQLUpload }) file: FileUpload,\n    @Args({ name: 'id', type: () => String }) id: string,\n  ): Promise {\n    const { mimetype, filename, encoding } = file;\n\n    if (mimetype.startsWith('image')) {\n      const url = await this.s3Service.uploadImage(file);\n      if (typeof url === 'string') {\n        this.profileQueue.add(\n          'updateAvatar',\n          { url, id },\n          { removeOnComplete: true, removeOnFail: true },\n        );\n\n        return { url, filename, mimetype, encoding };\n      } else throw new NotFoundException();\n    } else {\n      throw new GraphQLException(\n        'File type invalid, please upload only image',\n        HttpStatus.NOT_ACCEPTABLE,\n      );\n    }\n  }\n\n  @Mutation(() => Number, {\n    name: 'unfriend',\n    nullable: true,\n  })\n  async unfriend(\n    @Args({ name: 'friend', type: () => ProfileInput.Friend }) friend: ProfileInput.Friend,\n  ): Promise {\n    return this.profilesService.unFriend(friend.userId, friend.friendId);\n  }\n\n  // @ResolveField(() => [UnionFriend], {\n  //   name: 'friends',\n  //   nullable: true,\n  // })\n  // _friends(@Parent() profile: Profile) {\n  //   //\n  //   //\n  //   // return FriendProfile;\n  //   // return profile.friends;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfilesService.html":{"url":"injectables/ProfilesService.html","title":"injectable - ProfilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profiles/profiles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addFriend\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                queueAddFriend\n                            \n                            \n                                    Async\n                                searchUser\n                            \n                            \n                                    Async\n                                unFriend\n                            \n                            \n                                    Async\n                                updateAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(conversationsRepository: ConversationsRepository, profilesRepository: ProfilesRepository, profileQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/profiles/profiles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        conversationsRepository\n                                                  \n                                                        \n                                                                        ConversationsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profilesRepository\n                                                  \n                                                        \n                                                                        ProfilesRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addFriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFriend(userId: string, friendId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profiles/profiles.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    friendId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(profileInput: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/profiles/profiles.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profileInput\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        queueAddFriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    queueAddFriend(userId: string, friendId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profiles/profiles.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    friendId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchUser(searchInput: ProfileInput.Search)\n                \n            \n\n\n            \n                \n                    Defined in src/profiles/profiles.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchInput\n                                    \n                                            ProfileInput.Search\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unFriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    unFriend(userId: string, friendId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profiles/profiles.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    friendId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAvatar(url: string, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profiles/profiles.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectQueue } from '@nestjs/bull';\nimport { Injectable } from '@nestjs/common';\nimport { ConversationsRepository } from '@src/conversations';\nimport { Queue } from 'bull';\nimport { Profile, ProfileInput, ProfilesRepository } from '@src/profiles';\n\n@Injectable()\nexport class ProfilesService {\n  constructor(\n    private readonly conversationsRepository: ConversationsRepository,\n    private readonly profilesRepository: ProfilesRepository,\n    @InjectQueue('profile-queue') private readonly profileQueue: Queue,\n  ) {}\n\n  async searchUser(searchInput: ProfileInput.Search): Promise {\n    return this.profilesRepository.searchUser(searchInput);\n  }\n  async getProfile(profileInput: Partial): Promise {\n    return this.profilesRepository.getProfile(profileInput);\n  }\n  async updateAvatar(url: string, id: string) {\n    return this.profilesRepository.updateAvatar(url, id);\n  }\n  async addFriend(userId: string, friendId: string) {\n    return this.profilesRepository.addFriend(userId, friendId);\n  }\n  async unFriend(userId: string, friendId: string) {\n    return this.profilesRepository.unFriend(userId, friendId);\n  }\n\n  async queueAddFriend(userId: string, friendId: string) {\n    const result = this.profileQueue.add(\n      'addFriend',\n      { userId, friendId },\n      { removeOnComplete: true, removeOnFail: false },\n    );\n    this.conversationsRepository.createConversation({ members: [userId, friendId] });\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Provider.html":{"url":"classes/Provider.html","title":"class - Provider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Provider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.type.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.type.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, ObjectType } from '@nestjs/graphql';\nimport { IsNotEmpty, IsOptional } from 'class-validator';\n\nexport type UserProvider = {\n  name: string;\n  id: string;\n};\nexport type ProvidersType = 'FACEBOOK' | 'GOOGLE' | 'GITHUB' | 'DISCORD';\n\n@ObjectType()\nexport class Provider {\n  @Field({ nullable: true })\n  id?: string;\n  @Field()\n  type: string;\n}\n\n@InputType()\nexport class ProviderInput {\n  @Field({ nullable: true })\n  @IsOptional()\n  id?: string;\n\n  @IsNotEmpty()\n  @Field({ nullable: false })\n  type: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProviderInput.html":{"url":"classes/ProviderInput.html","title":"class - ProviderInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProviderInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.type.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@Field({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.type.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, ObjectType } from '@nestjs/graphql';\nimport { IsNotEmpty, IsOptional } from 'class-validator';\n\nexport type UserProvider = {\n  name: string;\n  id: string;\n};\nexport type ProvidersType = 'FACEBOOK' | 'GOOGLE' | 'GITHUB' | 'DISCORD';\n\n@ObjectType()\nexport class Provider {\n  @Field({ nullable: true })\n  id?: string;\n  @Field()\n  type: string;\n}\n\n@InputType()\nexport class ProviderInput {\n  @Field({ nullable: true })\n  @IsOptional()\n  id?: string;\n\n  @IsNotEmpty()\n  @Field({ nullable: false })\n  type: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PubSubModule.html":{"url":"modules/PubSubModule.html","title":"module - PubSubModule","body":"\n                   \n\n\n\n\n    Modules\n    PubSubModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pubsub.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\n\nimport { RedisPubSub } from 'graphql-redis-subscriptions';\n\nexport const PUB_SUB = 'PUBSUB';\n@Global()\n@Module({\n  providers: [\n    {\n      provide: PUB_SUB,\n      useFactory: () => {\n        return new RedisPubSub({\n          connection: {\n            host: 'redis',\n            port: 6379,\n          },\n        });\n      },\n    },\n  ],\n  exports: [PUB_SUB],\n})\nexport class PubSubModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PublisherSubscriptions.html":{"url":"classes/PublisherSubscriptions.html","title":"class - PublisherSubscriptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PublisherSubscriptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pubsub.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pubsub.input.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, ID, InputType } from '@nestjs/graphql';\n\n@InputType()\n@ArgsType()\nexport class PublisherSubscriptions {\n  @Field(() => ID)\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RedisIoAdapter.html":{"url":"classes/RedisIoAdapter.html","title":"class - RedisIoAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RedisIoAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/adapters/redis.adapter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    IoAdapter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                adapterConstructor\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                connectToRedis\n                            \n                            \n                                createIOServer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        adapterConstructor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                    \n                        \n                                Defined in src/common/adapters/redis.adapter.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        connectToRedis\n                        \n                    \n                \n            \n            \n                \n                    \n                    connectToRedis()\n                \n            \n\n\n            \n                \n                    Defined in src/common/adapters/redis.adapter.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createIOServer\n                        \n                    \n                \n            \n            \n                \ncreateIOServer(port: number, options?: ServerOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/common/adapters/redis.adapter.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            ServerOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IoAdapter } from '@nestjs/platform-socket.io';\nimport { createAdapter } from '@socket.io/redis-adapter';\nimport { createClient } from 'redis';\nimport { ServerOptions } from 'socket.io';\nimport { Promise } from 'mongoose';\n\nexport class RedisIoAdapter extends IoAdapter {\n  private adapterConstructor: ReturnType;\n\n  async connectToRedis(): Promise {\n    let url = null;\n    if (process.env.POD_IP) {\n      url = `redis://${process.env.REDIS_HOST}:${process.env.PORT_REDIS}`;\n    } else {\n      url = process.env.REDIS_URL;\n    }\n\n    const pubClient = createClient({ url: url });\n    const subClient = pubClient.duplicate();\n\n    this.adapterConstructor = createAdapter(pubClient, subClient);\n  }\n\n  createIOServer(port: number, options?: ServerOptions): any {\n    const server = super.createIOServer(port, options);\n    server.adapter(this.adapterConstructor);\n    return server;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterResponse.html":{"url":"classes/RegisterResponse.html","title":"class - RegisterResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/types/RegisterResponse.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/types/RegisterResponse.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/types/RegisterResponse.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\nimport { User } from '@src/users';\n\n@ObjectType()\nexport class RegisterResponse {\n  @Field()\n  accessToken: string;\n\n  @Field(() => User)\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Request.html":{"url":"classes/Request.html","title":"class - Request","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Request\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/requests/requests.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                _id\n                            \n                            \n                                    Optional\n                                isAccept\n                            \n                            \n                                    Optional\n                                isPending\n                            \n                            \n                                    Optional\n                                isReject\n                            \n                            \n                                userReceive\n                            \n                            \n                                userRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/requests/requests.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isAccept\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: false})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/requests/requests.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isPending\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: true})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/requests/requests.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isReject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: false})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/requests/requests.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userReceive\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RC\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/requests/requests.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userRequest\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RQ\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/requests/requests.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { DynamicProfile, Profile } from '@src/profiles';\nimport mongoose, { ObjectId } from 'mongoose';\n\n@Schema({\n  timestamps: {\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt',\n  },\n})\n@ObjectType()\nexport class Request {\n  @Field(() => ID, { nullable: false })\n  _id?: ObjectId;\n\n  @Prop({ type: String, required: true })\n  @Field(() => Profile)\n  userRequest: RQ;\n\n  @Prop({ type: String, required: true })\n  @Field(() => Profile)\n  userReceive: RC;\n\n  @Prop({ required: true, default: false })\n  @Field(() => Boolean)\n  isAccept?: boolean;\n\n  @Prop({ required: true, default: false })\n  @Field(() => Boolean)\n  isReject?: boolean;\n\n  @Prop({ required: true, default: true })\n  @Field(() => Boolean)\n  isPending?: boolean;\n}\n\nexport type RequestDocument = Request & mongoose.Document;\nexport const RequestSchema = SchemaFactory.createForClass(Request);\nRequestSchema.index({ userRequest: 1, userReceive: 1 }, { unique: true });\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestsGateway.html":{"url":"injectables/RequestsGateway.html","title":"injectable - RequestsGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestsGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/requests/requests.gateway.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleAddFriend\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache, requestsService: RequestsService, profilesService: ProfilesService)\n                    \n                \n                        \n                            \n                                Defined in src/requests/requests.gateway.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        requestsService\n                                                  \n                                                        \n                                                                        RequestsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profilesService\n                                                  \n                                                        \n                                                                        ProfilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleAddFriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleAddFriend(payload: any, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('subscribe/requests.SEND_REQUEST')\n                \n            \n\n            \n                \n                    Defined in src/requests/requests.gateway.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/requests/requests.gateway.ts:22\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { CACHE_MANAGER, Inject, Injectable } from '@nestjs/common';\nimport {\n  ConnectedSocket,\n  MessageBody,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { ProfilesService } from '@src/profiles';\nimport { Cache } from 'cache-manager';\nimport { Server, Socket } from 'socket.io';\nimport { RequestsService } from './requests.service';\n\n@WebSocketGateway(3005, { cors: true })\n@Injectable()\nexport class RequestsGateway {\n  constructor(\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n    private readonly requestsService: RequestsService,\n    private readonly profilesService: ProfilesService,\n  ) {}\n  @WebSocketServer() server: Server;\n\n  @SubscribeMessage('subscribe/requests.SEND_REQUEST')\n  async handleAddFriend(\n    @MessageBody() payload: any,\n    @ConnectedSocket() client: Socket,\n  ): Promise {\n    const userRequest = payload?.userId;\n    const userReceive = payload?.friendId;\n    const listSocketId = await this.cacheManager.get>(userReceive);\n\n    if (userRequest && userReceive) {\n      const request = await this.requestsService.addRequest({\n        userRequest,\n        userReceive,\n      });\n\n      if (listSocketId) {\n        const userRequest = await this.profilesService.getProfile({\n          id: payload.userId,\n        });\n\n        client.to(listSocketId).emit('publish/requests.SEND_REQUEST', {\n          userRequest,\n          userReceive: payload.friendId,\n          _id: request._id,\n          message: `${userRequest.name} has already sent request add friend !`,\n        });\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RequestsModule.html":{"url":"modules/RequestsModule.html","title":"module - RequestsModule","body":"\n                   \n\n\n\n\n    Modules\n    RequestsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RequestsModule\n\n\n\ncluster_RequestsModule_imports\n\n\n\ncluster_RequestsModule_exports\n\n\n\ncluster_RequestsModule_providers\n\n\n\n\nProfilesModule\n\nProfilesModule\n\n\n\nRequestsModule\n\nRequestsModule\n\nRequestsModule -->\n\nProfilesModule->RequestsModule\n\n\n\n\n\nRequestsRepository \n\nRequestsRepository \n\nRequestsRepository  -->\n\nRequestsModule->RequestsRepository \n\n\n\n\n\nRequestsResolver \n\nRequestsResolver \n\nRequestsResolver  -->\n\nRequestsModule->RequestsResolver \n\n\n\n\n\nRequestsService \n\nRequestsService \n\nRequestsService  -->\n\nRequestsModule->RequestsService \n\n\n\n\n\nRequestsGateway\n\nRequestsGateway\n\nRequestsModule -->\n\nRequestsGateway->RequestsModule\n\n\n\n\n\nRequestsRepository\n\nRequestsRepository\n\nRequestsModule -->\n\nRequestsRepository->RequestsModule\n\n\n\n\n\nRequestsService\n\nRequestsService\n\nRequestsModule -->\n\nRequestsService->RequestsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/requests/requests.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RequestsGateway\n                        \n                        \n                            RequestsRepository\n                        \n                        \n                            RequestsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ProfilesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RequestsRepository\n                        \n                        \n                            RequestsResolver\n                        \n                        \n                            RequestsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { ProfilesModule } from '@src/profiles';\nimport {\n  Request,\n  RequestSchema,\n  RequestsGateway,\n  RequestsRepository,\n  RequestsResolver,\n  RequestsService,\n} from '@src/requests';\n\n@Module({\n  providers: [RequestsService, RequestsResolver, RequestsRepository, RequestsGateway],\n  imports: [\n    MongooseModule.forFeatureAsync([\n      {\n        name: Request.name,\n        useFactory: () => {\n          return RequestSchema;\n        },\n      },\n    ]),\n    ProfilesModule,\n  ],\n\n  exports: [RequestsService, RequestsResolver, RequestsRepository],\n})\nexport class RequestsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestsRepository.html":{"url":"injectables/RequestsRepository.html","title":"injectable - RequestsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/requests/requests.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptRequest\n                            \n                            \n                                    Async\n                                addRequest\n                            \n                            \n                                    Async\n                                getRequests\n                            \n                            \n                                    Async\n                                rejectRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(requestModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/requests/requests.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        requestModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        acceptRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptRequest(request: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/requests/requests.repository.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    addRequest(request: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/requests/requests.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequests(info: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/requests/requests.repository.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    info\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        rejectRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    rejectRequest(request: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/requests/requests.repository.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { RequestDocument } from '@src/requests';\nimport { Model } from 'mongoose';\nimport { Request } from \"./requests.schema\";\n\n@Injectable()\nexport class RequestsRepository {\n  constructor(@InjectModel(Request.name) private readonly requestModel: Model) {}\n\n  async addRequest(request: Request): Promise {\n    return this.requestModel.create({\n      ...request,\n    });\n  }\n\n  async getRequests(info: Partial): Promise {\n    return this.requestModel.aggregate([\n      {\n        $match: {\n          ...info,\n        },\n      },\n      {\n        $lookup: {\n          from: 'profiles',\n          localField: 'userRequest',\n          foreignField: 'id',\n          as: 'userRequest',\n        },\n      },\n      {\n        $unwind: {\n          path: '$userRequest',\n        },\n      },\n      {\n        $lookup: {\n          from: 'profiles',\n          localField: 'userReceive',\n          foreignField: 'id',\n          as: 'userReceive',\n        },\n      },\n      {\n        $unwind: {\n          path: '$userReceive',\n        },\n      },\n    ]);\n\n    // return this.requestModel.find({ ...info });\n  }\n\n  async acceptRequest(request: Partial): Promise {\n    const match = {\n      ...request,\n      isPending: true,\n      isAccept: false,\n      isReject: false,\n    };\n    const resultUpdate = await this.requestModel.updateOne(match, {\n      isPending: false,\n      isAccept: true,\n    });\n\n    if (resultUpdate.modifiedCount) {\n      const resultAggregate = await this.requestModel.aggregate([\n        {\n          $match: {\n            ...match,\n            isPending: false,\n            isAccept: true,\n          },\n        },\n        {\n          $lookup: {\n            from: 'profiles',\n            localField: 'userRequest',\n            foreignField: 'id',\n            as: 'userRequest',\n          },\n        },\n        {\n          $unwind: {\n            path: '$userRequest',\n          },\n        },\n        {\n          $lookup: {\n            from: 'profiles',\n            localField: 'userReceive',\n            foreignField: 'id',\n            as: 'userReceive',\n          },\n        },\n        {\n          $unwind: {\n            path: '$userReceive',\n          },\n        },\n      ]);\n\n      await this.requestModel.deleteOne({\n        userReceive: match.userReceive,\n        userRequest: match.userRequest,\n      });\n\n      return resultAggregate[0];\n    }\n    return null;\n  }\n\n  async rejectRequest(request: Partial): Promise {\n    const match = {\n      ...request,\n      isPending: true,\n      isAccept: false,\n      isReject: false,\n    };\n    const resultUpdate = await this.requestModel.updateOne(match, {\n      isReject: true,\n      isPending: false,\n    });\n    if (resultUpdate.modifiedCount) {\n      const resultAggregate = await this.requestModel.aggregate([\n        {\n          $match: {\n            ...match,\n            isReject: true,\n            isPending: false,\n          },\n        },\n        {\n          $lookup: {\n            from: 'profiles',\n            localField: 'userRequest',\n            foreignField: 'id',\n            as: 'userRequest',\n          },\n        },\n        {\n          $unwind: {\n            path: '$userRequest',\n          },\n        },\n        {\n          $lookup: {\n            from: 'profiles',\n            localField: 'userReceive',\n            foreignField: 'id',\n            as: 'userReceive',\n          },\n        },\n        {\n          $unwind: {\n            path: '$userReceive',\n          },\n        },\n      ]);\n\n      await this.requestModel.deleteOne({\n        userReceive: match.userReceive,\n        userRequest: match.userRequest,\n      });\n\n      return resultAggregate[0];\n    }\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RequestsResolver.html":{"url":"classes/RequestsResolver.html","title":"class - RequestsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RequestsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/requests/requests.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptRequest\n                            \n                            \n                                    Async\n                                addRequest\n                            \n                            \n                                    Async\n                                rejectRequest\n                            \n                            \n                                    Async\n                                retrieveRequests\n                            \n                            \n                                    Async\n                                subscribeRequestAdded\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(requestsService: RequestsService)\n                    \n                \n                        \n                            \n                                Defined in src/requests/requests.resolver.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        requestsService\n                                                  \n                                                        \n                                                                        RequestsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        acceptRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptRequest(request: RequestInput.InfoRequest, user: Current)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {nullable: true, name: 'acceptRequest'})\n                \n            \n\n            \n                \n                    Defined in src/requests/requests.resolver.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            RequestInput.InfoRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    addRequest(request: RequestInput.CreateRequest, user: Current)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {nullable: false, name: 'addRequest'})\n                \n            \n\n            \n                \n                    Defined in src/requests/requests.resolver.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            RequestInput.CreateRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        rejectRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    rejectRequest(request: RequestInput.InfoRequest, user: Current)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {nullable: true, name: 'rejectRequest'})\n                \n            \n\n            \n                \n                    Defined in src/requests/requests.resolver.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            RequestInput.InfoRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        retrieveRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    retrieveRequests(info: RequestInput.RetrieveRequest, user: Current)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {nullable: false, name: 'getRequests'})\n                \n            \n\n            \n                \n                    Defined in src/requests/requests.resolver.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    info\n                                    \n                                            RequestInput.RetrieveRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        subscribeRequestAdded\n                        \n                    \n                \n            \n            \n                \n                    \n                    subscribeRequestAdded()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Subscription(undefined, {name: 'requestAdded'})\n                \n            \n\n            \n                \n                    Defined in src/requests/requests.resolver.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Authorization } from '@common/decorators';\nimport { AuthGuard } from '@common/guards';\nimport { UseGuards } from '@nestjs/common';\nimport { Args, Mutation, Query, Resolver, Subscription } from '@nestjs/graphql';\nimport { Current } from '@users/types/UserOAuth';\nimport { PubSub } from 'graphql-subscriptions';\nimport RequestInput from './dto/requests.input';\nimport { Request } from \"./requests.schema\";\nimport { RequestsService } from './requests.service';\n\nconst pubSub = new PubSub();\n@Resolver()\n@UseGuards(AuthGuard)\nexport class RequestsResolver {\n  constructor(private readonly requestsService: RequestsService) {}\n\n  // INFO: QUERY\n  @Query(() => [Request], {\n    nullable: false,\n    name: 'getRequests',\n  })\n  async retrieveRequests(\n    @Args({ name: 'request', type: () => RequestInput.RetrieveRequest })\n    info: RequestInput.RetrieveRequest,\n    @Authorization()\n    user: Current,\n  ): Promise {\n    if (!info?.userReceive) info.userReceive = user._id.toString();\n    \n\n    return this.requestsService.getRequests(info);\n  }\n\n  // INFO: MUTATION\n  @Mutation(() => Request, {\n    nullable: false,\n    name: 'addRequest',\n  })\n  async addRequest(\n    @Args({ name: 'request', type: () => RequestInput.CreateRequest })\n    request: RequestInput.CreateRequest,\n    @Authorization()\n    user: Current,\n  ): Promise {\n    const userRequest = request.userRequest || user._id.toString();\n\n    const newRequest = this.requestsService.addRequest({\n      userReceive: request.userReceive,\n      userRequest,\n    });\n\n    pubSub.publish('requestAdded', { requestAdded: newRequest });\n    return newRequest;\n  }\n\n  @Mutation(() => Request, {\n    nullable: true,\n    name: 'acceptRequest',\n  })\n  async acceptRequest(\n    @Args({ name: 'request', type: () => RequestInput.InfoRequest })\n    request: RequestInput.InfoRequest,\n    @Authorization()\n    user: Current,\n  ): Promise {\n    const userReceive = request.userReceive || user._id.toString();\n    return this.requestsService.acceptRequest({\n      userReceive,\n      userRequest: request.userRequest,\n    });\n  }\n\n  @Mutation(() => Request, {\n    nullable: true,\n    name: 'rejectRequest',\n  })\n  async rejectRequest(\n    @Args({ name: 'request', type: () => RequestInput.InfoRequest })\n    request: RequestInput.InfoRequest,\n    @Authorization()\n    user: Current,\n  ): Promise {\n    const userReceive = request.userReceive || user._id.toString();\n    return this.requestsService.rejectRequest({\n      userReceive,\n      userRequest: request.userRequest,\n    });\n  }\n\n  // NOTE: SUBSCRIPTION\n  @Subscription(() => [Request], {\n    name: 'requestAdded',\n  })\n  async subscribeRequestAdded() {\n    return pubSub.asyncIterator('requestAdded');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestsService.html":{"url":"injectables/RequestsService.html","title":"injectable - RequestsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/requests/requests.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptRequest\n                            \n                            \n                                    Async\n                                addRequest\n                            \n                            \n                                    Async\n                                getRequests\n                            \n                            \n                                    Async\n                                rejectRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(requestsRepository: RequestsRepository, profilesService: ProfilesService)\n                    \n                \n                        \n                            \n                                Defined in src/requests/requests.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        requestsRepository\n                                                  \n                                                        \n                                                                        RequestsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profilesService\n                                                  \n                                                        \n                                                                        ProfilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        acceptRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptRequest(request)\n                \n            \n\n\n            \n                \n                    Defined in src/requests/requests.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    addRequest(request: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/requests/requests.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequests(info: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/requests/requests.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    info\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        rejectRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    rejectRequest(request: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/requests/requests.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ProfilesService } from '@src/profiles';\nimport { Request } from '@src/requests';\nimport { RequestsRepository } from './requests.repository';\n\n@Injectable()\nexport class RequestsService {\n  constructor(\n    private readonly requestsRepository: RequestsRepository,\n    private readonly profilesService: ProfilesService,\n  ) {}\n\n  async addRequest(request: Request): Promise {\n    return this.requestsRepository.addRequest(request);\n  }\n\n  async getRequests(info: Partial): Promise {\n    return this.requestsRepository.getRequests(info);\n  }\n\n  async acceptRequest(request) {\n    const userId = request.userRequest;\n\n    const friendId = request.userReceive;\n\n    const result = this.requestsRepository.acceptRequest(request);\n\n    if (result) this.profilesService.queueAddFriend(userId, friendId);\n    return result;\n  }\n\n  async rejectRequest(request: Partial) {\n    return this.requestsRepository.rejectRequest(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Require.html":{"url":"injectables/Require.html","title":"injectable - Require","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Require\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/Require.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(payload: T)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/Require.pipe.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         T | BadRequestException\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, PipeTransform } from '@nestjs/common';\n\n@Injectable()\nexport class Require implements PipeTransform {\n  transform(payload: T): T | BadRequestException {\n    if (!Object.keys(payload).length) {\n      throw new BadRequestException('Payload should not be empty !');\n    }\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequireAtLeast.html":{"url":"injectables/RequireAtLeast.html","title":"injectable - RequireAtLeast","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequireAtLeast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/RequireAtLeast.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(payload: T)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/RequireAtLeast.pipe.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         T | BadRequestException\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, PipeTransform } from '@nestjs/common';\n\n@Injectable()\nexport class RequireAtLeast implements PipeTransform {\n  transform(payload: T): T | BadRequestException {\n    if (!Object.keys(payload).length) {\n      throw new BadRequestException('Payload should not be empty !');\n    }\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RetrieveRequest.html":{"url":"classes/RetrieveRequest.html","title":"class - RetrieveRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RetrieveRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/requests/dto/requests.input.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, ID, InputType, IntersectionType } from '@nestjs/graphql';\nimport { IsBoolean, IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nnamespace RequestInput {\n  @InputType()\n  @ArgsType()\n  export class CreateRequest {\n    // NOTE: Optional: can be inject user from token\n    @Field(() => ID, { nullable: true })\n    @IsString()\n    @IsOptional()\n    userRequest?: string;\n\n    @Field(() => ID)\n    @IsString()\n    @IsNotEmpty()\n    userReceive: string;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class InfoRequest {\n    @Field(() => ID, { nullable: true })\n    @IsString()\n    @IsOptional()\n    userRequest?: string;\n\n    @Field(() => ID, { nullable: true })\n    @IsString()\n    @IsOptional()\n    userReceive?: string;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class Status {\n    @Field(() => Boolean)\n    @IsBoolean()\n    isPending: boolean;\n\n    @Field(() => Boolean)\n    @IsBoolean()\n    isReject: boolean;\n\n    @Field(() => Boolean)\n    @IsBoolean()\n    isAccept: boolean;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class RetrieveRequest extends IntersectionType(InfoRequest, Status) {}\n}\n\nexport default RequestInput;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/S3Module.html":{"url":"modules/S3Module.html","title":"module - S3Module","body":"\n                   \n\n\n\n\n    Modules\n    S3Module\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_S3Module\n\n\n\ncluster_S3Module_providers\n\n\n\ncluster_S3Module_exports\n\n\n\n\nS3Service \n\nS3Service \n\n\n\nS3Module\n\nS3Module\n\nS3Service  -->\n\nS3Module->S3Service \n\n\n\n\n\nS3Service\n\nS3Service\n\nS3Module -->\n\nS3Service->S3Module\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/s3/s3.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            S3Service\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            S3Service\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BullModule } from '@nestjs/bull';\nimport { Module } from '@nestjs/common';\nimport { S3Service } from './s3.service';\n\n@Module({\n  providers: [S3Service],\n  imports: [\n    BullModule.registerQueue({\n      name: 'upload-queue',\n    }),\n  ],\n  exports: [S3Service, BullModule],\n})\nexport class S3Module {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/S3Processor.html":{"url":"classes/S3Processor.html","title":"class - S3Processor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  S3Processor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/s3/s3.processor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleUploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleUploadFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleUploadFile(job: Job)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Process('uploadFile')\n                \n            \n\n            \n                \n                    Defined in src/s3/s3.processor.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Process, Processor } from '@nestjs/bull';\nimport { S3 } from 'aws-sdk';\nimport { Job } from 'bull';\n\n@Processor('upload-queue')\nexport class S3Processor {\n  @Process('uploadFile')\n  async handleUploadFile(job: Job) {\n    const s3 = new S3();\n    const { buffer, encoding, key, mimetype } = job.data;\n\n    return await s3\n      .upload({\n        Bucket: process.env.AWS_S3_NAME_BUCKET,\n        Body: buffer,\n        ContentEncoding: encoding,\n        Key: key,\n        ContentType: mimetype,\n      })\n      .promise();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/S3Service.html":{"url":"injectables/S3Service.html","title":"injectable - S3Service","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  S3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/s3/s3.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                streamToString\n                            \n                            \n                                    Async\n                                uploadImage\n                            \n                            \n                                    Async\n                                uploadMultipleImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        streamToString\n                        \n                    \n                \n            \n            \n                \n                    \n                    streamToString(stream)\n                \n            \n\n\n            \n                \n                    Defined in src/s3/s3.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadImage(file: FileUpload)\n                \n            \n\n\n            \n                \n                    Defined in src/s3/s3.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                                FileUpload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMultipleImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMultipleImage(file: FileUpload)\n                \n            \n\n\n            \n                \n                    Defined in src/s3/s3.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                                FileUpload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { S3 } from 'aws-sdk';\nimport { ManagedUpload } from 'aws-sdk/clients/s3';\nimport { FileUpload } from 'graphql-upload';\n\nimport * as mime from 'mime-types';\ntype FileImage = Omit & { buffer: Buffer };\n@Injectable()\nexport class S3Service {\n  async uploadImage(file: FileUpload): Promise {\n    const { encoding, mimetype, createReadStream } = file;\n    let filename = file.filename;\n    const s3 = new S3();\n    const stream = createReadStream();\n    const chunks = [];\n\n    const buffer = await new Promise((resolve, reject) => {\n      let buffer: Buffer;\n\n      stream.on('data', function (chunk) {\n        chunks.push(chunk);\n      });\n\n      stream.on('end', function () {\n        buffer = Buffer.concat(chunks);\n        resolve(buffer);\n      });\n\n      stream.on('error', reject);\n    });\n    const extensionFile = mimetype.replace('image/', '');\n    filename = filename.replace(/\\.(.*)$/g, '');\n    return new Promise((resolve, reject) => {\n      s3.upload(\n        {\n          Bucket: process.env.AWS_S3_NAME_BUCKET,\n          Body: buffer,\n          ContentEncoding: encoding,\n          Key: `${filename}-${Date.now()}.${extensionFile}`,\n          ContentType: mimetype,\n        },\n        (err: Error, data: ManagedUpload.SendData) => {\n          if (err) return reject(err);\n          return resolve(data.Location);\n        },\n      );\n    });\n  }\n  async streamToString(stream) {\n    const chunks = [];\n    return new Promise((resolve, reject) => {\n      let buffer: Buffer;\n\n      stream.on('data', function (chunk) {\n        chunks.push(chunk);\n      });\n      //\n      stream.on('end', function () {\n        buffer = Buffer.concat(chunks);\n        resolve(buffer);\n      });\n      //\n      stream.on('error', reject);\n    });\n  }\n\n  async uploadMultipleImage(file: FileUpload) {\n    const s3 = new S3();\n    const promisesUpload: Promise[] = [];\n    // for (const file of files) {\n    const { encoding, mimetype, createReadStream } = file;\n    let filename = file.filename;\n    const stream = createReadStream();\n\n    const chunks = [];\n\n    const buffer = await this.streamToString(stream);\n\n    const extensionFile = mime.extension(mimetype);\n    filename = filename.replace(/\\.(.*)$/g, '');\n    // promisesUpload.push(\n    return new Promise((resolve, reject) => {\n      s3.upload(\n        {\n          Bucket: process.env.AWS_S3_NAME_BUCKET,\n          Body: buffer,\n          ContentEncoding: encoding,\n          Key: `${filename}-${Date.now()}.${extensionFile}`,\n          ContentType: mimetype,\n        },\n        (err: Error, data: ManagedUpload.SendData) => {\n          if (err) return reject(err);\n          return resolve({ url: data.Location, type: extensionFile });\n        },\n      );\n    });\n    // );\n\n    // return promisesUpload;\n    // }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Search.html":{"url":"classes/Search.html","title":"class - Search","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Search\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profiles/dto/profile.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keyword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keyword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/dto/profile.input.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, InputType } from '@nestjs/graphql';\nimport { FileUpload, GraphQLUpload } from 'graphql-upload';\n\nexport namespace ProfileInput {\n  @ArgsType()\n  @InputType()\n  export class Create {\n    @Field()\n    id: string;\n\n    @Field()\n    email: string;\n\n    @Field()\n    provider: string;\n\n    @Field()\n    name: string;\n  }\n  @ArgsType()\n  @InputType()\n  export class Search {\n    @Field()\n    keyword: string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class Obtain {\n    @Field()\n    id: string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class _Upload_ {\n    @Field(() => GraphQLUpload)\n    file: FileUpload;\n\n    @Field(() => String)\n    id: string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class Friend {\n    @Field()\n    userId: string;\n    @Field()\n    friendId: string;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Send.html":{"url":"classes/Send.html","title":"class - Send","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Send\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/dto/messages.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversationId\n                            \n                            \n                                message\n                            \n                            \n                                now\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@IsObjectId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dto/messages.input.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dto/messages.input.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        now\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dto/messages.input.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObjectId } from '@decorators/IsObjectId.decorator';\nimport { ArgsType, Field, ID, InputType } from '@nestjs/graphql';\nimport { IsString } from 'class-validator';\n\nexport namespace MessageInput {\n  @ArgsType()\n  @InputType()\n  export class Send {\n    @Field()\n    @IsString()\n    message: string;\n\n    @Field(() => ID)\n    @IsObjectId()\n    conversationId: string;\n\n    @Field(() => Number)\n    now: number | string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class SendFiles {\n    @Field(() => ID)\n    @IsObjectId()\n    conversationId: string;\n\n    @Field(() => Number)\n    now: number | string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class PaginationMessages {\n    @Field()\n    @IsString()\n    @IsObjectId()\n    conversationId: string;\n\n    @Field(() => ID, { nullable: true })\n    startValue: any;\n  }\n}\n\nexport default MessageInput;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendFiles.html":{"url":"classes/SendFiles.html","title":"class - SendFiles","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendFiles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/dto/messages.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversationId\n                            \n                            \n                                now\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@IsObjectId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dto/messages.input.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        now\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dto/messages.input.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObjectId } from '@decorators/IsObjectId.decorator';\nimport { ArgsType, Field, ID, InputType } from '@nestjs/graphql';\nimport { IsString } from 'class-validator';\n\nexport namespace MessageInput {\n  @ArgsType()\n  @InputType()\n  export class Send {\n    @Field()\n    @IsString()\n    message: string;\n\n    @Field(() => ID)\n    @IsObjectId()\n    conversationId: string;\n\n    @Field(() => Number)\n    now: number | string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class SendFiles {\n    @Field(() => ID)\n    @IsObjectId()\n    conversationId: string;\n\n    @Field(() => Number)\n    now: number | string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class PaginationMessages {\n    @Field()\n    @IsString()\n    @IsObjectId()\n    conversationId: string;\n\n    @Field(() => ID, { nullable: true })\n    startValue: any;\n  }\n}\n\nexport default MessageInput;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Status.html":{"url":"classes/Status.html","title":"class - Status","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Status\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/requests/dto/requests.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isAccept\n                            \n                            \n                                isPending\n                            \n                            \n                                isReject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isAccept\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/requests/dto/requests.input.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPending\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/requests/dto/requests.input.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isReject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/requests/dto/requests.input.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, ID, InputType, IntersectionType } from '@nestjs/graphql';\nimport { IsBoolean, IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nnamespace RequestInput {\n  @InputType()\n  @ArgsType()\n  export class CreateRequest {\n    // NOTE: Optional: can be inject user from token\n    @Field(() => ID, { nullable: true })\n    @IsString()\n    @IsOptional()\n    userRequest?: string;\n\n    @Field(() => ID)\n    @IsString()\n    @IsNotEmpty()\n    userReceive: string;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class InfoRequest {\n    @Field(() => ID, { nullable: true })\n    @IsString()\n    @IsOptional()\n    userRequest?: string;\n\n    @Field(() => ID, { nullable: true })\n    @IsString()\n    @IsOptional()\n    userReceive?: string;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class Status {\n    @Field(() => Boolean)\n    @IsBoolean()\n    isPending: boolean;\n\n    @Field(() => Boolean)\n    @IsBoolean()\n    isReject: boolean;\n\n    @Field(() => Boolean)\n    @IsBoolean()\n    isAccept: boolean;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class RetrieveRequest extends IntersectionType(InfoRequest, Status) {}\n}\n\nexport default RequestInput;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePost.html":{"url":"classes/UpdatePost.html","title":"class - UpdatePost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/posts.input.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObjectId } from '@decorators/IsObjectId.decorator';\nimport {\n  ArgsType,\n  Field,\n  InputType,\n  ObjectType,\n  OmitType,\n  PartialType,\n  PickType,\n} from '@nestjs/graphql';\n// import { Post } from '@src/posts';\nimport { IsOptional } from 'class-validator';\nimport { Post } from '@src/posts';\n\nexport namespace PostInput {\n  @ObjectType()\n  export class PostDto {\n    @Field(() => String, {\n      description: 'content of post',\n      nullable: false,\n    })\n    content: string;\n\n    @Field(() => Number, {\n      description: 'count like of post',\n      nullable: true,\n    })\n    countLike?: number;\n\n    @Field(() => String, {\n      description: 'profile of post',\n      nullable: false,\n    })\n    @IsObjectId()\n    profile: string;\n  }\n\n  @InputType()\n  @ArgsType()\n  export class CreatePost extends OmitType(PartialType(PostDto, InputType), ['profile'] as const) {}\n\n  @InputType()\n  @ArgsType()\n  export class UpdatePost extends PartialType(PostDto, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class DeletePost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class GetPost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class InteractPost extends PickType(Post, ['_id'] as const, InputType) {}\n\n  @InputType()\n  @ArgsType()\n  export class GetPosts {\n    @IsOptional()\n    @Field(() => String, {\n      nullable: true,\n      defaultValue: null,\n    })\n    _id: string;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                providers\n                            \n                            \n                                refreshToken\n                            \n                            \n                                updatedAt\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.schema.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@Prop({default: undefined, type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.schema.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: false})@Prop({required: undefined, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Prop({required: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        providers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@Prop({default: undefined, type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.schema.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.schema.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Prop({required: undefined, sparse: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.schema.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Provider } from '@src/users';\nimport { ObjectId } from 'mongodb';\nimport mongoose, { Types } from 'mongoose';\n\nexport type UserDocument = User & mongoose.Document;\n\n@Schema({\n  timestamps: {\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt',\n  },\n})\n@ObjectType()\nexport class User {\n  @Field(() => ID, { nullable: false })\n  _id: ObjectId;\n\n\n  @Field({ nullable: true })\n  @Prop({ required: [true, 'This field shoud not be empty'], sparse: true })\n  username: string;\n\n  @Field({ nullable: true })\n  @Prop({ required: [true, 'This field shoud not be empty'] })\n  password: string;\n\n  @Field({ nullable: false })\n  @Prop({ required: [true, 'This field shoud not be empty'], unique: true })\n  email: string;\n\n  @Field({ nullable: true })\n  @Prop({ required: false })\n  refreshToken: string;\n\n  @Field(() => [Provider])\n  @Prop({ default: {}, type: Types.Array  })\n  providers: Array;\n\n  @Field(() => String)\n  @Prop({ default: null, type: Date })\n  deletedAt: Date;\n\n  @Field(() => String)\n  createdAt: Date;\n\n  @Field(() => String)\n  updatedAt: Date;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInput.html":{"url":"classes/UserInput.html","title":"class - UserInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                _id\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                password\n                            \n                            \n                                    Optional\n                                refreshToken\n                            \n                            \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string | ObjectId | User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsObjectId()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.input.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsEmail()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.input.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@Field(undefined, {nullable: true})@Length(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.input.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsJWT()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.input.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@Length(6, 15)@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.input.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObjectId } from '@decorators/IsObjectId.decorator';\nimport { ArgsType, Field, InputType } from '@nestjs/graphql';\nimport { IsEmail, IsJWT, IsOptional, IsString, Length } from 'class-validator';\nimport { ObjectId } from 'mongodb';\n\nimport { User } from '@src/users';\n\n@ArgsType()\n@InputType()\nexport class UserInput {\n  @IsOptional()\n  @IsString()\n  @IsObjectId()\n  @Field(() => String, { nullable: true })\n  _id?: string | ObjectId | User;\n\n  @IsOptional()\n  @IsString()\n  @Length(6, 15)\n  @Field(() => String, { nullable: true })\n  username?: string;\n\n  @IsOptional()\n  @IsString()\n  @Field(() => String, { nullable: true })\n  @Length(6)\n  password?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsEmail()\n  @Field(() => String, { nullable: true })\n  email?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsJWT()\n  @Field(() => String, { nullable: true })\n  refreshToken?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nS3Module\n\nS3Module\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nS3Module->UsersModule\n\n\n\n\n\nUsersRepository \n\nUsersRepository \n\nUsersRepository  -->\n\nUsersModule->UsersRepository \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersRepository\n\nUsersRepository\n\nUsersModule -->\n\nUsersRepository->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersRepository\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            S3Module\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersRepository\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ProfilesModule } from '@src/profiles';\nimport { S3Module } from '@src/s3';\nimport { hashSync } from 'bcrypt';\nimport { random } from 'lodash';\nimport * as moment from 'moment';\nimport { User, UserSchema, UsersRepository, UsersResolver, UsersService } from './';\n\n@Module({\n  imports: [\n    MongooseModule.forFeatureAsync([\n      {\n        name: User.name,\n        useFactory: () => {\n          const schema = UserSchema;\n          schema.pre('save', function () {\n            const nowUnix = moment().format('x');\n\n            const toUnix = moment()\n              .add(`${random(0, 100)}`, 'seconds')\n              .format('x');\n            const password = this.password ?? random(+nowUnix, +toUnix).toString();\n            // register for email first time appearance\n            if (this.providers[0].type === 'credentials') {\n              this.providers[0].id = this._id.toString();\n            }\n            this.password = hashSync(password, parseInt(process.env.SALT));\n          });\n          return schema;\n        },\n      },\n    ]),\n    S3Module,\n    forwardRef(() => ProfilesModule),\n  ],\n  providers: [UsersService, UsersResolver, UsersRepository],\n  exports: [UsersService, UsersRepository],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersRepository.html":{"url":"injectables/UsersRepository.html","title":"injectable - UsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteEntireUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getListUsers\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                OAuth\n                            \n                            \n                                    Async\n                                softDeleteUser\n                            \n                            \n                                    Async\n                                updateRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createInput: CreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInput\n                                    \n                                                CreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteEntireUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEntireUser()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userInput: UserInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userInput\n                                    \n                                                UserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getListUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getListUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(userInput: UserInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userInput\n                                    \n                                                UserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        OAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    OAuth(OAuthInput: OAuthInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    OAuthInput\n                                    \n                                                OAuthInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        softDeleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    softDeleteUser(userInput: UserInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userInput\n                                    \n                                                UserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshToken(userId: string | ObjectId, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            string | ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { CreateInput, OAuthInput, User, UserDocument, UserInput, UserOAuth } from '@src/users';\nimport { DeleteResult, ObjectId } from 'mongodb';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class UsersRepository {\n  constructor(@InjectModel(User.name) private userModel: Model) {}\n\n  async getUser(userInput: UserInput): Promise {\n    return this.userModel.findOne(userInput);\n  }\n\n  async getListUsers(): Promise {\n    return this.userModel.find({});\n  }\n\n  async createUser(createInput: CreateInput): Promise {\n    const { username, password, email, provider } = createInput;\n    return this.userModel.create({\n      username,\n      password,\n      email,\n      providers: [\n        {\n          type: provider.type,\n        },\n      ],\n    });\n  }\n\n  async deleteUser(userInput: UserInput): Promise {\n    return this.userModel.remove(userInput);\n  }\n\n  async softDeleteUser(userInput: UserInput): Promise {\n    return this.userModel.findOneAndUpdate(userInput, {\n      deletedAt: Date.now(),\n    });\n  }\n\n  async deleteEntireUser(): Promise {\n    return this.userModel.deleteMany({});\n  }\n\n  async updateRefreshToken(userId: string | ObjectId, refreshToken: string): Promise {\n    return this.userModel.findOneAndUpdate({ _id: userId }, { refreshToken });\n  }\n\n  async OAuth(OAuthInput: OAuthInput): Promise {\n    const { email, id, provider } = OAuthInput;\n\n    const existProvider = await this.userModel.findOne({\n      email,\n      'providers.type': provider,\n      'providers.id': id,\n    });\n    if (existProvider) return existProvider as User;\n\n    const existEmail = await this.userModel.findOne({\n      email,\n    });\n\n    if (existEmail) {\n      existEmail.providers.push({ type: provider, id });\n\n      const result = await this.userModel\n        .findOneAndUpdate(\n          { email },\n          { $addToSet: { providers: { type: provider, id } } },\n          { returnDocument: 'after', returnOriginal: false },\n        )\n        .lean();\n\n      return { ...result, id, provider } as UserOAuth;\n    } else {\n      const user = new this.userModel({\n        email,\n        providers: [\n          {\n            type: provider,\n            id: id,\n          },\n        ],\n      });\n      const result = (await user.save({ validateBeforeSave: false })).toObject() as User;\n      return { ...result, id, provider };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersResolver.html":{"url":"classes/UsersResolver.html","title":"class - UsersResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteEntireUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getListUsers\n                            \n                            \n                                    Async\n                                getMe\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                softDeleteUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, s3Service: S3Service)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.resolver.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        s3Service\n                                                  \n                                                        \n                                                                        S3Service\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createInput: CreateInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'createUser', nullable: true})@UseFilters(MongooseExceptionFilter)\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInput\n                                    \n                                                CreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteEntireUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEntireUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'deleteEntireUser', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userInput: UserInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'deleteUser', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userInput\n                                    \n                                                UserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getListUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getListUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'getListUsers', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMe\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMe(user: Current)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'me', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Current\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(userInput: UserInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'getUser', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userInput\n                                    \n                                                UserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        softDeleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    softDeleteUser(userInput: UserInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {name: 'softDeleteUser', nullable: true})\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userInput\n                                    \n                                                UserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Authorization } from '@common/decorators';\nimport { MongooseExceptionFilter } from '@common/filters';\nimport { DeleteResult } from '@common/graphql';\nimport { AuthGuard } from '@common/guards';\nimport { RequireAtLeast } from '@common/pipes';\nimport { UseFilters, UseGuards } from '@nestjs/common';\nimport { Args, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { S3Service } from '@src/s3';\nimport { CreateInput, Current, User, UserInput, UsersService } from '@src/users';\n\n@Resolver(() => User)\n@UseGuards(AuthGuard)\nexport class UsersResolver {\n  constructor(private readonly usersService: UsersService, private readonly s3Service: S3Service) {}\n\n  @Query(() => Current, {\n    name: 'me',\n    nullable: true,\n  })\n  async getMe(@Authorization() user: Current): Promise {\n    return user;\n  }\n\n  @Query(() => User, {\n    name: 'getUser',\n    nullable: true,\n  })\n  async getUser(@Args('userInput', new RequireAtLeast()) userInput: UserInput): Promise {\n    return this.usersService.getUser(userInput);\n  }\n\n  @Query(() => [User], {\n    name: 'getListUsers',\n    nullable: true,\n  })\n  async getListUsers(): Promise {\n    return this.usersService.getListUsers();\n  }\n\n  @Mutation(() => User, {\n    name: 'deleteUser',\n    nullable: true,\n  })\n  async deleteUser(@Args('userInput', new RequireAtLeast()) userInput: UserInput): Promise {\n    return this.usersService.deleteUser(userInput);\n  }\n\n  @Mutation(() => User, {\n    name: 'softDeleteUser',\n    nullable: true,\n  })\n  async softDeleteUser(@Args('userInput', new RequireAtLeast()) userInput: UserInput) {\n    return this.usersService.softDeleteUser(userInput);\n  }\n\n  @Mutation(() => DeleteResult, {\n    name: 'deleteEntireUser',\n    nullable: true,\n  })\n  async deleteEntireUser() {\n    return this.usersService.deleteEntireUser();\n  }\n\n  @Mutation(() => User, {\n    name: 'createUser',\n    nullable: true,\n  })\n  @UseFilters(MongooseExceptionFilter)\n  async createUser(@Args('createInput') createInput: CreateInput): Promise {\n    return await this.usersService.createUser(createInput);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                deleteEntireUser\n                            \n                            \n                                deleteUser\n                            \n                            \n                                getListUsers\n                            \n                            \n                                getUser\n                            \n                            \n                                    Async\n                                OAuth\n                            \n                            \n                                softDeleteUser\n                            \n                            \n                                updateRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: UsersRepository, profilesRepository: ProfilesRepository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        UsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profilesRepository\n                                                  \n                                                        \n                                                                        ProfilesRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createInput: CreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInput\n                                    \n                                                CreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteEntireUser\n                        \n                    \n                \n            \n            \n                \ndeleteEntireUser()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteUser\n                        \n                    \n                \n            \n            \n                \ndeleteUser(userInput: UserInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userInput\n                                    \n                                                UserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getListUsers\n                        \n                    \n                \n            \n            \n                \ngetListUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(userInput: UserInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userInput\n                                    \n                                                UserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        OAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    OAuth(_OAuthInput: OAuthInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _OAuthInput\n                                    \n                                                OAuthInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        softDeleteUser\n                        \n                    \n                \n            \n            \n                \nsoftDeleteUser(userInput: UserInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userInput\n                                    \n                                                UserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \nupdateRefreshToken(userId: string | ObjectId, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            string | ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\n\nimport { ProfilesRepository } from '@src/profiles';\nimport { CreateInput, OAuthInput, User, UserInput, UserOAuth, UsersRepository } from '@src/users';\nimport { DeleteResult, ObjectId, UpdateResult } from 'mongodb';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    private readonly usersRepository: UsersRepository,\n    @Inject(forwardRef(() => ProfilesRepository))\n    private readonly profilesRepository: ProfilesRepository,\n  ) {}\n\n  getUser(userInput: UserInput): Promise {\n    return this.usersRepository.getUser(userInput);\n  }\n\n  getListUsers(): Promise {\n    return this.usersRepository.getListUsers();\n  }\n\n  async createUser(createInput: CreateInput): Promise {\n    const user = await this.usersRepository.createUser(createInput);\n\n    this.profilesRepository.createProfile({\n      provider: 'credentials',\n      name: user.email,\n      id: user._id.toString(),\n      email: user.email,\n    });\n    return user;\n  }\n\n  deleteUser(userInput: UserInput): Promise {\n    return this.usersRepository.deleteUser(userInput);\n  }\n\n  softDeleteUser(userInput: UserInput) {\n    return this.usersRepository.softDeleteUser(userInput);\n  }\n\n  deleteEntireUser(): Promise {\n    return this.usersRepository.deleteEntireUser();\n  }\n\n  updateRefreshToken(userId: string | ObjectId, refreshToken: string) {\n    return this.usersRepository.updateRefreshToken(userId, refreshToken);\n  }\n\n  async OAuth(_OAuthInput: OAuthInput): Promise {\n    const user = await this.usersRepository.OAuth(_OAuthInput);\n    if ('provider' in user) {\n      const { id, email, provider } = user;\n      const { name } = _OAuthInput;\n      this.profilesRepository.createProfile({\n        id,\n        name,\n        email,\n        provider,\n      });\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationExceptionFilter.html":{"url":"classes/ValidationExceptionFilter.html","title":"class - ValidationExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/validation.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Error.ValidationError)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/validation.filter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                Error.ValidationError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException, Catch, ExceptionFilter } from '@nestjs/common';\nimport { Error } from 'mongoose';\n\nconst ValidationError = Error.ValidationError;\n/*\n TODO: return field array for client\n WARNING: graphql not receive this error\n INFO: map list error from mongodb to graphql\n*/\n\n@Catch(ValidationError)\nexport class ValidationExceptionFilter implements ExceptionFilter {\n  catch(exception: Error.ValidationError) {\n    const listErrors = Object.keys(exception.errors).map((key: string) => {\n      return {\n        field: key,\n        message: exception.errors[key].message,\n        code: 26042,\n      };\n    });\n\n    return new BadRequestException(listErrors, 'ValidationError');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/_Upload_.html":{"url":"classes/_Upload_.html","title":"class - _Upload_","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  _Upload_\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profiles/dto/profile.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileUpload\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/dto/profile.input.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profiles/dto/profile.input.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, InputType } from '@nestjs/graphql';\nimport { FileUpload, GraphQLUpload } from 'graphql-upload';\n\nexport namespace ProfileInput {\n  @ArgsType()\n  @InputType()\n  export class Create {\n    @Field()\n    id: string;\n\n    @Field()\n    email: string;\n\n    @Field()\n    provider: string;\n\n    @Field()\n    name: string;\n  }\n  @ArgsType()\n  @InputType()\n  export class Search {\n    @Field()\n    keyword: string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class Obtain {\n    @Field()\n    id: string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class _Upload_ {\n    @Field(() => GraphQLUpload)\n    file: FileUpload;\n\n    @Field(() => String)\n    id: string;\n  }\n\n  @ArgsType()\n  @InputType()\n  export class Friend {\n    @Field()\n    userId: string;\n    @Field()\n    friendId: string;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.gateway.ts\n            \n            class\n            AppGateway\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            pubSub\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/auth.gateway.ts\n            \n            injectable\n            AuthGateway\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/auth.resolver.ts\n            \n            class\n            AuthResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authentication/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/authentication/dto/loginInput.input.ts\n            \n            class\n            LoginInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/authentication/types/AccessTokenResponse.ts\n            \n            class\n            AccessTokenResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/types/LoginResponse.ts\n            \n            class\n            LoginResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/types/RegisterResponse.ts\n            \n            class\n            RegisterResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/comments.repository.ts\n            \n            class\n            CommentsRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/comments/comments.resolver.ts\n            \n            class\n            CommentsResolver\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/comments/comments.schema.ts\n            \n            class\n            Comment\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/comments/comments.schema.ts\n            \n            variable\n            CommentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/comments/comments.service.ts\n            \n            injectable\n            CommentsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/adapters/redis.adapter.ts\n            \n            class\n            RedisIoAdapter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/decorators/Authorization.decorator.ts\n            \n            variable\n            Authorization\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/GetExecutionContext.decorator.ts\n            \n            function\n            GetExecutionContext\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/IsNonce.decorator.ts\n            \n            function\n            IsNonce\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/IsObjectId.decorator.ts\n            \n            function\n            IsObjectId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/exceptions/graphql.exception.ts\n            \n            class\n            GraphQLException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/filters/graphql.filter.ts\n            \n            class\n            GraphQLExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/filters/mongo.filter.ts\n            \n            class\n            MongoExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/filters/mongoose.filter.ts\n            \n            class\n            MongooseExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/filters/validation.filter.ts\n            \n            class\n            ValidationExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/filters/validation.filter.ts\n            \n            variable\n            ValidationError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/graphql/types/DeleteResult.ts\n            \n            class\n            DeleteResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/graphql/types/File.ts\n            \n            class\n            File\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/middlewares/home.middleware.ts\n            \n            injectable\n            HomeMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/middlewares/upper.middleware.ts\n            \n            variable\n            UpperMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/pipes/ObjectId.pipe.ts\n            \n            injectable\n            ObjectIdPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/Require.pipe.ts\n            \n            injectable\n            Require\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/RequireAtLeast.pipe.ts\n            \n            injectable\n            RequireAtLeast\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/validators/Nonce.validator.ts\n            \n            class\n            IsNonceConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/validators/ObjectId.validator.ts\n            \n            class\n            IsObjectIdConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/conversations/conversations.gateway.ts\n            \n            injectable\n            ConversationsGateway\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/conversations/conversations.processor.ts\n            \n            class\n            ConversationsProcessor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/conversations/conversations.repository.ts\n            \n            injectable\n            ConversationsRepository\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/conversations/conversations.resolver.ts\n            \n            class\n            ConversationsResolver\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/conversations/conversations.schema.ts\n            \n            class\n            Conversation\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/conversations/conversations.schema.ts\n            \n            variable\n            ConversationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/conversations/conversations.service.ts\n            \n            injectable\n            ConversationsService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/conversations/dto/conversation.input.ts\n            \n            class\n            ChangeNameConversation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/conversations/dto/conversation.input.ts\n            \n            class\n            CreateConversation\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/conversations/dto/conversation.input.ts\n            \n            class\n            ListFriendNotInConversation\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/friends/friends.resolver.ts\n            \n            class\n            FriendsResolver\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/friends/friends.schema.ts\n            \n            class\n            FriendProfile\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/friends/friends.schema.ts\n            \n            variable\n            FriendSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/friends/friends.service.ts\n            \n            injectable\n            FriendsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/friends/types.ts\n            \n            class\n            FriendsProfile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/likes/likes.repository.ts\n            \n            class\n            LikesRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/likes/likes.resolver.ts\n            \n            class\n            LikesResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/likes/likes.schema.ts\n            \n            class\n            Like\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/likes/likes.schema.ts\n            \n            variable\n            LikeSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/likes/likes.service.ts\n            \n            injectable\n            LikesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/dto/messages.input.ts\n            \n            class\n            PaginationMessages\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/messages/dto/messages.input.ts\n            \n            class\n            Send\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/messages/dto/messages.input.ts\n            \n            class\n            SendFiles\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/messages/messages.gateway.ts\n            \n            injectable\n            MessagesGateway\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/messages/messages.repository.ts\n            \n            injectable\n            MessagesRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/messages/messages.resolver.ts\n            \n            class\n            MessagesResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/messages/messages.schema.ts\n            \n            class\n            FileInfo\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/messages/messages.schema.ts\n            \n            class\n            Message\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/messages/messages.schema.ts\n            \n            class\n            MessageOmit\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/messages.schema.ts\n            \n            class\n            MessagesConversation\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/messages/messages.schema.ts\n            \n            variable\n            MessageSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/notifications/notifications.gateway.ts\n            \n            injectable\n            NotificationsGateway\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/notifications/notifications.resolver.ts\n            \n            class\n            NotificationsResolver\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notifications/notifications.service.ts\n            \n            injectable\n            NotificationsService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/posts.input.ts\n            \n            class\n            CreatePost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/posts.input.ts\n            \n            class\n            DeletePost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/posts.input.ts\n            \n            class\n            GetPost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/posts.input.ts\n            \n            class\n            GetPosts\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/dto/posts.input.ts\n            \n            class\n            InteractPost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/posts.input.ts\n            \n            class\n            PostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/dto/posts.input.ts\n            \n            class\n            UpdatePost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.gateway.ts\n            \n            injectable\n            PostsGateway\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/posts.repository.ts\n            \n            class\n            PostsRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/posts.resolver.ts\n            \n            class\n            PostsResolver\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/posts.schema.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/posts.schema.ts\n            \n            variable\n            PostSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/profiles/dto/profile.input.ts\n            \n            class\n            _Upload_\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/profiles/dto/profile.input.ts\n            \n            class\n            Create\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/profiles/dto/profile.input.ts\n            \n            class\n            Friend\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/profiles/dto/profile.input.ts\n            \n            class\n            Obtain\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/profiles/dto/profile.input.ts\n            \n            class\n            Search\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/profiles/profiles.gateway.ts\n            \n            injectable\n            ProfilesGateway\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/profiles/profiles.processor.ts\n            \n            class\n            ProfilesProcessor\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/profiles/profiles.repository.ts\n            \n            injectable\n            ProfilesRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/profiles/profiles.resolver.ts\n            \n            class\n            ProfilesResolver\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/profiles/profiles.schema.ts\n            \n            class\n            Profile\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/profiles/profiles.schema.ts\n            \n            variable\n            ProfileSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/profiles/profiles.schema.ts\n            \n            variable\n            UnionFriend\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/profiles/profiles.service.ts\n            \n            injectable\n            ProfilesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/pubsub.input.ts\n            \n            class\n            PublisherSubscriptions\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pubsub.module.ts\n            \n            variable\n            PUB_SUB\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/requests/dto/requests.input.ts\n            \n            class\n            CreateRequest\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/requests/dto/requests.input.ts\n            \n            class\n            InfoRequest\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/requests/dto/requests.input.ts\n            \n            class\n            RetrieveRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/requests/dto/requests.input.ts\n            \n            class\n            Status\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/requests/requests.gateway.ts\n            \n            injectable\n            RequestsGateway\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/requests/requests.repository.ts\n            \n            injectable\n            RequestsRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/requests/requests.resolver.ts\n            \n            class\n            RequestsResolver\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/requests/requests.resolver.ts\n            \n            variable\n            pubSub\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/requests/requests.schema.ts\n            \n            class\n            Request\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/requests/requests.schema.ts\n            \n            variable\n            RequestSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/requests/requests.service.ts\n            \n            injectable\n            RequestsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/s3/s3.processor.ts\n            \n            class\n            S3Processor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/s3/s3.service.ts\n            \n            injectable\n            S3Service\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/create.input.ts\n            \n            class\n            CreateInput\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/oauth.input.ts\n            \n            class\n            OAuthInput\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/user.input.ts\n            \n            class\n            UserInput\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/types/UserOAuth.ts\n            \n            class\n            Current\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/types/UserOAuth.ts\n            \n            class\n            OAuthInfo\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.repository.ts\n            \n            injectable\n            UsersRepository\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/users.resolver.ts\n            \n            class\n            UsersResolver\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/users.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/users.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/users.type.ts\n            \n            class\n            Provider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.type.ts\n            \n            class\n            ProviderInput\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @apollo/server : ^4.4.1\n        \n            @graphql-tools/schema : ^9.0.16\n        \n            @nestjs/apollo : ^10.2.0\n        \n            @nestjs/bull : ^0.6.1\n        \n            @nestjs/common : ^9.3.7\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.3.9\n        \n            @nestjs/devtools-integration : ^0.1.3\n        \n            @nestjs/graphql : ^10.2.0\n        \n            @nestjs/jwt : ^10.0.2\n        \n            @nestjs/mongoose : ^9.2.1\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.3.9\n        \n            @nestjs/platform-fastify : ^9.2.1\n        \n            @nestjs/platform-socket.io : ^9.3.9\n        \n            @nestjs/websockets : ^9.3.9\n        \n            @socket.io/redis-adapter : ^8.1.0\n        \n            apollo-server-express : ^3.12.0\n        \n            apollo-server-fastify : ^3.12.0\n        \n            aws-sdk : ^2.1328.0\n        \n            axios : ^0.27.2\n        \n            bcrypt : ^5.1.0\n        \n            body-parser : ^1.20.0\n        \n            bull : ^4.10.4\n        \n            cache-manager : ^5.1.7\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            csurf : ^1.11.0\n        \n            express-session : ^1.17.3\n        \n            graphql : 16.6.0\n        \n            graphql-redis-subscriptions : ^2.6.0\n        \n            graphql-subscriptions : ^2.0.0\n        \n            graphql-upload : 12.0.0\n        \n            graphql-ws : ^5.11.3\n        \n            helmet : ^6.0.1\n        \n            jose : ^4.10.4\n        \n            mime-types : ^2.1.35\n        \n            moment : ^2.29.4\n        \n            mongodb : ^5.1.0\n        \n            mongoose : ^6.4.1\n        \n            mongoose-unique-validator : ^3.1.0\n        \n            next-auth : 4.20.1\n        \n            node-fetch : ^3.2.10\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            redis : 3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.8.0\n        \n            socket.io : ^4.6.1\n        \n            socket.io-adapter : ^2.4.0\n        \n            terser : ^5.16.5\n        \n            tslib : ^2.5.0\n        \n            ws : ^8.12.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            GetExecutionContext   (src/.../GetExecutionContext.decorator.ts)\n                        \n                        \n                            IsNonce   (src/.../IsNonce.decorator.ts)\n                        \n                        \n                            IsObjectId   (src/.../IsObjectId.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/decorators/GetExecutionContext.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetExecutionContext\n                        \n                    \n                \n            \n            \n                \nGetExecutionContext(headerName?: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    headerName\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ParameterDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/common/decorators/IsNonce.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsNonce\n                        \n                    \n                \n            \n            \n                \nIsNonce(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/common/decorators/IsObjectId.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsObjectId\n                        \n                    \n                \n            \n            \n                \nIsObjectId(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBOX UNIVERSE SERVER\n\nSee detail instruction here\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConversationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FriendsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LikesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PubSubModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RequestsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        S3Module\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_exports\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_FriendsModule\n\n\n\ncluster_FriendsModule_providers\n\n\n\ncluster_LikesModule\n\n\n\ncluster_LikesModule_providers\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_ProfilesModule\n\n\n\ncluster_ProfilesModule_exports\n\n\n\ncluster_ProfilesModule_providers\n\n\n\ncluster_RequestsModule\n\n\n\ncluster_RequestsModule_exports\n\n\n\ncluster_RequestsModule_providers\n\n\n\ncluster_S3Module\n\n\n\ncluster_S3Module_exports\n\n\n\ncluster_S3Module_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nConversationsRepository \n\nConversationsRepository \n\nConversationsRepository  -->\n\nConversationsModule->ConversationsRepository \n\n\n\n\n\nConversationsService \n\nConversationsService \n\nConversationsService  -->\n\nConversationsModule->ConversationsService \n\n\n\n\n\nFriendsModule\n\nFriendsModule\n\nAppModule -->\n\nFriendsModule->AppModule\n\n\n\n\n\nLikesModule\n\nLikesModule\n\nAppModule -->\n\nLikesModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nLikesModule -->\n\nPostsModule->LikesModule\n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nProfilesModule\n\nProfilesModule\n\nCommentsModule -->\n\nProfilesModule->CommentsModule\n\n\n\nFriendsModule -->\n\nProfilesModule->FriendsModule\n\n\n\nLikesModule -->\n\nProfilesModule->LikesModule\n\n\n\nPostsModule -->\n\nProfilesModule->PostsModule\n\n\n\n\n\nRequestsModule\n\nRequestsModule\n\nRequestsModule -->\n\nProfilesModule->RequestsModule\n\n\n\nAppModule -->\n\nProfilesModule->AppModule\n\n\n\n\n\nProfilesRepository \n\nProfilesRepository \n\nProfilesRepository  -->\n\nProfilesModule->ProfilesRepository \n\n\n\n\n\nProfilesResolver \n\nProfilesResolver \n\nProfilesResolver  -->\n\nProfilesModule->ProfilesResolver \n\n\n\n\n\nProfilesService \n\nProfilesService \n\nProfilesService  -->\n\nProfilesModule->ProfilesService \n\n\n\n\n\nPubSubModule\n\nPubSubModule\n\nAppModule -->\n\nPubSubModule->AppModule\n\n\n\nAppModule -->\n\nRequestsModule->AppModule\n\n\n\n\n\nRequestsRepository \n\nRequestsRepository \n\nRequestsRepository  -->\n\nRequestsModule->RequestsRepository \n\n\n\n\n\nRequestsResolver \n\nRequestsResolver \n\nRequestsResolver  -->\n\nRequestsModule->RequestsResolver \n\n\n\n\n\nRequestsService \n\nRequestsService \n\nRequestsService  -->\n\nRequestsModule->RequestsService \n\n\n\n\n\nS3Module\n\nS3Module\n\nMessagesModule -->\n\nS3Module->MessagesModule\n\n\n\nProfilesModule -->\n\nS3Module->ProfilesModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nS3Module->UsersModule\n\n\n\nAppModule -->\n\nS3Module->AppModule\n\n\n\n\n\nS3Service \n\nS3Service \n\nS3Service  -->\n\nS3Module->S3Service \n\n\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersRepository \n\nUsersRepository \n\nUsersRepository  -->\n\nUsersModule->UsersRepository \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthGateway\n\nAuthGateway\n\nAuthModule -->\n\nAuthGateway->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCommentsService\n\nCommentsService\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\nConversationsGateway\n\nConversationsGateway\n\nConversationsModule -->\n\nConversationsGateway->ConversationsModule\n\n\n\n\n\nConversationsRepository\n\nConversationsRepository\n\nConversationsModule -->\n\nConversationsRepository->ConversationsModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\nFriendsService\n\nFriendsService\n\nFriendsModule -->\n\nFriendsService->FriendsModule\n\n\n\n\n\nLikesService\n\nLikesService\n\nLikesModule -->\n\nLikesService->LikesModule\n\n\n\n\n\nMessagesGateway\n\nMessagesGateway\n\nMessagesModule -->\n\nMessagesGateway->MessagesModule\n\n\n\n\n\nMessagesRepository\n\nMessagesRepository\n\nMessagesModule -->\n\nMessagesRepository->MessagesModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nNotificationsGateway\n\nNotificationsGateway\n\nNotificationsModule -->\n\nNotificationsGateway->NotificationsModule\n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\n\n\nPostsGateway\n\nPostsGateway\n\nPostsModule -->\n\nPostsGateway->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nProfilesGateway\n\nProfilesGateway\n\nProfilesModule -->\n\nProfilesGateway->ProfilesModule\n\n\n\n\n\nProfilesRepository\n\nProfilesRepository\n\nProfilesModule -->\n\nProfilesRepository->ProfilesModule\n\n\n\n\n\nProfilesService\n\nProfilesService\n\nProfilesModule -->\n\nProfilesService->ProfilesModule\n\n\n\n\n\nRequestsGateway\n\nRequestsGateway\n\nRequestsModule -->\n\nRequestsGateway->RequestsModule\n\n\n\n\n\nRequestsRepository\n\nRequestsRepository\n\nRequestsModule -->\n\nRequestsRepository->RequestsModule\n\n\n\n\n\nRequestsService\n\nRequestsService\n\nRequestsModule -->\n\nRequestsService->RequestsModule\n\n\n\n\n\nS3Service\n\nS3Service\n\nS3Module -->\n\nS3Service->S3Module\n\n\n\n\n\nUsersRepository\n\nUsersRepository\n\nUsersModule -->\n\nUsersRepository->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        14 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    29 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    75 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CommentDocument   (src/.../comments.schema.ts)\n                        \n                        \n                            ConversationDocument   (src/.../conversations.schema.ts)\n                        \n                        \n                            DynamicLike   (src/.../likes.schema.ts)\n                        \n                        \n                            DynamicPost   (src/.../posts.schema.ts)\n                        \n                        \n                            DynamicProfile   (src/.../profiles.schema.ts)\n                        \n                        \n                            FileImage   (src/.../s3.service.ts)\n                        \n                        \n                            FriendDocument   (src/.../friends.schema.ts)\n                        \n                        \n                            LikeDocument   (src/.../likes.schema.ts)\n                        \n                        \n                            MessageDocument   (src/.../messages.schema.ts)\n                        \n                        \n                            Payload   (src/.../Payload.ts)\n                        \n                        \n                            PostDocument   (src/.../posts.schema.ts)\n                        \n                        \n                            ProfileDocument   (src/.../profiles.schema.ts)\n                        \n                        \n                            ProvidersType   (src/.../users.type.ts)\n                        \n                        \n                            RequestDocument   (src/.../requests.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../users.schema.ts)\n                        \n                        \n                            UserOAuth   (src/.../UserOAuth.ts)\n                        \n                        \n                            UserProvider   (src/.../users.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/comments/comments.schema.ts\n    \n    \n        \n            \n                \n                    \n                    CommentDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/conversations/conversations.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ConversationDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/likes/likes.schema.ts\n    \n    \n        \n            \n                \n                    \n                    DynamicLike\n                \n            \n            \n                \n                        Like | Like | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LikeDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/posts/posts.schema.ts\n    \n    \n        \n            \n                \n                    \n                    DynamicPost\n                \n            \n            \n                \n                        Post | Post | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PostDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/profiles/profiles.schema.ts\n    \n    \n        \n            \n                \n                    \n                    DynamicProfile\n                \n            \n            \n                \n                            Profile | Profile | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ProfileDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/s3/s3.service.ts\n    \n    \n        \n            \n                \n                    \n                    FileImage\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/friends/friends.schema.ts\n    \n    \n        \n            \n                \n                    \n                    FriendDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/messages/messages.schema.ts\n    \n    \n        \n            \n                \n                    \n                    MessageDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/authentication/types/Payload.ts\n    \n    \n        \n            \n                \n                    \n                    Payload\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/users.type.ts\n    \n    \n        \n            \n                \n                    \n                    ProvidersType\n                \n            \n            \n                \n                        \"FACEBOOK\" | \"GOOGLE\" | \"GITHUB\" | \"DISCORD\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UserProvider\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/requests/requests.schema.ts\n    \n    \n        \n            \n                \n                    \n                    RequestDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/users.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/types/UserOAuth.ts\n    \n    \n        \n            \n                \n                    \n                    UserOAuth\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Authorization   (src/.../Authorization.decorator.ts)\n                        \n                        \n                            CommentSchema   (src/.../comments.schema.ts)\n                        \n                        \n                            ConversationSchema   (src/.../conversations.schema.ts)\n                        \n                        \n                            FriendSchema   (src/.../friends.schema.ts)\n                        \n                        \n                            LikeSchema   (src/.../likes.schema.ts)\n                        \n                        \n                            MessageSchema   (src/.../messages.schema.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            PostSchema   (src/.../posts.schema.ts)\n                        \n                        \n                            ProfileSchema   (src/.../profiles.schema.ts)\n                        \n                        \n                            PUB_SUB   (src/.../pubsub.module.ts)\n                        \n                        \n                            pubSub   (src/.../app.module.ts)\n                        \n                        \n                            pubSub   (src/.../requests.resolver.ts)\n                        \n                        \n                            RequestSchema   (src/.../requests.schema.ts)\n                        \n                        \n                            UnionFriend   (src/.../profiles.schema.ts)\n                        \n                        \n                            UpperMiddleware   (src/.../upper.middleware.ts)\n                        \n                        \n                            UserSchema   (src/.../users.schema.ts)\n                        \n                        \n                            ValidationError   (src/.../validation.filter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/Authorization.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Authorization\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  async (context: ExecutionContext, host: ArgumentsHost): Promise => {\n    const ctx = GqlArgumentsHost.create(host).getContext();\n\n    if (ctx?.req?.user) return ctx.req.user;\n\n    throw new UnauthorizedException();\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/comments/comments.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CommentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Comment)\n                    \n                \n\n\n        \n    \n\n    src/conversations/conversations.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ConversationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Conversation)\n                    \n                \n\n\n        \n    \n\n    src/friends/friends.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FriendSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(FriendProfile)\n                    \n                \n\n\n        \n    \n\n    src/likes/likes.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LikeSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Like)\n                    \n                \n\n\n        \n    \n\n    src/messages/messages.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MessageSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Message)\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    src/posts/posts.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PostSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Post)\n                    \n                \n\n\n        \n    \n\n    src/profiles/profiles.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ProfileSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Profile)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UnionFriend\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createUnionType({\n\tname: 'UnionFriend',\n\ttypes: () => [Profile, FriendProfile] as const,\n\tresolveType: (value) => {\n\t\tif (\"_id\" in value) {\n\t\t\treturn Profile\n\t\t}\n\t\tif (\"friendId\" in value) {\n\t\t\treturn FriendProfile\n\t\t}\n\t\t\n\t}\n})\n                    \n                \n\n\n        \n    \n\n    src/pubsub.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PUB_SUB\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PUBSUB'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pubSub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PubSub()\n                    \n                \n\n\n        \n    \n\n    src/requests/requests.resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pubSub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PubSub()\n                    \n                \n\n\n        \n    \n\n    src/requests/requests.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RequestSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Request)\n                    \n                \n\n\n        \n    \n\n    src/common/middlewares/upper.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UpperMiddleware\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FieldMiddleware\n\n                    \n                \n                \n                    \n                        Default value : async (ctx: MiddlewareContext, next: NextFn) => {\n  const value = await next();\n  if (value instanceof Object) {\n    return value.toString();\n  }\n  return value.toUpperCase();\n}\n                    \n                \n\n\n        \n    \n\n    src/users/users.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n    src/common/filters/validation.filter.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ValidationError\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Error.ValidationError\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
