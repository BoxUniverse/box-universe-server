# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Provider {
  id: String
  type: String!
}

type User {
  _id: ID!
  username: String
  password: String
  email: String!
  refreshToken: String
  providers: [Provider!]!
  deletedAt: String!
  createdAt: String!
  updatedAt: String!
}

type Profile {
  id: String!
  name: String!
  email: String!
  avatar: String!
  provider: String!
  friends: [Profile!]!
}

type DeleteResult {
  acknowledged: Boolean!
  deletedCount: Float!
}

type Current {
  _id: ID!
  username: String
  password: String
  email: String!
  refreshToken: String
  providers: Provider!
  deletedAt: String!
  createdAt: String!
  updatedAt: String!
  name: String!
  picture: String!

  """id"""
  id: String!
}

type File {
  filename: String
  mimetype: String
  encoding: String
  url: String
}

type Relationship {
  userId: String!
  friendId: String!
  isBlock: Boolean!
}

type Request {
  _id: ID!
  userRequest: Profile!
  userReceive: Profile!
  isAccept: Boolean!
  isReject: Boolean!
  isPending: Boolean!
}

type FriendsProfile {
  friends: [Profile!]!
}

type Query {
  me: Current
  getUser(userInput: UserInput!): User
  getListUsers: [User!]
  getEntireProfile: [Profile!]!
  searchUser(searchInput: Search!): [Profile!]!
  getProfile(profileInput: Obtain!): Profile!
  retrieveRelationships(relationship: Info!): [Relationship!]
  retrieveEntireRelationships(status: Status!): [Relationship!]
  getRequests(request: RetrieveRequest!): [Request!]!
  getEntireFriends: FriendsProfile
}

input UserInput {
  _id: String
  username: String
  password: String
  email: String
  refreshToken: String
}

input Search {
  keyword: String!
}

input Obtain {
  id: String!
}

input Info {
  friendId: ID!
}

input Status {
  isPending: Boolean!
  isBlock: Boolean!
}

input RetrieveRequest {
  userRequest: ID
  userReceive: ID
  isPending: Boolean!
  isReject: Boolean!
  isAccept: Boolean!
}

type Mutation {
  deleteUser(userInput: UserInput!): User
  softDeleteUser(userInput: UserInput!): User
  deleteEntireUser: DeleteResult
  createUser(createInput: CreateInput!): User
  uploadAvatar(file: Upload!, id: String!): File
  unfriend(friend: Friend!): Float
  addRelationship(relationship: Create!): Relationship!
  acceptRelationship(relationship: Info!): Relationship
  blockRelationship(relationship: Info!): Relationship
  unblockRelationship(relationship: Info!): Relationship
  login(loginInput: LoginInput!): User
  OAuth(OAuthInput: OAuthInput!): User!
  register(createInput: CreateInput!): User!
  addRequest(request: CreateRequest!): Request!
  acceptRequest(request: InfoRequest!): Request
  rejectRequest(request: InfoRequest!): Request
}

input CreateInput {
  username: String
  password: String
  email: String
  provider: ProviderInput!
}

input ProviderInput {
  id: String
  type: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input Friend {
  userId: String!
  friendId: String!
}

input Create {
  friendId: ID!
}

input LoginInput {
  username: String!
  password: String!
  nonce: String!
}

input OAuthInput {
  id: String
  name: String
  email: String
  provider: String
  nonce: String
}

input CreateRequest {
  userRequest: ID
  userReceive: ID!
}

input InfoRequest {
  userRequest: ID
  userReceive: ID
}

type Subscription {
  requestAdded: [Request!]!
}
