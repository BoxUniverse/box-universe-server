# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: ID!
  username: String
  password: String
  email: String!
  refreshToken: String
  providers: [Provider!]!
  deletedAt: String!
  createdAt: String!
  updatedAt: String!
}

type Provider {
  id: String
  type: String!
}

type Current {
  _id: ID!
  username: String
  password: String
  email: String!
  refreshToken: String
  providers: [Provider!]!
  deletedAt: String!
  createdAt: String!
  updatedAt: String!
  name: String!
  picture: String!

  """id"""
  id: String!
}

type Profile {
  id: String!
  name: String!
  email: String!
  avatar: String!
  provider: String
  friends: [UnionFriend!]
}

union UnionFriend = Profile | FriendProfile

type FriendProfile {
  friendId: String
}

type Conversation {
  _id: ID!
  name: String
  members: [Profile!]!
}

type ListFriendNotInConversation {
  result: [Profile!]!
}

type FileInfo {
  url: String!
  type: String!
}

type Message {
  _id: ID
  sender: Profile!
  conversation: ID!
  message: String
  files: [FileInfo!]
  type: String!
  createdAt: String!
}

type MessageOmit {
  _id: ID
  sender: Profile!
  message: String
  files: [FileInfo!]
  type: String!
  createdAt: String!
}

type MessagesConversation {
  _id: ID!
  messages: [MessageOmit!]!
}

type DeleteResult {
  acknowledged: Boolean!
  deletedCount: Float!
}

type File {
  filename: String
  mimetype: String
  encoding: String
  url: String
}

type Post {
  _id: ID
  content: String
  profile: Profile!
  countLike: Float!
  countComment: Float!
  createdAt: String!
  updatedAt: String!
  deletedAt: String!
  isLiked: Boolean!
  likes: [Profile!]!
}

type Comment {
  _id: ID!
  profile: Profile!
  post: Post!
  text: String!
  deletedAt: String!
  createdAt: String!
  updatedAt: String!
}

type FriendsProfile {
  friends: [UnionFriend!]
}

type Like {
  _id: ID!
  profile: Profile!
  post: Post!
  deletedAt: String!
  createdAt: String!
  updatedAt: String!
}

type Request {
  _id: ID!
  userRequest: Profile!
  userReceive: Profile!
  isAccept: Boolean!
  isReject: Boolean!
  isPending: Boolean!
}

type Query {
  me: Current
  getUser(userInput: UserInput!): User
  getListUsers: [User!]
  getEntireProfile: [Profile!]!
  searchUser(searchInput: Search!): [Profile!]!
  getProfile(profileInput: Obtain!): Profile!
  getConversationByProfileId(profileId: String!): [Conversation!]
  getConversationById(conversationId: String!): Conversation
  getListFriendNotInConversation(conversationId: String!): ListFriendNotInConversation
  getConversationByFriend(profileId: String!, friendId: String!): Conversation
  getMessagesByConversationId(payload: PaginationMessages!): MessagesConversation
  getEntireFriends: FriendsProfile
  getRequests(request: RetrieveRequest!): [Request!]!
  getPosts(payload: GetPosts = null): [Post!]
  getComments(post: String!): [Comment!]
}

input UserInput {
  _id: String
  username: String
  password: String
  email: String
  refreshToken: String
}

input Search {
  keyword: String!
}

input Obtain {
  id: String!
}

input PaginationMessages {
  conversationId: String!
  startValue: ID
}

input RetrieveRequest {
  userRequest: ID
  userReceive: ID
  isPending: Boolean!
  isReject: Boolean!
  isAccept: Boolean!
}

input GetPosts {
  _id: String = null
}

type Mutation {
  deleteUser(userInput: UserInput!): User
  softDeleteUser(userInput: UserInput!): User
  deleteEntireUser: DeleteResult
  createUser(createInput: CreateInput!): User
  uploadAvatar(file: Upload!, id: String!): File
  unfriend(friend: Friend!): Float
  createConversation(infoConversation: CreateConversation!): Boolean
  addMemberConversation(conversationId: String!, profileIds: [String!]!): Conversation
  changeNameConversation(payload: ChangeNameConversation!): Conversation
  sendMessage(payload: Send!): Message
  sendFiles(files: [Upload!]!, payload: SendFiles!): Message
  login(loginInput: LoginInput!): User
  OAuth(OAuthInput: OAuthInput!): User!
  register(createInput: CreateInput!): User!
  addRequest(request: CreateRequest!): Request!
  acceptRequest(request: InfoRequest!): Request
  rejectRequest(request: InfoRequest!): Request
  createPost(post: CreatePost!): Post!
  deletePost(post: DeletePost!): Post
  commentPost(post: String!, text: String!): Comment!
  deleteComment(id: ID!): Comment!
  likePost(post: String!): Like
  unlikePost(post: String!): Float!
}

input CreateInput {
  username: String
  password: String
  email: String
  provider: ProviderInput!
}

input ProviderInput {
  id: String
  type: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input Friend {
  userId: String!
  friendId: String!
}

input CreateConversation {
  members: [String!]!
  name: String!
}

input ChangeNameConversation {
  _id: ID!
  name: String
}

input Send {
  message: String!
  conversationId: ID!
  now: Float!
}

input SendFiles {
  conversationId: ID!
  now: Float!
}

input LoginInput {
  username: String!
  password: String!
  nonce: String!
}

input OAuthInput {
  id: String
  name: String
  email: String
  provider: String
  nonce: String
}

input CreateRequest {
  userRequest: ID
  userReceive: ID!
}

input InfoRequest {
  userRequest: ID
  userReceive: ID
}

input CreatePost {
  """content of post"""
  content: String

  """count like of post"""
  countLike: Float
}

input DeletePost {
  _id: ID
}

type Subscription {
  memberAdded: Conversation
  requestAdded: [Request!]!
  postAdded(publisher: PublisherSubscriptions): Post!
  commentAdded(post: String!): Post
  newLike(post: String!): Post!
}

input PublisherSubscriptions {
  id: ID!
}